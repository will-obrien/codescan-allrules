rules_key,rules_name,rules_mdDesc,rules_severity,rules_langName,rules_type,nCino Specific
javascript:S1126,"Return of boolean expressions should not be wrapped into an ""if-then-else"" statement","<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<p>Note that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper
conversion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>
<p>or</p>
<pre>
return !!expression;
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S2208,Wildcard imports should not be used,"<p>On the principle that clearer code is better code, you should explicitly <code>import</code> the things you want to use in a module. Using
<code>import *</code> imports everything in the module, and runs the risk of confusing maintainers. Similarly, <code>export * from ""module"";</code>
imports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import * as Imported from ""aModule"";  // Noncompliant
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S1066,"Collapsible ""if"" statements should be merged","<p>Merging collapsible <code>if</code> statements increases the codeâ€™s readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != undefined) {
  if (y === 2) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x != undefined &amp;&amp; y === 2) {
  // ...
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3531,"Generators should ""yield"" something","<p>A generator without a <code>yield</code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code
will always be empty.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function* myGen(a, b) {  // Noncompliant
  let answer = 0;
  answer += a * b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function* myGen(a, b) {
  let answer = 0;
  while (answer &lt; 42) {
    answer += a * b;
    yield answer;
  }
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3498,Object literal shorthand syntax should be used,"<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,
object-shorthand is also preferred for the definition of functions in object literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = 1;

let myObj = {
  a : a,  // Noncompliant
  fun: function () {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = 1;

let myObj = {
  a,
  fun () {
    //...
  }
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3533,"""import"" should be used to include external code","<p>Before ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,
ES2015, provides language-standard mechanisms for module management, <code>import</code> and <code>export</code>, and older usages should be
converted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// circle.js
exports.area = function (r) {
  return PI * r * r;
};

// foo.js
define([""./cart"", ""./horse""], function(cart, horse) {  // Noncompliant
  // ...
});

// bar.js
const circle = require('./circle.js');  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
// circle.js
let area = function (r) {
  return PI * r * r;
}
export default area;

// foo.js
import cart from ""./cart.js"";
import horse from ""./horse.js"";

// bar.js
import circle from ""./circle.js""
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S2260,JavaScript parser failure,"<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the
number of files that do not parse but also to easily find out why they do not parse.</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1442,"""alert(...)"" should not be used","<p><code>alert(...)</code> as well as <code>confirm(...)</code> and <code>prompt(...)</code> can be useful for debugging during development, but in
production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(unexpectedCondition) {
  alert(""Unexpected Condition"");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S4507} instead.</p>",MINOR,JavaScript,VULNERABILITY,FALSE
javascript:S2688,"""NaN"" should not be used in comparisons","<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,
but probably not the ones you want.</p>
<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps
counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = NaN;

if (a === NaN) {  // Noncompliant; always false
  console.log(""a is not a number"");  // this is dead code
}
if (a !== NaN) { // Noncompliant; always true
  console.log(""a is not NaN""); // this statement is not necessarily true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (Number.isNaN(a)) {
  console.log(""a is not a number"");
}
if (!Number.isNaN(a)) {
  console.log(""a is not NaN"");
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S1535,"""for...in"" loops should filter properties before acting on them","<p>The <code>for...in</code> statement allows you to loop through the names of all of the properties of an object. The list of properties includes all
those properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data
properties. Programs that donâ€™t take this into account can fail.</p>
<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are
acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (name in object) {
    doSomething(name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (name in object) {
  if (object.hasOwnProperty(name)) {
    doSomething(name);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Loops used to clone objects are ignored.</p>
<pre>
for (prop in obj) {
  a[prop] = obj[prop];  // Compliant by exception
}
</pre>",MAJOR,JavaScript,BUG,FALSE
