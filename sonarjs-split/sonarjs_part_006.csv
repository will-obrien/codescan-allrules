rules_key,rules_name,rules_mdDesc,rules_severity,rules_langName,rules_type,nCino Specific
javascript:S1871,Two branches in a conditional structure should not have exactly the same implementation,"<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if (a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule {rule:javascript:S3923} raises a bug.</p>
<pre>
if (a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3984,Errors should not be created without being thrown,"<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0) {
  new Error(""x must be nonnegative"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0) {
  throw new Error(""x must be nonnegative"");
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3358,Ternary operators should not be nested,"<p>Just because you <em>can</em> do something, doesnâ€™t mean you should, and thatâ€™s the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getReadableStatus(job) {
  return job.isRunning() ? ""Running"" : job.hasErrors() ? ""Failed"" : ""Succeeded "";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getReadableStatus(job) {
  if (job.isRunning()) {
    return ""Running"";
  }
  return job.hasErrors() ? ""Failed"" : ""Succeeded"";
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S128,"Switch cases should end with an unconditional ""break"" statement","<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                               // Ends with comment when fall-through is intentional
    console.log(""this case falls through"")
    // fall through
  case 4:                                // Use of throw statement
    throw new IllegalStateException();
  case 5:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/484.html"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
</ul>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S888,"Equality operators should not be used in ""for"" loop termination conditions","<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (var i = 0; arr[i] != null; i++) {
  // ...
}

for (var i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/835"">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
</ul>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S881,Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression,"<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2990,"The global ""this"" object should not be used","<p>When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object, which is the same thing as the
<code>window</code> object in a standard web page. Such uses could be confusing to maintainers. Instead, simply drop the <code>this</code>, or replace
it with <code>window</code>; it will have the same effect and be more readable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
this.foo = 1;   // Noncompliant
console.log(this.foo); // Noncompliant

function MyObj() {
  this.foo = 1; // Compliant
}

MyObj.func1 = function() {
  if (this.foo == 1) { // Compliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
foo = 1;
console.log(foo);

function MyObj() {
  this.foo = 1;
}

MyObj.func1 = function() {
  if (this.foo == 1) {
    // ...
  }
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S103,Lines should not be too long,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1172,Unused function parameters should be removed,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a, b) { // ""a"" is unused
  return compute(b);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(b) {
  return compute(b);
}
</pre>
<h2>Exceptions</h2>
<p>When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.
For instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:</p>
<pre>
$([""first"", ""last""]).each(function (i, value) {
  computeSomethingWithValue(value);
});
</pre>
<p>So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function
signature. Unused arguments which are followed by an argument that <em>is</em> used will be ignored.</p>
<p>Examples :</p>
<pre>
var myFirsCallBackFunction = function (p1, p2, p3, p4) {  // p2 is ignored, but p4 is reported
                                              return p1 + p3; }

var mySecondCallBackFunction = function (p1, p2, p3, p4) {  // p1, p2 and p3 are ignored
                                              return p4; }

var myThirdCallBackFunction = function (p1, p2, p3, p4) {  // p1 is ignored but p3 and p4 are reported
                                              return p2; }
</pre>
<p>Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused.</p>
<pre>
function doSomething(a, b, c) {
  compute(arguments);
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5122,Having a permissive Cross-Origin Resource Sharing policy is security-sensitive,"<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>
</ul>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for
security-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)
from its own. The requested target can append additional HTTP headers in response, called <a
href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy
/ relax the same origin policy.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> You donâ€™t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>
  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>
  <li> Your access control policy is dynamically defined by a user-controlled input like <a
  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>
  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or
  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>
</ul>
<h2>Sensitive Code Example</h2>
<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>
<pre>
const http = require('http');
const srv = http.createServer((req, res) =&gt; {
  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive
  res.end('ok');
});
srv.listen(3000);
</pre>
<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>
<pre>
const cors = require('cors');

let app1 = express();
app1.use(cors()); // Sensitive: by default origin is set to *

let corsOptions = {
  origin: '*' // Sensitive
};

let app2 = express();
app2.use(cors(corsOptions));
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>
<pre>
const http = require('http');
const srv = http.createServer((req, res) =&gt; {
  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant
  res.end('ok');
});
srv.listen(3000);
</pre>
<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>
<pre>
const cors = require('cors');

let corsOptions = {
  origin: 'trustedwebsite.com' // Compliant
};

let app = express();
app.use(cors(corsOptions));
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing"">OWASP HTML5 Security Cheat Sheet</a> - Cross
  Origin Resource Sharing </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/346.html"">MITRE, CWE-346</a> - Origin Validation Error </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/942.html"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
