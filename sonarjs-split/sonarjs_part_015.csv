rules_key,rules_name,rules_mdDesc,rules_severity,rules_langName,rules_type,nCino Specific
javascript:S3516,Function returns should not be invariant,"<p>When a function is designed to return an invariant value, it may be poor design, but it shouldnâ€™t adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is likely a mistake.</p>
<p>This rule raises an issue when a function contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {  // Noncompliant
  let b = 12;
  if (a) {
    return b;
  }
  return b;
}
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S2427,"The base should be provided to ""parseInt""","<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using
the single-arg version can result in unexpected results on older browsers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
parseInt(""010"");  // Noncompliant; pre-2013 browsers may return 8
</pre>
<h2>Compliant Solution</h2>
<pre>
parseInt(""010"", 10);
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S1451,Track lack of copyright and license headers,"<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S3513,"""arguments"" should not be accessed directly","<p>The magic of JavaScript is that you can pass arguments to functions that donâ€™t declare parameters, and on the other side, you can use those
passed-in arguments inside the no-args <code>function</code>.</p>
<p>But just because you can, that doesâ€™t mean you should. The expectation and use of arguments inside functions that donâ€™t explicitly declare them is
confusing to callers. No one should ever have to read and fully understand a function to be able to use it competently.</p>
<p>If you donâ€™t want to name arguments explicitly, use the <code>...</code> syntax to specify that an a variable number of arguments is expected. Then
inside the function, youâ€™ll be dealing with a first-class array, rather than an array-like structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function concatenate() {
  let args = Array.prototype.slice.call(arguments);  // Noncompliant
  return args.join(', ');
}

function doSomething(isTrue) {
  var args = Array.prototype.slice.call(arguments, 1); // Noncompliant
  if (!isTrue) {
    for (var arg of args) {
      ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function concatenate(...args) {
  return args.join(', ');
}

function doSomething(isTrue, ...values) {
  if (!isTrue) {
    for (var value of values) {
      ...
    }
  }
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S6092,Chai assertions should have only one reason to succeed,"<p>Each assertion should test one condition and have only one reason to fail or succeed. If an assertion success depends on multiple conditions it
becomes difficult to understand if the test passed for the right reason. It also makes debugging more difficult when the test fails.</p>
<p>This rule raises an issue when the following Chai assertions are found:</p>
<ul>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_throw""><code>.throw</code></a> are used together and at least one
  argument is provided to <code>.throw</code>. Such assertions succeed when the target either does not throw any exception, or when it throws an
  exception different from the one provided. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_include""><code>.include</code></a> are used together and an
  <code>object</code> is given to <code>.include</code>. Such assertions succeed when one or multiple key/values are missing. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_property""><code>.property</code></a> are used together and
  <code>.property</code> is given at least two arguments. Such assertions succeed when the target either doesnâ€™t have the requested property, or when
  this property exists but has a different value. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_ownpropertydescriptor""><code>.ownPropertyDescriptor</code></a> are
  used together and <code>.ownPropertyDescriptor</code> is given at least two arguments. Such assertions succeed when the target either doesnâ€™t have
  the requested property descriptor, or its property descriptor is not deeply equal to the given descriptor </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_members""><code>.members</code></a> are used together. Such
  assertions succeed when one or multiple members are missing. </li>
  <li> When <a href=""https://www.chaijs.com/api/bdd/#method_change""><code>.change</code></a> and <a
  href=""https://www.chaijs.com/api/bdd/#method_by""><code>.by</code></a> are used together. Such assertions succeed when the target either decreases or
  increases by the given delta </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_increase""><code>.increase</code></a> are used together. Such
  assertions succeed when the target either decreases or stays the same. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_decrease""><code>.decrease</code></a> are used together. Such
  assertions succeed when the target either increases or stays the same. </li>
  <li> When <code>.not</code> negates <a href=""https://www.chaijs.com/api/bdd/#method_decrease""><code>.by</code></a>. Such assertions succeed when the
  target didnâ€™t change by one specific delta among all the possible deltas. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_decrease""><code>.finite</code></a> are used together. Such
  assertions succeed when the target either is not a <code>number</code>, or is one of <code>Nan</code>, positive <code>Infinity</code>, negative
  <code>Infinity</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
const expect = require('chai').expect;

describe(""uncertain assertions"", function() {
    const throwsTypeError = () =&gt; { throw new TypeError() }

    it(""uses chai 'expect'"", function() {
        expect(throwsTypeError).to.not.throw(ReferenceError) // Noncompliant
        expect({a: 42}).to.not.include({b: 10, c: 20});  // Noncompliant
        expect({a: 21}).to.not.have.property('b', 42); // Noncompliant
        expect({a: 21}).to.not.have.ownPropertyDescriptor('b', {   // Noncompliant
            configurable: true,
            enumerable: true,
            writable: true,
            value: 42,
        });
        expect([21, 42]).to.not.have.members([1, 2]); // Noncompliant

        var myObj = { value: 1 }
        const incThree = () =&gt; { myObj.value += 3; };
        const decThree = () =&gt; { myObj.value -= 3; };
        const doNothing = () =&gt; {};

        expect(incThree).to.change(myObj, 'value').by(3); // Noncompliant
        expect(decThree).to.change(myObj, 'value').by(3); // Noncompliant

        expect(decThree).to.not.increase(myObj, 'value'); // Noncompliant
        expect(incThree).to.not.decrease(myObj, 'value'); // Noncompliant

        expect(doNothing).to.not.increase(myObj, 'value'); // Noncompliant
        expect(doNothing).to.not.decrease(myObj, 'value'); // Noncompliant

        expect(incThree).to.increase(myObj, 'value').but.not.by(1); // Noncompliant

        let toCheck;
        expect(toCheck).to.not.be.finite; // Noncompliant
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const expect = require('chai').expect;

describe(""uncertain assertions"", function() {
    const throwsTypeError = () =&gt; { throw new TypeError() }

    it(""uses chai 'expect'"", function() {
        expect(throwsTypeError).to.throw(TypeError)
        expect({a: 42}).to.not.have.any.keys('b', 'c');
        expect({a: 21}).to.not.have.property('b');
        expect({a: 21}).to.not.have.ownPropertyDescriptor('b');
        expect([21, 42]).to.not.include(1).and.not.include(2);

        var myObj = { value: 1 }
        const incThree = () =&gt; { myObj.value += 3; };
        const decThree = () =&gt; { myObj.value -= 3; };
        const doNothing = () =&gt; {};

        expect(incThree).to.increase(myObj, 'value').by(3);
        expect(decThree).to.decrease(myObj, 'value').by(3);

        expect(decThree).to.decrease(myObj, 'value').by(3);
        expect(incThree).to.increase(myObj, 'value').by(3);

        expect(doNothing).to.not.change(myObj, 'value');

        expect(incThree).to.increase(myObj, 'value').by(3);

        let toCheck;
        // Either of the following is valid
        expect(toCheck).to.be.a('string');
        expect(toCheck).to.be.NaN;
        expect(toCheck).to.equal(Infinity);
        expect(toCheck).to.equal(-Infinity);
    });
});
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2612,Setting loose POSIX file permissions is security-sensitive,"<p>In Unix, ""<code>others</code>"" class refers to all users except the owner of the file and the members of the group assigned to this file.</p>
<p>Granting permissions to this group can lead to unintended access to files.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The application is designed to be run on a multi-user environment. </li>
  <li> Corresponding files and directories may contain confidential information. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The most restrictive possible permissions should be assigned to files and directories.</p>
<h2>Sensitive Code Example</h2>
<p>Node.js <a href=""https://nodejs.org/api/fs.html""><code>fs</code></a></p>
<pre>
const fs = require('fs');

fs.chmodSync(""/tmp/fs"", 0o777); // Sensitive
</pre>
<pre>
const fs = require('fs');
const fsPromises = fs.promises;

fsPromises.chmod(""/tmp/fsPromises"", 0o777); // Sensitive
</pre>
<pre>
const fs = require('fs');
const fsPromises = fs.promises

async function fileHandler() {
  let filehandle;
  try {
    filehandle = fsPromises.open('/tmp/fsPromises', 'r');
    filehandle.chmod(0o777); // Sensitive
  } finally {
    if (filehandle !== undefined)
      filehandle.close();
  }
}
</pre>
<p>Node.js <a href=""https://nodejs.org/api/process.html#process_process_umask_mask""><code>process.umask</code></a></p>
<pre>
const process = require('process');

process.umask(0o000); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p>Node.js <a href=""https://nodejs.org/api/fs.html""><code>fs</code></a></p>
<pre>
const fs = require('fs');

fs.chmodSync(""/tmp/fs"", 0o770); // Compliant
</pre>
<pre>
const fs = require('fs');
const fsPromises = fs.promises;

fsPromises.chmod(""/tmp/fsPromises"", 0o770); // Compliant
</pre>
<pre>
const fs = require('fs');
const fsPromises = fs.promises

async function fileHandler() {
  let filehandle;
  try {
    filehandle = fsPromises.open('/tmp/fsPromises', 'r');
    filehandle.chmod(0o770); // Compliant
  } finally {
    if (filehandle !== undefined)
      filehandle.close();
  }
}
</pre>
<p>Node.js <a href=""https://nodejs.org/api/process.html#process_process_umask_mask""><code>process.umask</code></a></p>
<pre>
const process = require('process');

process.umask(0o007); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>
  <li> <a href=""https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)"">OWASP File Permission</a> </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/266.html"">MITRE, CWE-266</a> - Incorrect Privilege Assignment </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",MAJOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S3827,Variables should be defined before being used,"<p>When a non-existent variable is referenced a <code>ReferenceError</code> is raised.</p>
<p>Due to the dynamic nature of JavaScript this can happen in a number of scenarios:</p>
<ul>
  <li> When typo was made in a symbolâ€™s name. </li>
  <li> When using variable declared with <code>let</code> or <code>const</code> before declaration (unlike <code>var</code>-declarations, they are not
  hoisted to the top of the scope). </li>
  <li> Due to confusion with scopes of <code>let</code>- and <code>const</code>-declarations (they have block scope, unlike
  <code>var</code>-declarations, having function scope). </li>
  <li> When accessing a property in the wrong scope (e.g. forgetting to specify <code>this.</code>). </li>
</ul>
<p>This rule does not raise issues on global variables which are defined with <code>sonar.javascript.globals</code> and
<code>sonar.javascript.environments</code> properties.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var john = {
  firstName: ""john"",
  show: function() { console.log(firstName); } // Noncompliant: firstName is not defined
}
john.show();
</pre>
<h2>Compliant Solution</h2>
<pre>
var john = {
  firstName: ""john"",
  show: function() { console.log(this.firstName); }
}
john.show();
</pre>",BLOCKER,JavaScript,BUG,FALSE
javascript:S2737,"""catch"" clauses should do more than rethrow","<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.</p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  doSomething();
} catch (ex) {  // Noncompliant
  throw ex;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  doSomething();
} catch (ex) {
  console.err(ex);
  throw ex;
}
</pre>
<p>or</p>
<pre>
doSomething();
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1529,Bitwise operators should not be used in boolean contexts,"<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.</p>
<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp; b) { ... } // Noncompliant; &amp; used in error
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a &amp;&amp; b) { ... }
</pre>
<h2>Exceptions</h2>
<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,
<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and
<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that
bitwise operations are truly intended in the file.</p>",MAJOR,JavaScript,BUG,FALSE
javascript:S2970,Assertions should be complete,"<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete Chai assertions in the following
cases:</p>
<ul>
  <li> when <code>assert.fail</code>, <code>expect.fail</code> or <code>should.fail</code> are present but not called. </li>
  <li> when an <code>expect(...)</code> or <code>should</code> assertion is not followed by an assertion method, such as <code>equal</code>. </li>
  <li> when an <code>expect</code> or <code>should</code> assertion ends with a <a
  href=""https://www.chaijs.com/api/bdd/#method_language-chains"">chainable getters</a>, such as <code>.that</code>, or a modifier, such as
  <code>.deep</code>. </li>
  <li> when an <code>expect</code> or <code>should</code> assertion function, such as <code>.throw</code>, is not called. </li>
</ul>
<p>In such cases, what is intended to be a test doesnâ€™t actually verify anything</p>
<h2>Noncompliant Code Example</h2>
<pre>
const assert = require('chai').assert;
const expect = require('chai').expect;

describe(""incomplete assertions"", function() {
    const value = 42;

    it(""uses chai 'assert'"", function() {
        assert.fail;  // Noncompliant
    });

    it(""uses chai 'expect'"", function() {
        expect(1 == 1);  // Noncompliant
        expect(value.toString).to.throw;  // Noncompliant
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const assert = require('chai').assert;
const expect = require('chai').expect;

describe(""incomplete assertions"", function() {
    const value = 42;

    it(""uses chai 'assert'"", function() {
        assert.fail();
    });

    it(""uses chai 'expect'"", function() {
        expect(1).to.equal(1);
        expect(value.toString).throw(TypeError);
    });
});
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
