rules_key,rules_name,rules_mdDesc,rules_severity,rules_langName,rules_type,nCino Specific
javascript:S5042,Expanding archive files without controlling resource consumption is security-sensitive,"<p>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can
lead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of
uncompressed data. To achieve this extreme <a href=""https://en.wikipedia.org/wiki/Data_compression_ratio"">compression ratio</a>, attackers will
compress irrelevant data (eg: a long string of repeated bytes).</p>
<h2>Ask Yourself Whether</h2>
<p>Archives to expand are untrusted and:</p>
<ul>
  <li> There is no validation of the number of entries in the archive. </li>
  <li> There is no validation of the total size of the uncompressed data. </li>
  <li> There is no validation of the ratio between the compressed and uncompressed archive entry. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is
  1 to 3. </li>
  <li> Define and control the threshold for maximum total size of the uncompressed data. </li>
  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in
  particular itâ€™s not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>For <a href=""https://github.com/npm/node-tar"">tar</a> module:</p>
<pre>
const tar = require('tar');

tar.x({ // Sensitive
  file: 'foo.tar.gz'
});
</pre>
<p>For <a href=""https://github.com/cthackers/adm-zip"">adm-zip</a> module:</p>
<pre>
const AdmZip = require('adm-zip');

let zip = new AdmZip(""./foo.zip"");
zip.extractAllTo("".""); // Sensitive
</pre>
<p>For <a href=""https://stuk.github.io/jszip/"">jszip</a> module:</p>
<pre>
const fs = require(""fs"");
const JSZip = require(""jszip"");

fs.readFile(""foo.zip"", function(err, data) {
  if (err) throw err;
  JSZip.loadAsync(data).then(function (zip) { // Sensitive
    zip.forEach(function (relativePath, zipEntry) {
      if (!zip.file(zipEntry.name)) {
        fs.mkdirSync(zipEntry.name);
      } else {
        zip.file(zipEntry.name).async('nodebuffer').then(function (content) {
          fs.writeFileSync(zipEntry.name, content);
        });
      }
    });
  });
});
</pre>
<p>For <a href=""https://github.com/thejoshwolfe/yauzl"">yauzl</a> module</p>
<pre>
const yauzl = require('yauzl');

yauzl.open('foo.zip', function (err, zipfile) {
  if (err) throw err;

  zipfile.on(""entry"", function(entry) {
    zipfile.openReadStream(entry, function(err, readStream) {
      if (err) throw err;
      // TODO: extract
    });
  });
});
</pre>
<p>For <a href=""https://github.com/maxogden/extract-zip"">extract-zip</a> module:</p>
<pre>
const extract = require('extract-zip')

async function main() {
  let target = __dirname + '/test';
  await extract('test.zip', { dir: target }); // Sensitive
}
main();
</pre>
<h2>Compliant Solution</h2>
<p>For <a href=""https://github.com/npm/node-tar"">tar</a> module:</p>
<pre>
const tar = require('tar');
const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB

let fileCount = 0;
let totalSize = 0;

tar.x({
  file: 'foo.tar.gz',
  filter: (path, entry) =&gt; {
    fileCount++;
    if (fileCount &gt; MAX_FILES) {
      throw 'Reached max. number of files';
    }

    totalSize += entry.size;
    if (totalSize &gt; MAX_SIZE) {
      throw 'Reached max. size';
    }

    return true;
  }
});
</pre>
<p>For <a href=""https://github.com/cthackers/adm-zip"">adm-zip</a> module:</p>
<pre>
const AdmZip = require('adm-zip');
const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB
const THRESHOLD_RATIO = 10;

let fileCount = 0;
let totalSize = 0;
let zip = new AdmZip(""./foo.zip"");
let zipEntries = zip.getEntries();
zipEntries.forEach(function(zipEntry) {
    fileCount++;
    if (fileCount &gt; MAX_FILES) {
        throw 'Reached max. number of files';
    }

    let entrySize = zipEntry.getData().length;
    totalSize += entrySize;
    if (totalSize &gt; MAX_SIZE) {
        throw 'Reached max. size';
    }

    let compressionRatio = entrySize / zipEntry.header.compressedSize;
    if (compressionRatio &gt; THRESHOLD_RATIO) {
        throw 'Reached max. compression ratio';
    }

    if (!zipEntry.isDirectory) {
        zip.extractEntryTo(zipEntry.entryName, ""."");
    }
});
</pre>
<p>For <a href=""https://stuk.github.io/jszip/"">jszip</a> module:</p>
<pre>
const fs = require(""fs"");
const pathmodule = require(""path"");
const JSZip = require(""jszip"");

const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB

let fileCount = 0;
let totalSize = 0;
let targetDirectory = __dirname + '/archive_tmp';

fs.readFile(""foo.zip"", function(err, data) {
  if (err) throw err;
  JSZip.loadAsync(data).then(function (zip) {
    zip.forEach(function (relativePath, zipEntry) {
      fileCount++;
      if (fileCount &gt; MAX_FILES) {
        throw 'Reached max. number of files';
      }

      // Prevent ZipSlip path traversal (S6096)
      const resolvedPath = pathmodule.join(targetDirectory, zipEntry.name);
      if (!resolvedPath.startsWith(targetDirectory)) {
        throw 'Path traversal detected';
      }

      if (!zip.file(zipEntry.name)) {
        fs.mkdirSync(resolvedPath);
      } else {
        zip.file(zipEntry.name).async('nodebuffer').then(function (content) {
          totalSize += content.length;
          if (totalSize &gt; MAX_SIZE) {
            throw 'Reached max. size';
          }

          fs.writeFileSync(resolvedPath, content);
        });
      }
    });
  });
});
</pre>
<p>Be aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to
decide if the implementation is secure.</p>
<p>For <a href=""https://github.com/thejoshwolfe/yauzl"">yauzl</a> module</p>
<pre>
const yauzl = require('yauzl');

const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB
const THRESHOLD_RATIO = 10;

yauzl.open('foo.zip', function (err, zipfile) {
  if (err) throw err;

  let fileCount = 0;
  let totalSize = 0;

  zipfile.on(""entry"", function(entry) {
    fileCount++;
    if (fileCount &gt; MAX_FILES) {
      throw 'Reached max. number of files';
    }

    // The uncompressedSize comes from the zip headers, so it might not be trustworthy.
    // Alternatively, calculate the size from the readStream.
    let entrySize = entry.uncompressedSize;
    totalSize += entrySize;
    if (totalSize &gt; MAX_SIZE) {
      throw 'Reached max. size';
    }

    if (entry.compressedSize &gt; 0) {
      let compressionRatio = entrySize / entry.compressedSize;
      if (compressionRatio &gt; THRESHOLD_RATIO) {
        throw 'Reached max. compression ratio';
      }
    }

    zipfile.openReadStream(entry, function(err, readStream) {
      if (err) throw err;
      // TODO: extract
    });
  });
});
</pre>
<p>Be aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to
decide if the implementation is secure.</p>
<p>For <a href=""https://github.com/maxogden/extract-zip"">extract-zip</a> module:</p>
<pre>
const extract = require('extract-zip')

const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB
const THRESHOLD_RATIO = 10;

async function main() {
  let fileCount = 0;
  let totalSize = 0;

  let target = __dirname + '/foo';
  await extract('foo.zip', {
    dir: target,
    onEntry: function(entry, zipfile) {
      fileCount++;
      if (fileCount &gt; MAX_FILES) {
        throw 'Reached max. number of files';
      }

      // The uncompressedSize comes from the zip headers, so it might not be trustworthy.
      // Alternatively, calculate the size from the readStream.
      let entrySize = entry.uncompressedSize;
      totalSize += entrySize;
      if (totalSize &gt; MAX_SIZE) {
        throw 'Reached max. size';
      }

      if (entry.compressedSize &gt; 0) {
        let compressionRatio = entrySize / entry.compressedSize;
        if (compressionRatio &gt; THRESHOLD_RATIO) {
          throw 'Reached max. compression ratio';
        }
      }
    }
  });
}
main();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> -
  Security Misconfiguration </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/409.html"">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)
  </li>
  <li> <a href=""https://www.bamsoftware.com/hacks/zipbomb/"">bamsoftware.com</a> - A better Zip Bomb </li>
</ul>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5728,Disabling content security policy fetch directives is security-sensitive,"<p>Content security policy (CSP) (fetch directives) is a <a href=""https://www.w3.org/TR/CSP3/"">W3C standard </a> which is used by a server to specify,
via a http header, the origins from where the browser is allowed to load resources. It can help to mitigate the risk of cross site scripting (XSS)
attacks and reduce privileges used by an application. If the website doesnâ€™t define CSP header the browser will apply <a
href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">same-origin policy</a> by default.</p>
<pre>
Content-Security-Policy: default-src 'self'; script-src â€˜self â€˜ http://www.example.com
</pre>
<p>In the above example, all resources are allowed from the website where this header is set and script resources fetched from example.com are also
authorized:</p>
<pre>
&lt;img src=""selfhostedimage.png&gt;&lt;/script&gt; &lt;!-- will be loaded because default-src 'self'; directive is applied  --&gt;
&lt;img src=""http://www.example.com/image.png&gt;&lt;/script&gt;  &lt;!-- will NOT be loaded because default-src 'self'; directive is applied  --&gt;
&lt;script src=""http://www.example.com/library.js&gt;&lt;/script&gt; &lt;!-- will be loaded because script-src â€˜self â€˜ http://www.example.comdirective is applied  --&gt;
&lt;script src=""selfhostedscript.js&gt;&lt;/script&gt; &lt;!-- will be loaded because script-src â€˜self â€˜ http://www.example.com directive is applied  --&gt;
&lt;script src=""http://www.otherexample.com/library.js&gt;&lt;/script&gt; &lt;!-- will NOT be loaded because script-src â€˜self â€˜ http://www.example.comdirective is applied  --&gt;
</pre>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The resources of the application are fetched from various untrusted locations. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Implement content security policy fetch directives, in particular <em>default-src</em> directive and continue to properly sanitize and validate all
inputs of the application, indeed CSP fetch directives is only a tool to reduce the impact of cross site scripting attacks.</p>
<h2>Sensitive Code Example</h2>
<p>In a Express.js application, the code is sensitive if the <a href=""https://www.npmjs.com/package/helmet"">helmet</a> contentSecurityPolicy
middleware is disabled:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();
app.use(
    helmet({
      contentSecurityPolicy: false, // sensitive
    })
);
</pre>
<h2>Compliant Solution</h2>
<p>In a Express.js application, a standard way to implement CSP is the <a href=""https://www.npmjs.com/package/helmet"">helmet contentSecurityPolicy
middleware</a>:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();
app.use(helmet.contentSecurityPolicy()); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.w3.org/TR/CSP3/"">w3.org</a> - Content Security Policy Level 3 </li>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html"">OWASP Top 10 2017 Category
  A6</a> - Security Misconfiguration </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"">developer.mozilla.org</a> - Content Security Policy (CSP) </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5725,Disabling resource integrity features is security-sensitive,"<p>Fetching external resources, for example from a CDN, without verifying their integrity could impact the security of an application if the CDN gets
compromised and resources are replaced by malicious ones. Resources integrity feature will block resources inclusion into an application if the
pre-computed digest of the expected resource doesnâ€™t match with the digest of the retrieved resource.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The resources are fetched from external CDNs. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> implement resources integrity checks for all static resources (where ""static"" means that the resourceâ€™s content doesnâ€™t change dynamically
  based on the browser) </li>
  <li> use versioned resources instead of using ""latest"" version of the resources </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
let script = document.createElement(""script""); // Sensitive
script.src = ""https://cdnexample.com/script-latest.js"";
script.crossOrigin = ""anonymous"";
document.head.appendChild(script);
</pre>
<h2>Compliant Solution</h2>
<pre>
let script = document.createElement(""script"");
script.src = ""https://cdnexample.com/script-v1.2.3.js"";
script.integrity = ""sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC""; // Compliant
script.crossOrigin = ""anonymous"";
document.head.appendChild(script);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/353.html"">CWE-353</a> - Missing Support for Integrity Check </li>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html"">OWASP Top 10 2017 Category
  A6</a> - Security Misconfiguration </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity"">developer.mozilla.org</a> - Subresource Integrity </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5604,Using intrusive permissions is security-sensitive,"<p><a href=""https://www.w3.org/TR/permissions/#powerful-feature"">Powerful features</a> are browser features (geolocation, camera, microphone â€¦â€‹) that
can be accessed with JavaScript API and may require a permission granted by the user. These features can have a high impact on privacy and user
security thus they should only be used if they are really necessary to implement the critical parts of an application.</p>
<p>This rule highlights intrusive permissions when requested with <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query"">the
future standard (but currently experimental) web browser query API</a> and specific APIs related to the permission. It is highly recommended to
customize this rule with the permissions considered as intrusive in the context of the web application.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Some powerful features used by the application are not really necessary. </li>
  <li> Users are not clearly informed why and when powerful features are used by the application. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In order to respect user privacy it is recommended to avoid using intrusive powerful features. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>When using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API"">geolocation API</a>, Firefox for example retrieves personal
information like nearby wireless access points and IP address and sends it to the default geolocation service provider, <a
href=""https://www.google.com/privacy/lsf.html"">Google Location Services</a>:</p>
<pre>
navigator.permissions.query({name:""geolocation""}).then(function(result) {
});  // Sensitive: geolocation is a powerful feature with high privacy concerns

navigator.geolocation.getCurrentPosition(function(position) {
  console.log(""coordinates x=""+position.coords.latitude+"" and y=""+position.coords.longitude);
}); // Sensitive: geolocation is a powerful feature with high privacy concerns
</pre>
<h2>Compliant Solution</h2>
<p>If geolocation is required, always explain to the user why the application needs it and prefer requesting an approximate location when
possible:</p>
<pre>
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;
        Retailer website example
    &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    Type a city, street or zip code where you want to retrieve the closest retail locations of our products:
    &lt;form method=post&gt;
        &lt;input type=text value=""New York""&gt; &lt;!-- Compliant --&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Web Top 10 2017 Category A3</a> - Sensitive Data
  Exposure </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/250.html"">CWE-250</a> - Execution with Unnecessary Privileges </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/359.html"">CWE-359</a> - Exposure of Private Information </li>
  <li> <a href=""https://www.w3.org/TR/permissions/"">W3C</a> - Permissions </li>
  <li> <a href=""https://support.mozilla.org/en-US/kb/does-firefox-share-my-location-websites"">Mozilla</a> - Does Firefox share my location with
  websites? </li>
</ul>",MAJOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S1121,Assignments should not be made from within sub-expressions,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (val = value() &amp;&amp; check()) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
val = value();
if (val &amp;&amp; check()) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>The rule does not raise issues for the following patterns:</p>
<ul>
  <li> assignments at declaration-level: <code>let a = b = 0;</code> </li>
  <li> chained assignments: <code>a = b = c = 0;</code> </li>
  <li> relational assignments: <code>(a = 0) != b</code> </li>
  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>
  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>
  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>
  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S4634,Shorthand promises should be used,"<p>When a <code>Promise</code> needs to only ""resolve"" or ""reject"", itâ€™s more efficient and readable to use the methods specially created for such use
cases: <code>Promise.resolve(value)</code> and <code>Promise.reject(error)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let fulfilledPromise = new Promise(resolve =&gt; resolve(42));
let rejectedPromise = new Promise(function(resolve, reject) {
  reject('fail');
});
</pre>
<h2>Compliant Solution</h2>
<pre>
let fulfilledPromise = Promise.resolve(42);
let rejectedPromise = Promise.reject('fail');
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2699,Tests should include assertions,"<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when the assertion library <code>chai</code> is imported but no assertion is used in a test.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const expect = require('chai').expect;

describe(""No assertion"", function() {
    it(""doesn't test anything"", function() { // Noncompliant
        const str = """";
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const expect = require('chai').expect;

describe(""Has assertions"", function() {
    it(""tests a string"", function() {
        const str = """";
        expect(str).to.be.a('string');
    });
});
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S5842,Repeated patterns in regular expressions should not match the empty string,"<p>A regex should never include a repetitive pattern whose body would match the empty string. This is usually a sign that a part of the regex is
redundant or does not do what the author intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/(?:)*/      // same as the empty regex, the '*' accomplishes nothing
/(?:|x)*/    // same as the empty regex, the alternative has no effect
/(?:x|)*/    // same as 'x*', the empty alternative has no effect
/(?:x*|y*)*/ // same as 'x*', the first alternative would always match, y* is never tried
/(?:x?)*/    // same as 'x*'
/(?:x?)+/    // same as 'x*'
</pre>
<h2>Compliant Solution</h2>
<pre>
/x*/
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S6019,Reluctant quantifiers in regular expressions should be followed by an expression that can't match the empty string,"<p>When a reluctant (or lazy) quantifier is followed by a pattern that can match the empty string or directly by the end of the regex, it will always
match zero times for <code>*?</code> or one time for <code>+?</code>. If a reluctant quantifier is followed directly by the end anchor
(<code>$</code>), it behaves indistinguishably from a greedy quantifier while being less efficient.</p>
<p>This is likely a sign that the regex does not work as intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.split(/.*?x?/); // Noncompliant, this will behave just like ""x?""
/^.*?$/.test(str); // Noncompliant, replace with "".*""
</pre>
<h2>Compliant Solution</h2>
<pre>
str.split(/.*?x/);
/^.*$/.test(str);
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5843,Regular expressions should not be too complicated,"<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you
should consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>
<p>The complexity of a regular expression is determined as follows:</p>
<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting
level by one for its arguments:</p>
<ul>
  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>
  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>
  <li> Lookahead and lookbehind assertions </li>
</ul>
<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>
<ul>
  <li> character classes </li>
  <li> back references </li>
</ul>
<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const datePattern = /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[13-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/;
if (dateString.match(datePattern)) {
    handleDate(dateString);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const datePattern = /^\d{1,2}([-/.])\d{1,2}\1\d{1,4}$/;
if (dateString.match(datePattern)) {
    const dateParts[] = dateString.split(""[-/.]"");
    int day = parseInt(dateParts[0]);
    int month = parseInt(dateParts[1]);
    int year = parseInt(dateParts[2]);
    // Put logic to validate and process the date based on its integer parts here
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
