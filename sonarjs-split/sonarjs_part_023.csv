rules_key,rules_name,rules_mdDesc,rules_severity,rules_langName,rules_type,nCino Specific
javascript:S5868,Unicode Grapheme Clusters should be avoided inside regex character classes,"<p>When placing Unicode <a href=""https://unicode.org/glossary/#grapheme_cluster"">Grapheme Clusters</a> (characters which require to be encoded in
multiple <a href=""https://unicode.org/glossary/#code_point"">Code Points</a>) inside a character class of a regular expression, this will likely lead
to unintended behavior.</p>
<p>For instance, the grapheme cluster <code>cÌˆ</code> requires two code points: one for <code>'c'</code>, followed by one for the <em>umlaut</em>
modifier <code>'\u{0308}'</code>. If placed within a character class, such as <code>[cÌˆ]</code>, the regex will consider the character class being the
enumeration <code>[c\u{0308}]</code> instead. It will, therefore, match every <code>'c'</code> and every <em>umlaut</em> that isnâ€™t expressed as a
single codepoint, which is extremely unlikely to be the intended behavior.</p>
<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""ccÌˆdÌˆd"".replace(/[cÌˆdÌˆ]/g, ""X""); // result is ""XXXXXX"" and not expected ""cXXd""
</pre>
<h2>Compliant Solution</h2>
<pre>
""ccÌˆdÌˆd"".replace(/cÌˆ|dÌˆ/g, ""X""); // result is ""cXXd""
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S5869,Character classes in regular expressions should not contain the same character twice,"<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or
ranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this
has no effect.</p>
<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is
intended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter
mistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.
Another common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the
character class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/[0-99]/ // Noncompliant, this won't actually match strings with two digits
/[0-9.-_]/ // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)
</pre>
<h2>Compliant Solution</h2>
<pre>
/[0-9]{1,2}/
/[0-9.\-_]/
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5742,Disabling Certificate Transparency monitoring is security-sensitive,"<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency"">Certificate Transparency</a> (CT) is an open-framework to
protect against identity theft when certificates are issued. <a href=""https://en.wikipedia.org/wiki/Certificate_authority"">Certificate Authorities</a>
(CA) electronically sign certificate after verifying the identify of the certificate owner. Attackers use, among other things, social engineering
attacks to trick a CA to correctly verifying a spoofed identity/forged certificate.</p>
<p>CAs implement Certificate Transparency framework to publicly log the records of newly issued certificates, allowing the public and in particular
the identity owner to monitor these logs to verify that his identify was not usurped.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The website identity is valuable and well-known, therefore prone to theft. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Implement <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT"">Expect-CT</a> HTTP header which instructs the web browser
to check <a href=""https://www.certificate-transparency.org/known-logs"">public CT logs</a> in order to verify if the website appears inside and if it
is not, the browser will block the request and display a warning to the user.</p>
<h2>Sensitive Code Example</h2>
<p>In Express.js application the code is sensitive if the <a href=""https://www.npmjs.com/package/expect-ct"">expect-ct</a> middleware is disabled:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
    helmet({
      expectCt: false // Sensitive
    })
);
</pre>
<h2>Compliant Solution</h2>
<p>In Express.js application the <a href=""https://www.npmjs.com/package/expect-ct"">expect-ct</a> middleware is the standard way to implement
expect-ct. Usually, the deployment of this policy starts with the report only mode (<code>enforce: false</code>) and with a low <code>maxAge</code>
(the number of seconds the policy will apply) value and next if everything works well it is recommended to block future connections that violate
Expect-CT policy (<code>enforce: true</code>) and greater value for maxAge directive:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(helmet.expectCt({
  enforce: true,
  maxAge: 86400
})); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> -
  Sensitive Data Exposure </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency"">developer.mozilla.org</a> - Certificate Transparency
  </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Certificate_authority"">wikipedia.org</a> - Certificate Authority </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5863,Assertions should not be given twice the same argument,"<p>Many assertions compare two objects or properties of these objects. Passing twice the same argument is likely to be a bug due to developerâ€™s
carelessness.</p>
<p>This rule raises an issue when a Chai assertion is given twice the same argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const assert = require('chai').assert;

describe(""test the same object"", function() {
    it(""uses chai 'assert'"", function() {
        const expected = '1'
        const actual = (1).toString()
        assert.equal(actual, actual);  // Noncompliant
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const assert = require('chai').assert;

describe(""test the same object"", function() {
    it(""uses chai 'assert'"", function() {
        const expected = '1'
        const actual = (1).toString()
        assert.equal(actual, expected);
    });
});
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S1264,"A ""while"" loop should be used instead of a ""for"" loop","<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1143,"Jump statements should not occur in ""finally"" blocks","<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar
statements from the suspended <code>try</code> and <code>catch</code> blocks.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force
control flow to leave a <code>finally</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    } finally {
        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/584.html"">MITRE, CWE-584</a> - Return Inside Finally Block </li>
</ul>",CRITICAL,JavaScript,BUG,FALSE
javascript:S5860,Names of regular expressions named groups should be used,"<p>Why use named groups only to never use any of them later on in the code?</p>
<p>This rule raises issues every time named groups are:</p>
<ul>
  <li> defined but never called anywhere in the code through their name; </li>
  <li> defined but called elsewhere in the code by their number instead; </li>
  <li> referenced while not defined. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
const date = ""01/02"";

const datePattern = /(?&lt;month&gt;[0-9]{2})\/(?&lt;year&gt;[0-9]{2})/;
const dateMatched = date.match(datePattern);

if (dateMatched !== null) {
  checkValidity(dateMatched[1], dateMatched[2]); // Noncompliant - numbers instead of names of groups are used
  checkValidity(dateMatched.groups.day); // Noncompliant - there is no group called ""day""
}

// ...

const score = ""14:1"";

const scorePattern = /(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)/; // Noncompliant - named groups are never used
const scoreMatched = score.match(scorePattern);

if (scoreMatched !== null) {
  checkScore(score);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const date = ""01/02"";

const datePattern = /(?&lt;month&gt;[0-9]{2})\/(?&lt;year&gt;[0-9]{2})/;
const dateMatched = date.match(datePattern);

if (dateMatched !== null) {
  checkValidity(dateMatched.groups.month, dateMatched.groups.year);
}

// ...

const score = ""14:1"";

const scorePattern = /(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)/;
const scoreMatched = score.match(scorePattern);

if (scoreMatched !== null) {
  checkScore(scoreMatched.groups.player1);
  checkScore(scoreMatched.groups.player2);
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2598,File uploads should be restricted,"<p>These minimum restrictions should be applied when handling file uploads:</p>
<ul>
  <li> the file upload folder to restrict untrusted files to a specific folder. </li>
  <li> the file extension of the uploaded file to prevent remote code execution. </li>
</ul>
<p>Also the size of the uploaded file should be limited to prevent denial of service attacks. This requirement is covered by the rule
{rule:javascript:S5693}.</p>
<h2>Noncompliant Code Example</h2>
<p><a href=""https://www.npmjs.com/package/formidable"">formidable</a> module:</p>
<pre>
const Formidable = require('formidable');

const form = new Formidable(); // Noncompliant, this form is not safe
form.uploadDir = """"; // because upload dir is not defined (by default os temp dir: /var/tmp or /tmp)
form.keepExtensions = true; // and file extensions are kept
</pre>
<p><a href=""https://www.npmjs.com/package/multer"">multer</a> (Express.js middleware) module:</p>
<pre>
const multer = require('multer');

let diskStorage = multer.diskStorage({ // Noncompliant: no destination specified
  filename: (req, file, cb) =&gt; {
    const buf = crypto.randomBytes(20);
    cb(null, buf.toString('hex'))
  }
});

// This upload is not safe as no destination specified, /var/tmp or /tmp will be used
let diskupload = multer({
  storage: diskStorage,
});
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/formidable"">formidable</a> module:</p>
<pre>
const Formidable = require('formidable');

const form = new Formidable(); // Compliant
form.uploadDir = ""./uploads/"";
form.keepExtensions = false;
</pre>
<p><a href=""https://www.npmjs.com/package/multer"">multer</a> (Express.js middleware) module:</p>
<pre>
const multer = require('multer');

let diskStorage = multer.diskStorage({  // Compliant
  filename: (req, file, cb) =&gt; {
    const buf = crypto.randomBytes(20);
    cb(null, buf.toString('hex'))
  },
  destination: (req, file, cb) =&gt; {
    cb(null, './uploads/')
  }
});

let diskupload = multer({
  storage: diskStorage,
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/434"">CWE-434</a> - Unrestricted Upload of File with Dangerous Type </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/400.html"">CWE-400</a> - Uncontrolled Resource Consumption </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10_2010-A4-Insecure_Direct_Object_References"">OWASP Top 10 2017 Category A4</a> - Insecure Direct
  Object References </li>
  <li> <a href=""https://www.owasp.org/index.php/Unrestricted_File_Upload"">OWASP Unrestricted File Upload</a> - Unrestricted File Upload </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S2234,Parameters should be passed in the correct order,"<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,
when the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will
likely lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(divisor, dividend);
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Swapped arguments that are compared beforehand in an enclosing <code>if</code>-statement are ignored:</p>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;
  if (divisor &gt; dividend) {
    var result = divide(dividend, divisor);
    //...
  }
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5867,Regular expressions using Unicode character classes or property escapes should enable the unicode flag,"<p>JavaScript regular expressions provide Unicode character classses and Unicode property escapes for matching characters based on their Unicode
values and Unicode properties respectively. When using Unicode property escapes like <code>\p{Alpha}</code> without the <code>u</code> flag, the
regular expression will not match alphabetic characters but rather the <code>+'\p{Alpha}+'</code> string literal, which is likely a mistake.</p>
<p>This rules raises an issue when Unicode character classses and Unicode property escapes are used without the <code>u</code> flag.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/\u{1234}/
/\p{Alpha}/
</pre>
<h2>Compliant Solution</h2>
<pre>
/\u{1234}/u
/\p{Alpha}/u
</pre>",MINOR,JavaScript,BUG,FALSE
