Sonar JAVASCRIPT RULES (Used in Salesforce Lightning Profile),,,,,,
rules_key,rules_name,rules_mdDesc,rules_severity,rules_langName,rules_type,nCino Specific
javascript:S1488,Local variables should not be declared and then immediately returned or thrown,"<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function computeDurationInMilliseconds() {
  var duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1994,"""for"" loop increment clauses should modify the loops' counters","<p>It can be extremely confusing when a <code>for</code> loopâ€™s counter is incremented outside of its increment clause. In such cases, the increment
should be moved to the loopâ€™s increment clause if at all possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) { // Noncompliant
  // ...
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++, j++) {
  // ...
}
</pre>
<p>Or</p>
<pre>
for (i = 0; i &lt; 10; i++) {
  // ...
  j++;
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S1774,The ternary operator should not be used,"<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {
  var b = (a === 'A') ? 'is A' : 'is not A'; // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  var b;
  if (a === 'A') {
    b = 'is A';
  }
  else {
    b = 'is not A';
  }
  // ...
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S139,Comments should not be located at the end of lines of code,"<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a1 = b + c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
var a2 = b + c;
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3760,Arithmetic operators should only have numbers as operands,"<p>Expressions with arithmetic (<code>/, *, %, ++, --, -, -=, *=, /=, %=, +=, +</code>), unary (<code>-</code>), or comparison operators (<code>&gt;,
&lt;, &gt;=, &lt;=</code>) where one, or both, of the operands is a String, Boolean or Date value rely on implicit conversions. Both the
maintainability and reliability levels of such a piece of code are questionable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str = ""80"";
quarter = str / 4; // Noncompliant

if (str &lt; 10) { // Noncompliant
   // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
str = ""80"";
parsedStr = parseInt(str);
quarter = parsedStr / 4;

if (parsedStr &lt; 10) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Expressions using the binary <code>+</code> operator with at least one <code>String</code> operand are ignored because the <code>+</code>
  operator will perform a concatenation in that case. </li>
  <li> Comparisons where both operands are strings are ignored because a lexicographical comparison is performed in that case. </li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1186,Functions should not be empty,"<p>There are several reasons for a function not to have a function body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
}

var foo = () =&gt; {};
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    // This is intentional
}

var foo = () =&gt; {
    do_something();
};
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S2432,Setters should not return values,"<p>Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from
a setter will be ignored, and explicitly returning a value is an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var person = {
  // ...
  set name(name) {
    this.name = name;
    return 42;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var person = {
  // ...
  set name(name) {
    this.name = name;
  }
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3524,Braces and parentheses should be used consistently with arrow functions,"<p>Shared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does
not conform to the configured requirements.</p>
<h2>Noncompliant Code Example</h2>
<p>With the configured defaults forbidding parentheses</p>
<pre>
var foo = (a) =&gt; { /* ... */ };  // Noncompliant; remove parens from arg
var bar = (a, b) =&gt; { return 0; };  // Noncompliant; remove curly braces from body
</pre>
<h2>Compliant Solution</h2>
<pre>
var foo = a =&gt; { /* ... */ };
var bar = (a, b) =&gt; 0;
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3403,Strict equality operators should not be used with dissimilar types,"<p>Comparing dissimilar types using the strict equality operators <code>===</code> and <code>!==</code> will always return the same value,
respectively <code>false</code> and <code>true</code>, because no type conversion is done before the comparison. Thus, such comparisons can only be
bugs.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = 8;
var b = ""8"";

if (a === b) {  // Noncompliant; always false
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var a = 8;
var b = ""8"";

if (a == b) {
  // ...
}
</pre>
<p>or</p>
<pre>
var a = 8;
var b = ""8"";

if (a === Number(b)) {
  // ...
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S107,Functions should not have too many parameters,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething(param1, param2, param3, param4, param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(param1, param2, param3, param4) {
...
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1438,Statements should end with semicolons,"<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to
unexpected results because a semicolon is implicitly inserted at the end of each line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun() {
  return  // Noncompliant. ';' implicitly inserted at end of line
       5   // Noncompliant. ';' implicitly inserted at end of line
}
print(fun());  // prints ""undefined"", not ""5""
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun() {
  return 5;
}
print(fun());
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1441,Quotes for string literals should be used consistently,"<p>This rule checks that all string literals use the same kind of quotes.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the parameter default (forcing single quotes):</p>
<pre>
var firstParameter = ""something""; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var firstParameter = 'something';
</pre>
<h2>Exceptions</h2>
<p>Strings that contain quotes are ignored.</p>
<pre>
let heSaid = ""Then he said 'What?'.""  // ignored
let sheSaid = '""Whatever!"" she replied.'  // ignored
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3812,"Results of ""in"" and ""instanceof"" should be negated rather than operands","<p>Mixing up the order of operations will almost always yield unexpected results.</p>
<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>!key in dict</code> and <code>!(key
in dict)</code>. The first looks for a boolean value (<code>!key</code>) in <code>dict</code>, and the other looks for a string and inverts the
result. <code>!obj instanceof SomeClass</code> has the same problem.</p>
<p>This rule raises an issue when the left operand of an <code>in</code> or <code>instanceof</code> operator is negated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!""prop"" in myObj) {  // Noncompliant;  ""in"" operator is checking property ""false""
  doTheThing();  // this block will be never executed
}

if (!foo instanceof MyClass) {  // Noncompliant; ""!foo"" returns a boolean, which is not an instance of anything
  doTheOtherThing();  // this block is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!(""prop"" in myObj)) {
  doTheThing();
}

if (!(foo instanceof MyClass)) {
  doTheOtherThing();
}
</pre>",CRITICAL,JavaScript,BUG,FALSE
javascript:S1539,"""strict"" mode should be used with caution","<p>Even though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not
support it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not
support it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function strict() {
  'use strict';
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S3686,"Functions should not be called both with and without ""new""","<p>Constructor functions, which create new object instances, must only be called with <code>new</code>. Non-constructor functions must not. Mixing
these two usages could lead to unexpected results at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getNum() {
  return 5;
}

function Num(numeric, alphabetic) {
  this.numeric = numeric;
  this.alphabetic = alphabetic;
}

var myFirstNum = getNum();
var my2ndNum = new getNum();  // Noncompliant. An empty object is returned, NOT 5

var myNumObj1 = new Num();
var myNumObj2 = Num();  // Noncompliant. undefined is returned, NOT an object
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S113,Files should contain an empty newline at the end,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1541,Cyclomatic Complexity of functions should not be too high,"<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S100,Function and method names should comply with a naming convention,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
function DoSomething(){...}  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(){...}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S105,Tabulation characters should not be used,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3786,Template literal placeholder syntax should not be used in regular strings,"<p>Template strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is
done by using expressions like <code>${variable} </code> in a string between two back-ticks (<code>`</code>). However, when used in a regular string
literal (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was
intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log(""Today is ${date}""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
console.log(`Today is ${date}`);
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S1126,"Return of boolean expressions should not be wrapped into an ""if-then-else"" statement","<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<p>Note that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper
conversion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>
<p>or</p>
<pre>
return !!expression;
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S2208,Wildcard imports should not be used,"<p>On the principle that clearer code is better code, you should explicitly <code>import</code> the things you want to use in a module. Using
<code>import *</code> imports everything in the module, and runs the risk of confusing maintainers. Similarly, <code>export * from ""module"";</code>
imports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import * as Imported from ""aModule"";  // Noncompliant
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S1066,"Collapsible ""if"" statements should be merged","<p>Merging collapsible <code>if</code> statements increases the codeâ€™s readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != undefined) {
  if (y === 2) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x != undefined &amp;&amp; y === 2) {
  // ...
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3531,"Generators should ""yield"" something","<p>A generator without a <code>yield</code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code
will always be empty.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function* myGen(a, b) {  // Noncompliant
  let answer = 0;
  answer += a * b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function* myGen(a, b) {
  let answer = 0;
  while (answer &lt; 42) {
    answer += a * b;
    yield answer;
  }
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3498,Object literal shorthand syntax should be used,"<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,
object-shorthand is also preferred for the definition of functions in object literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = 1;

let myObj = {
  a : a,  // Noncompliant
  fun: function () {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = 1;

let myObj = {
  a,
  fun () {
    //...
  }
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3533,"""import"" should be used to include external code","<p>Before ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,
ES2015, provides language-standard mechanisms for module management, <code>import</code> and <code>export</code>, and older usages should be
converted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// circle.js
exports.area = function (r) {
  return PI * r * r;
};

// foo.js
define([""./cart"", ""./horse""], function(cart, horse) {  // Noncompliant
  // ...
});

// bar.js
const circle = require('./circle.js');  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
// circle.js
let area = function (r) {
  return PI * r * r;
}
export default area;

// foo.js
import cart from ""./cart.js"";
import horse from ""./horse.js"";

// bar.js
import circle from ""./circle.js""
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S2260,JavaScript parser failure,"<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the
number of files that do not parse but also to easily find out why they do not parse.</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1442,"""alert(...)"" should not be used","<p><code>alert(...)</code> as well as <code>confirm(...)</code> and <code>prompt(...)</code> can be useful for debugging during development, but in
production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(unexpectedCondition) {
  alert(""Unexpected Condition"");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S4507} instead.</p>",MINOR,JavaScript,VULNERABILITY,FALSE
javascript:S2688,"""NaN"" should not be used in comparisons","<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,
but probably not the ones you want.</p>
<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps
counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = NaN;

if (a === NaN) {  // Noncompliant; always false
  console.log(""a is not a number"");  // this is dead code
}
if (a !== NaN) { // Noncompliant; always true
  console.log(""a is not NaN""); // this statement is not necessarily true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (Number.isNaN(a)) {
  console.log(""a is not a number"");
}
if (!Number.isNaN(a)) {
  console.log(""a is not NaN"");
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S1535,"""for...in"" loops should filter properties before acting on them","<p>The <code>for...in</code> statement allows you to loop through the names of all of the properties of an object. The list of properties includes all
those properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data
properties. Programs that donâ€™t take this into account can fail.</p>
<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are
acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (name in object) {
    doSomething(name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (name in object) {
  if (object.hasOwnProperty(name)) {
    doSomething(name);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Loops used to clone objects are ignored.</p>
<pre>
for (prop in obj) {
  a[prop] = obj[prop];  // Compliant by exception
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3785,"""in"" should not be used with primitive types","<p>The <code>in</code> operator tests whether the specified property is in the specified object.</p>
<p>If the right operand is a of primitive type (i.e., not an object) the <code>in</code> operator raises a <code>TypeError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = ""Foo"";
""length"" in x; // Noncompliant: TypeError
0 in x;        // Noncompliant: TypeError
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = new String(""Foo"");
""length"" in x;    // true
0 in x;           // true
""foobar"" in x;    // false
</pre>",CRITICAL,JavaScript,BUG,FALSE
javascript:S3854,"""super()"" should be invoked appropriately","<p>There are situations where <code>super()</code> must be invoked and situations where <code>super()</code> cannot be invoked.</p>
<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()</code>; a constructor in a derived class must invoke
<code>super()</code>.</p>
<p>Furthermore:</p>
<ul>
  <li> <code>super()</code> must be invoked before the <code>this</code> and <code>super</code> keywords can be used. </li>
  <li> <code>super()</code> must be invoked with the same number of arguments as the base class' constructor. </li>
  <li> <code>super()</code> can only be invoked in a constructor - not in any other method. </li>
  <li> <code>super()</code> cannot be invoked multiple times in the same constructor. </li>
</ul>
<h3>Known Limitations</h3>
<ul>
  <li> False negatives: some issues are not raised if the base class is not defined in the same file as the current class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class Dog extends Animal {
  constructor(name) {
    super();
    this.name = name;
    super();         // Noncompliant
    super.doSomething();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Dog extends Animal {
  constructor(name) {
    super();
    this.name = name;
    super.doSomething();
  }
}
</pre>",CRITICAL,JavaScript,BUG,FALSE
javascript:S1219,"""switch"" statements should not contain non-case labels","<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // instead of ""case WEDNESDAY""
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2, the code is correct and behaves as expected but is hardly readable</p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(i = 0 ; i &lt; X ; i++) {
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<p>Case 1</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2</p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled ""for"" statement in a dedicated method
    break;

    /* ... */
}
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S1321,"""with"" statements should not be used","<p>The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, thatâ€™s not the worst that can be said against
<code>with</code>.</p>
<p>Using <code>with</code> allows a short-hand access to an objectâ€™s properties - assuming theyâ€™re already set. But use <code>with</code> to access
some property not already set in the object, and suddenly youâ€™re catapulted out of the object scope and into the global scope, creating or overwriting
variables there. Since the effects of <code>with</code> are entirely dependent on the object passed to it, <code>with</code> can be dangerously
unpredictable, and should never be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 'a';

var foo = {
  y: 1
}

with (foo) {  // Noncompliant
  y = 4;  // updates foo.y
  x = 3;  // does NOT add a foo.x property; updates x var in outer scope
}
print(foo.x + "" "" + x); // shows: undefined 3
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 'a';

var foo = {
  y: 1
}

foo.y = 4;
foo.x = 3;

print(foo.x + "" "" + x); // shows: 3 a
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S3782,Arguments to built-in functions should match documented types,"<p>The types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform
to the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return <code>false</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
const isTooSmall = Math.abs(x &lt; 0.0042);
</pre>
<h2>Compliant Solution</h2>
<pre>
const isTooSmall = Math.abs(x) &lt; 0.0042;
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3923,All branches in a conditional structure should not have exactly the same implementation,"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldnâ€™t be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
}
else {
  doOneMoreThing();
}

let a = (b == 0) ? getValue() : getValue();   // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S131,"""switch"" statements should have ""default"" clauses","<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
</ul>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S1125,Boolean literals should not be used in comparisons,"<p>Boolean literals should be avoided in comparison expressions <code>==</code> and <code>!=</code> to improve code readability.</p>
<p>This rule also reports on redundant boolean operations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let someValue = ""0"";
// ...

if (someValue == true) { /* ... */ }
if (someBooleanValue != true) { /* ... */ }
doSomething(!false);
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someValue &amp;&amp; someValue != ""0"") { /* ... */ }
if (!someBooleanValue) { /* ... */ }
doSomething(true);
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S4507,Delivering code in production with debug features activated is security-sensitive,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An applicationâ€™s debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to
detailed information on both the system running the application and users.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers or distributed to end users. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Do not enable debug features on production servers or applications distributed to end users.</p>
<h2>Sensitive Code Example</h2>
<p><a href=""https://www.npmjs.com/package/errorhandler"">errorhandler Express.js middleware</a> should not be used in production:</p>
<pre>
const express = require('express');
const errorhandler = require('errorhandler');

let app = express();
app.use(errorhandler()); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/errorhandler"">errorhandler Express.js middleware</a> used only in development mode:</p>
<pre>
const express = require('express');
const errorhandler = require('errorhandler');

let app = express();

if (process.env.NODE_ENV === 'development') {  // Compliant
  app.use(errorhandler());  // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S1528,Array constructors should not be used,"<p>Array literals should always be preferred to Array constructors.</p>
<p>Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be
equal to the number of arguments. However, using a single argument will have one of three consequences:</p>
<ul>
  <li> If the argument is a number and it is a natural number the length will be equal to the value of the argument. </li>
</ul>
<pre>
let arr = new Array(3); // [empty Ã— 3]
</pre>
<ul>
  <li> If the argument is a number, but not a natural number an exception will be thrown. </li>
</ul>
<pre>
let arr = new Array(3.14);  // RangeError: Invalid array length
</pre>
<ul>
  <li> Otherwise the array will have one element with the argument as its value. </li>
</ul>
<pre>
let arr = new Array(""3"");  // [""3""]
</pre>
<p>Note that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they wonâ€™t
contain anything, so no callbacks will be applied to the array elements.</p>
<p>For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid
these kinds of weird cases, always use the more readable array literal initialization format.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let myArray = new Array(x1, x2, x3);   // Noncompliant. Results in 3-element array.
let emptyArray = new Array();          // Noncompliant. Results in 0-element array.

let unstableArray = new Array(n);      // Noncompliant. Variable in results.

let arr = new Array(3); // Noncompliant; empty array of length 3
arr.foreach((x) =&gt; alert(""Hello "" + x)); // callback is not executed because there's nothing in arr
let anotherArr = arr.map(() =&gt; 42); // anotherArr is also empty because callback didn't execute
</pre>
<h2>Compliant Solution</h2>
<pre>
let myArray = [x1, x2, x3];
let emptyArray = [];

// if ""n"" is the only array element
let unstableArray = [n];
// or,  if ""n"" is the array length (since ES 2015)
let unstableArray = Array.from({length: n});

let arr = [""Elena"", ""Mike"", ""Sarah""];
arr.foreach((x) =&gt; alert(""Hello "" + x));
let anotherArr = arr.map(() =&gt; 42);  // anotherArr now holds 42 in each element
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3504,"Variables should be declared with ""let"" or ""const""","<p>ECMAScript 2015 introduced the <code>let</code> and <code>const</code> keywords for block-scope variable declaration. Using <code>const</code>
creates a read-only (constant) variable.</p>
<p>The distinction between the variable types created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code>
will help alleviate many of the variable scope issues which have caused confusion in the past.</p>
<p>Because these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some
refactoring may be required by the switch from <code>var</code> to <code>let</code>, and you should be aware that they raise <code>SyntaxError</code>s
in pre-ECMAScript 2015 environments.</p>
<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var color = ""blue"";
var size = 4;
</pre>
<h2>Compliant Solution</h2>
<pre>
const color = ""blue"";
let size = 4;
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S3796,Callbacks of array methods should have return statements,"<p>Arrays in JavaScript have several methods for filtering, mapping, or folding that require a callback. Not having a return statement in such a
callback function is most likely a mistake, because processing of the array uses the return value of the callback. If there is no return, callback
will implicitly return <code>undefined</code>, which will likely fail.</p>
<p>This rule applies for the following methods of an array:</p>
<ul>
  <li> <code>Array.from</code> </li>
  <li> <code>Array.prototype.every</code> </li>
  <li> <code>Array.prototype.filter</code> </li>
  <li> <code>Array.prototype.find</code> </li>
  <li> <code>Array.prototype.findIndex</code> </li>
  <li> <code>Array.prototype.map</code> </li>
  <li> <code>Array.prototype.reduce</code> </li>
  <li> <code>Array.prototype.reduceRight</code> </li>
  <li> <code>Array.prototype.some</code> </li>
  <li> <code>Array.prototype.sort</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
let arr = [""a"", ""b"", ""c""];
let merged = arr.reduce(function(a, b) {
  a.concat(b);
}); // Noncompliant: No return statement, will result in TypeError
</pre>
<h2>Compliant Solution</h2>
<pre>
let arr = [""a"", ""b"", ""c""];
let merged = arr.reduce(function(a, b) {
  return a.concat(b);
}); // merged === ""abc""
</pre>",BLOCKER,JavaScript,BUG,FALSE
javascript:S3799,Destructuring patterns should not be empty,"<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible
to create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the
intent was to use a default value instead.</p>
<p>This rule raises an issue when empty destructuring pattern is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var {a: {}, b} = myObj; // Noncompliant
function foo({first: [], second}) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var {a = {}, b} = myObj;
function foo({first = [], second}) {
  // ...
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3758,Values not convertible to numbers should not be used in numeric comparisons,"<p>In a Zen-like manner, <code>NaN</code> isnâ€™t equal to anything, even itself. So comparisons (<code>&gt;, &lt;, &gt;=, &lt;=</code>) where one
operand is <code>NaN</code> or evaluates to <code>NaN</code> always return <code>false</code>. Specifically, <code>undefined</code> and objects that
cannot be converted to numbers evaluate to <code>NaN</code> when used in numerical comparisons.</p>
<p>This rule raises an issue when there is at least one path through the code where one of the operands to a comparison is <code>NaN</code>,
<code>undefined</code> or an <code>Object</code> which cannot be converted to a number.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x;  // x is currently ""undefined""
if (someCondition()) {
  x = 42;
}

if (42 &gt; x) {  // Noncompliant; ""x"" might still be ""undefined""
  doSomething();
}

var obj = {prop: 42};
if (obj &gt; 24) { // Noncompliant
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var x;
if (someCondition()) {
  x = 42;
} else {
  x = foo();
}

if (42 &gt; x) {
  doSomething();
}

var obj = {prop: 42};
if (obj.prop &gt; 24) {
  doSomething();
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2703,Variables should be declared explicitly,"<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the
<em>accidental</em> creation of global variables, which is what happens when you declare a variable inside a function or the <code>for</code> clause
of a for-loop without using the <code>let</code>, <code>const</code> or <code>var</code> keywords.</p>
<p><code>let</code> and <code>const</code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function f(){
  i = 1;         // Noncompliant; i is global

  for (j = 0; j &lt; array.length; j++) {  // Noncompliant; j is global now too
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function f(){
  var i = 1;

  for (let j = 0; j &lt; array.length; j++) {
    // ...
  }
}
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S1526,"Variables declared with ""var"" should be declared before they are used","<p>Variables declared with <code>var</code> have the special property that regardless of where theyâ€™re declared in a function they ""float"" to the top
of the function and are available for use even before theyâ€™re declared. That makes scoping confusing, especially for new coders.</p>
<p>To keep confusion to a minimum, <code>var</code> declarations should happen before they are used for the first time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 1;

function fun(){
  alert(x); // Noncompliant as x is declared later in the same scope
  if(something) {
    var x = 42; // Declaration in function scope (not block scope!) shadows global variable
  }
}

fun(); // Unexpectedly alerts ""undefined"" instead of ""1""
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 1;

function fun() {
  print(x);
  if (something) {
    x = 42;
  }
}

fun(); // Print ""1""
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S2814,Variables and functions should not be redeclared,"<p>This rule checks that a declaration doesnâ€™t use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as
either a variable or a function, but doing so is likely to confuse maintainers. Further itâ€™s possible that such reassignments are made in error, with
the developer not realizing that the value of the variable is overwritten by the new assignment.</p>
<p>This rule also applies to function parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = 'foo';
function a() {}   // Noncompliant
console.log(a);   // prints ""foo""

function myFunc(arg) {
  var arg = ""event""; // Noncompliant, argument value is lost
}

fun(); // prints ""bar""

function fun() {
  console.log(""foo"");
}

fun(); // prints ""bar""

function fun() {  // Noncompliant
  console.log(""bar"");
}

fun(); // prints ""bar""
</pre>
<h2>Compliant Solution</h2>
<pre>
var a = 'foo';
function otherName() {}
console.log(a);

function myFunc(arg) {
  var newName = ""event"";
}

fun(); // prints ""foo""

function fun() {
  print(""foo"");
}

fun(); // prints ""foo""

function printBar() {
  print(""bar"");
}

printBar(); // prints ""bar""
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S4790,Using weak hashing algorithms is security-sensitive,"<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,
<code>HMAC-MD5</code>, <code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>,
<code>HMACRIPEMD160</code> and <code>SHA-1</code> are no longer considered secure, because it is possible to have <code>collisions</code> (little
computational effort is enough to find two or more different inputs that produce the same hash).</p>
<h2>Ask Yourself Whether</h2>
<p>The hashed value is used in a security context like:</p>
<ul>
  <li> User-password storage. </li>
  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc â€¦â€‹). </li>
  <li> To compute some message integrity. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> are recommended, and for password hashing, itâ€™s even
better to use algorithms that do not compute too ""quickly"", like <code>bcrypt</code>, <code>scrypt</code>, <code>argon2</code> or <code>pbkdf2</code>
because it slows down <code>brute force attacks</code>.</p>
<h2>Sensitive Code Example</h2>
<pre>
const crypto = require(""crypto"");

const hash = crypto.createHash('sha1'); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<pre>
const crypto = require(""crypto"");

const hash = crypto.createHash('sha512'); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements"">Mobile AppSec
  Verification Standard</a> - Cryptography Requirements </li>
  <li> <a href=""https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography"">OWASP Mobile Top 10 2016 Category M5</a> -
  Insufficient Cryptography </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S4818,Using Sockets is security-sensitive,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
const net = require('net');

var socket = new net.Socket(); // Sensitive
socket.connect(80, 'google.com');

// net.createConnection creates a new net.Socket, initiates connection with socket.connect(), then returns the net.Socket that starts the connection
net.createConnection({ port: port }, () =&gt; {}); // Sensitive

// net.connect is an alias to net.createConnection
net.connect({ port: port }, () =&gt; {}); // Sensitive
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S2255,Writing cookies is security-sensitive,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11639"">CVE-2018-11639</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read cookies. Any sensitive information they may contain will be exposed.</p>
<p>This rule flags code that writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p>Using cookies only for session IDs doesnâ€™t make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<p>As a side note, every information read from a cookie should be <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitized</a>.</p>
<h2>Sensitive Code Example</h2>
<pre>
// === Built-in NodeJS modules ===
const http = require('http');
const https = require('https');

http.createServer(function(req, res) {
  res.setHeader('Set-Cookie', ['type=ninja', 'lang=js']); // Sensitive
});
https.createServer(function(req, res) {
  res.setHeader('Set-Cookie', ['type=ninja', 'lang=js']); // Sensitive
});
</pre>
<pre>
// === ExpressJS ===
const express = require('express');
const app = express();
app.use(function(req, res, next) {
  res.cookie('name', 'John'); // Sensitive
});
</pre>
<pre>
// === In browser ===
// Set cookie
document.cookie = ""name=John""; // Sensitive
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S1871,Two branches in a conditional structure should not have exactly the same implementation,"<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if (a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule {rule:javascript:S3923} raises a bug.</p>
<pre>
if (a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3984,Errors should not be created without being thrown,"<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0) {
  new Error(""x must be nonnegative"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0) {
  throw new Error(""x must be nonnegative"");
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3358,Ternary operators should not be nested,"<p>Just because you <em>can</em> do something, doesnâ€™t mean you should, and thatâ€™s the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getReadableStatus(job) {
  return job.isRunning() ? ""Running"" : job.hasErrors() ? ""Failed"" : ""Succeeded "";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getReadableStatus(job) {
  if (job.isRunning()) {
    return ""Running"";
  }
  return job.hasErrors() ? ""Failed"" : ""Succeeded"";
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S128,"Switch cases should end with an unconditional ""break"" statement","<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                               // Ends with comment when fall-through is intentional
    console.log(""this case falls through"")
    // fall through
  case 4:                                // Use of throw statement
    throw new IllegalStateException();
  case 5:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/484.html"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
</ul>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S888,"Equality operators should not be used in ""for"" loop termination conditions","<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (var i = 0; arr[i] != null; i++) {
  // ...
}

for (var i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/835"">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
</ul>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S881,Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression,"<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2990,"The global ""this"" object should not be used","<p>When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object, which is the same thing as the
<code>window</code> object in a standard web page. Such uses could be confusing to maintainers. Instead, simply drop the <code>this</code>, or replace
it with <code>window</code>; it will have the same effect and be more readable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
this.foo = 1;   // Noncompliant
console.log(this.foo); // Noncompliant

function MyObj() {
  this.foo = 1; // Compliant
}

MyObj.func1 = function() {
  if (this.foo == 1) { // Compliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
foo = 1;
console.log(foo);

function MyObj() {
  this.foo = 1;
}

MyObj.func1 = function() {
  if (this.foo == 1) {
    // ...
  }
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S103,Lines should not be too long,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1172,Unused function parameters should be removed,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a, b) { // ""a"" is unused
  return compute(b);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(b) {
  return compute(b);
}
</pre>
<h2>Exceptions</h2>
<p>When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.
For instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:</p>
<pre>
$([""first"", ""last""]).each(function (i, value) {
  computeSomethingWithValue(value);
});
</pre>
<p>So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function
signature. Unused arguments which are followed by an argument that <em>is</em> used will be ignored.</p>
<p>Examples :</p>
<pre>
var myFirsCallBackFunction = function (p1, p2, p3, p4) {  // p2 is ignored, but p4 is reported
                                              return p1 + p3; }

var mySecondCallBackFunction = function (p1, p2, p3, p4) {  // p1, p2 and p3 are ignored
                                              return p4; }

var myThirdCallBackFunction = function (p1, p2, p3, p4) {  // p1 is ignored but p3 and p4 are reported
                                              return p2; }
</pre>
<p>Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused.</p>
<pre>
function doSomething(a, b, c) {
  compute(arguments);
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5122,Having a permissive Cross-Origin Resource Sharing policy is security-sensitive,"<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>
</ul>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for
security-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)
from its own. The requested target can append additional HTTP headers in response, called <a
href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy
/ relax the same origin policy.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> You donâ€™t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>
  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>
  <li> Your access control policy is dynamically defined by a user-controlled input like <a
  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>
  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or
  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>
</ul>
<h2>Sensitive Code Example</h2>
<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>
<pre>
const http = require('http');
const srv = http.createServer((req, res) =&gt; {
  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive
  res.end('ok');
});
srv.listen(3000);
</pre>
<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>
<pre>
const cors = require('cors');

let app1 = express();
app1.use(cors()); // Sensitive: by default origin is set to *

let corsOptions = {
  origin: '*' // Sensitive
};

let app2 = express();
app2.use(cors(corsOptions));
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>
<pre>
const http = require('http');
const srv = http.createServer((req, res) =&gt; {
  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant
  res.end('ok');
});
srv.listen(3000);
</pre>
<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>
<pre>
const cors = require('cors');

let corsOptions = {
  origin: 'trustedwebsite.com' // Compliant
};

let app = express();
app.use(cors(corsOptions));
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing"">OWASP HTML5 Security Cheat Sheet</a> - Cross
  Origin Resource Sharing </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/346.html"">MITRE, CWE-346</a> - Origin Validation Error </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/942.html"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S4275,Getters and setters should access the expected fields,"<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to
<code>private</code> fields. However in classes with multiple fields it is not unusual that copy and paste is used to quickly create the needed
getters and setters, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private _x: number = 0;
  private y: number = 0;

  public get x() {  // Noncompliant: field 'x' is not used in the return value
    return this.y;
  }

  public setX(val: number) { // Noncompliant: field 'x' is not updated
    this.y = val;
  }

  public getY() { // Noncompliant: field 'y' is not used in the return value
    return this.x;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private _x: number = 0;
  private y: number = 0;

  public get x() {
    return this._x;
  }

  public setX(val: number) {
    this.x = val;
  }

  public getY() {
    return this.y;
  }
}
</pre>",CRITICAL,JavaScript,BUG,FALSE
javascript:S3626,Jump statements should not be redundant,"<p>Jump statements, such as <code>return</code>, <code>break</code> and <code>continue</code> let you change the default flow of program execution,
but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function redundantJump(x) {
  if (x == 1) {
    console.log(""x == 1"");
    return; // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function redundantJump(x) {
  if (x == 1) {
    console.log(""x == 1"");
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>break</code> and <code>return</code> inside <code>switch</code> statement are ignored, because they are often used for consistency.
<code>continue</code> with label is also ignored, because label is usually used for clarity. Also a jump statement being a single statement in a block
is ignored.</p>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S4140,Sparse arrays should not be declared,"<p>An array declared with missing (""sparse"") elements is likely to be an error: an extra comma was inserted or perhaps the developer meant to insert
the missing value and forgot.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = [1, , 3, 6, 9];  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = [1, 3, 6, 9];
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3972,Conditionals should start on new lines,"<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as
maintainers fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S2681,Multiline blocks should be enclosed in curly braces,"<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs.</p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<p>Note that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which
looks fine in your editor but is confusing when you change the size of tabs.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if (condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

if (condition); secondAction();  // Noncompliant; secondAction executed unconditionally

let str = undefined;
for (let i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

let str = undefined;
for (let i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/483.html"">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3512,Template strings should be used instead of concatenation,"<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are
preferred in environments that support ECMAScript 2015.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function sayHello(name) {
  console.log(""hello "" + name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function sayHello(name) {
  console.log(`hello ${name}`);
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1523,Dynamically executing code is security-sensitive,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
</ul>
<p>Some APIs enable the execution of dynamic code by providing it as strings at runtime. These APIs might be useful in some very specific
meta-programming use-cases. However most of the time their use is frowned upon as they also increase the risk of <a
href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a>. Such attacks can either run on the server or in the client (exemple: XSS
attack) and have a huge impact on an applicationâ€™s security.</p>
<p>This rule raises issues on calls to <code>eval</code> and <code>Function</code> constructor. This rule does not detect code injections. It only
highlights the use of APIs which should be used sparingly and very carefully. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from an untrusted source and hasnâ€™t been sanitized. </li>
  <li> you really need to run code dynamically. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>Avoid using dynamic code APIs whenever possible. Hard-coded code is always safer.</p>
<h2>Sensitive Code Example</h2>
<pre>
let value = eval('obj.' + propName); // Sensitive
let func = Function('obj' + propName); // Sensitive
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when the argument of the <code>eval</code> or <code>Function</code> is a literal string as it is reasonably
safe.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
</ul>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S1525,Debugger statements should not be used,"<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint
in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to
attacks in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write(""loop index is "" + i);
  // Wait for user to resume.
  debugger;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write(""loop index is "" + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S4507} instead.</p>",MINOR,JavaScript,VULNERABILITY,FALSE
javascript:S1527,"""future reserved words"" should not be used as identifiers","<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier
adoption of those potential future versions:</p>
<ul>
  <li> <code>await</code> </li>
  <li> <code>class</code> </li>
  <li> <code>const</code> </li>
  <li> <code>enum</code> </li>
  <li> <code>export</code> </li>
  <li> <code>extends</code> </li>
  <li> <code>implements</code> </li>
  <li> <code>import</code> </li>
  <li> <code>interface</code> </li>
  <li> <code>let</code> </li>
  <li> <code>package</code> </li>
  <li> <code>private</code> </li>
  <li> <code>protected</code> </li>
  <li> <code>public</code> </li>
  <li> <code>static</code> </li>
  <li> <code>super</code> </li>
  <li> <code>yield</code> </li>
</ul>
<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var package = document.getElementsByName(""foo""); // Noncompliant
var someData = { package: true };                 // Compliant, as it is not used as an identifier here
</pre>
<h2>Compliant Solution</h2>
<pre>
var elements = document.getElementsByName(""foo""); // Compliant
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S2757,"Non-existent operators '=+', '=-' and '=!' should not be used","<p>The use of operators pairs (<code>=+</code>, <code>=-</code> or <code>=!</code>) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code> and <code>=!</code> are used without any space between the two operators and when
there is at least one whitespace after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let target =-5;
let num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
let target = -5;
let num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S101,Class names should comply with a naming convention,"<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names (and interfaces for TypeScript)
match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3801,"Functions should use ""return"" consistently","<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can
return different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<p>In particular a function, in JavaScript, will return <code>undefined</code> in any of the following cases:</p>
<ul>
  <li> It exits without a <code>return</code> statement. </li>
  <li> It executes a <code>return</code> with no value. </li>
</ul>
<p>This rule verifies that return values are either always or never specified for each path through a function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) { // Noncompliant, function exits without ""return""
  if (a == 1) {
    return true;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  if (a == 1) {
    return true;
  }
  return false;
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1192,String literals should not be duplicated,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching <code>/^\w*$/</code>.
String literals inside import/export statements and JSX attributes are also ignored. The same goes for statement-like string literals, e.g. <code>'use
strict';</code>.</p>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S1515,Functions should not be defined inside loops,"<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer
scopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var funs = [];
for (var i = 0; i &lt; 13; i++) {
  funs[i] = function() { // Non-Compliant
    return i;
  };
}
console.log(funs[0]()); // 13 instead of 0
console.log(funs[1]()); // 13 instead of 1
console.log(funs[2]()); // 13 instead of 2
console.log(funs[3]()); // 13 instead of 3
...
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1751,Loops with at most one iteration should be refactored,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (let i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  console.log(""i is "" + i);
  break;
}
...
for (let i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if (i == x) {
    break;
  } else {
    console.log(""i is "" + i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (let i = 0; i &lt; 10; i++) {
  console.log(""i is "" + i);
}
...
for (let i = 0; i &lt; 10; i++) {
  if (i == x) {
    break;
  } else {
    console.log(""i is "" + i);
  }
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S117,"Variable, property and parameter names should comply with a naming convention","<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule checks that all variable,
property and parameter names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[_$A-Za-z][$A-Za-z0-9]*$|^[_$A-Z][_$A-Z0-9]+$</code>:</p>
<pre>
const foo_bar = 1;
const baz_ = 2;
</pre>
<h2>Compliant Solution</h2>
<pre>
const fooBar = 1;
const _baz = 2;
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S2189,Loops should not be infinite,"<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is
by meeting the loopâ€™s end condition or via a <code>break</code>, every loop should have an end condition.</p>
<h3>Known Limitations</h3>
<ul>
  <li> False positives: when <code>yield</code> is used - <a href=""https://github.com/SonarSource/SonarJS/issues/674"">Issue #674</a>. </li>
  <li> False positives: when an exception is raised by a function invoked within the loop. </li>
  <li> False negatives: when a loop condition is based on an element of an array or object. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for (;;) {  // Noncompliant; end condition omitted
  // ...
}

var j = 0;
while (true) { // Noncompliant; constant end condition
  j++;
}

var k;
var b = true;
while (b) { // Noncompliant; constant end condition
  k++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
while (true) { // break will potentially allow leaving the loop
  if (someCondition) {
    break;
  }
}

var k;
var b = true;
while (b) {
  k++;
  b = k &lt; 10;
}

outer:
while(true) {
  while(true) {
    break outer;
  }
}
</pre>",BLOCKER,JavaScript,BUG,FALSE
javascript:S1301,"""switch"" statements should have at least 3 ""case"" clauses","<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S108,Nested blocks of code should not be left empty,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S4829,Reading the Standard Input is security-sensitive,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Sensitive Code Example</h2>
<pre>
// The process object is a global that provides information about, and control over, the current Node.js process
// All uses of process.stdin are security-sensitive and should be reviewed

process.stdin.on('readable', () =&gt; {
	const chunk = process.stdin.read(); // Sensitive
	if (chunk !== null) {
		dosomething(chunk);
	}
});

const readline = require('readline');
readline.createInterface({
	input: process.stdin // Sensitive
}).on('line', (input) =&gt; {
	dosomething(input);
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S106,Standard outputs should not be used directly to log anything,"<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you
run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log(password_entered); // Noncompliant
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S104,Files should not have too many lines of code,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S909,"""continue"" should not be used","<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured
control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i == 5) {
      continue;  /* Noncompliant */
    }
    alert(""i = "" + i);
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i != 5) {  /* Compliant */
      alert(""i = "" + i);
    }
  }
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S905,Non-empty statements should change control flow or have at least one side-effect,"<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does
not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a == 1; // Noncompliant; was assignment intended?
var msg = ""Hello, ""
  ""World!""; // Noncompliant; have we forgotten '+' operator on previous line?
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/482"">MITRE, CWE-482</a> - Comparing instead of Assigning </li>
</ul>",MAJOR,JavaScript,BUG,FALSE
javascript:S1534,Property names should not be duplicated within a class or object literal,"<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual
value that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause
misunderstandings and bugs.</p>
<p>Defining a <code>class</code> with a duplicated <code>constructor</code> will generate an error.</p>
<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var data = {
  ""key"": ""value"",
  ""1"": ""value"",
  ""key"": ""value"", // Noncompliant - duplicate of ""key""
  'key': ""value"", // Noncompliant - duplicate of ""key""
  key: ""value"", // Noncompliant - duplicate of ""key""
  \u006bey: ""value"", // Noncompliant - duplicate of ""key""
  ""\u006bey"": ""value"", // Noncompliant - duplicate of ""key""
  ""\x6bey"": ""value"", // Noncompliant - duplicate of ""key""
  1: ""value"" // Noncompliant - duplicate of ""1""
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var data = {
  ""key"": ""value"",
  ""1"": ""value"",
  ""key2"": ""value"",
  'key3': ""value"",
  key4: ""value"",
  \u006bey5: ""value"",
  ""\u006bey6"": ""value"",
  ""\x6bey7"": ""value"",
  1b: ""value""
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S1530,Function declarations should not be made within blocks,"<p>While most script engines support function declarations within blocks, from browser to browser, the implementations are inconsistent with each
other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x) {
  function foo() {} //foo is hoisted in Chrome, Firefox and Safari, but not in Edge.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x) {
  const foo = function() {}
}
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S1533,Wrapper objects should not be used for primitive types,"<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,
just remove the <code>new</code> keyword, and youâ€™ll get a primitive value automatically. If you use a wrapper object as a way to add properties to a
primitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = new Number(""0"");
if (x) {
  alert('hi');  // Shows 'hi'.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = Number(""0"");
if (x) {
  alert('hi');
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S2251,"A ""for"" loop update clause should move the counter in the right direction","<p>A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run
infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More
typically, an infinite <code>for</code> loop is a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; strings.length; i--) { // Noncompliant;
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i = 0; i &lt; strings.length; i++) {
  //...
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S135,"Loops should not contain more than a single ""break"" or ""continue"" statement","<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured
programming.</p>
<p>Only one <code>break</code> or one <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more
than one, the code should be refactored to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i &lt;= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  alert(""i = "" + i);
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S126,"""if ... else if"" constructs should end with ""else"" clauses","<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw ""Unexpected value for x"";
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S125,Sections of code should not be commented out,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S4784,Using regular expressions is security-sensitive,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
</ul>
<p>Evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions such as
<code>(a+)+s</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaabs</code>. The problem is that with
every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+s</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating such regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p>This rule flags any execution of a hardcoded regular expression which has at least 3 characters and at least two instances of any of the following
characters: <code>*+{</code>.</p>
<p>Example: <code>(a+)*</code></p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed regular expression is sensitive and a user can provide a string which will be analyzed by this regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine youâ€™re are using.</p>
<p>Use if possible a library which is not vulnerable to Redos Attacks such as <a href=""https://github.com/google/re2"">Google Re2</a>.</p>
<p>Remember also that a ReDos attack is possible if a user-provided regular expression is executed. This rule wonâ€™t detect this kind of injection.</p>
<h2>Sensitive Code Example</h2>
<pre>
const regex = /(a+)+b/; // Sensitive
const regex2 = new RegExp(""(a+)+b""); // Sensitive

str.search(""(a+)+b""); // Sensitive
str.match(""(a+)+b""); // Sensitive
str.split(""(a+)+b""); // Sensitive
</pre>
<p>Note: String.matchAll does not raise any issue as it is not supported by NodeJS.</p>
<h2>Exceptions</h2>
<p>Some corner-case regular expressions will not raise an issue even though they might be vulnerable. For example: <code>(a|aa)+</code>,
<code>(a|a?)+</code>.</p>
<p>It is a good idea to test your regular expression if it has the same pattern on both side of a ""<code>|</code>"".</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRE, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S5852} instead.</p>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S2123,Values should not be uselessly incremented,"<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function pickNumber() {
  let i = 0;
  i = i++; // Noncompliant; i is still zero

  return i++; // Noncompliant; 0 returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function pickNumber() {
  let i = 0;
  i++;

  return ++i;
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3699,The output of functions that don't return anything should not be used,"<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its
""result"" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  console.log(""Hello, World!"");
}

a = foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  console.log(""Hello, World!"");
}

foo();
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S2392,Variables should be used in the blocks where they are declared,"<p>Variables that are declared inside a block but used outside of it (which is possible with a <code>var</code>-style declaration) should be declared
outside the block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a, b) {
  if (a &gt; b) {
    var x = a - b;  // Noncompliant
  }

  if (a &gt; 4) {
    console.log(x);
  }

  for (var i = 0; i &lt; m; i++) { // Noncompliant, both loops use same variable
  }

  for (var i = 0; i &lt; n; i++) {
  }

  return a + b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(a, b) {
  var x;

  if (a &gt; b) {
    x = a - b;
  }

  if (a &gt; 4) {
    console.log(x);
  }

  for (let i = 0; i &lt; m; i++) {
  }

  for (let i = 0; i &lt; n; i++) {
  }


  return a + b;
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2245,Using pseudorandom number generators (PRNGs) is security-sensitive,"<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386"">CVE-2013-6386</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419"">CVE-2006-3419</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102"">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>Math.random()</code> function relies on a weak pseudorandom number generator, this function should not be used for security-critical
applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used
instead.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use a cryptographically strong pseudorandom number generator (CSPRNG) like <code>crypto.getRandomValues()</code>. </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
const val = Math.random(); // Sensitive
// Check if val is used in a security context.
</pre>
<h2>Compliant Solution</h2>
<pre>
// === Client side ===
const crypto = window.crypto || window.msCrypto;
var array = new Uint32Array(1);
crypto.getRandomValues(array); // Compliant for security-sensitive use cases

// === Server side ===
const crypto = require('crypto');
const buf = crypto.randomBytes(1); // Compliant for security-sensitive use cases
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements"">Mobile AppSec
  Verification Standard</a> - Cryptography Requirements </li>
  <li> <a href=""https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography"">OWASP Mobile Top 10 2016 Category M5</a> -
  Insufficient Cryptography </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/338.html"">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/330.html"">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/1241.html"">MITRE, CWE-1241</a> - Use of Predictable Algorithm in Random Number Generator </li>
  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM"">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S2819,Origins should be verified during cross-origin communications,"<p>Browsers <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"">allow message exchanges</a> between Window objects of
different origins.</p>
<p>Because any window can send / receive messages from other window it is important to verify the senderâ€™s / receiverâ€™s identity:</p>
<ul>
  <li> When sending message with postMessage method, the identityâ€™s receiver should be defined (the wildcard keyword (<code>*</code>) should not be
  used). </li>
  <li> When receiving message with message event, the senderâ€™s identity should be verified using the origin and possibly source properties. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>When sending message:</p>
<pre>
var iframe = document.getElementById(""testiframe"");
iframe.contentWindow.postMessage(""secret"", ""*""); // Noncompliant: * is used
</pre>
<p>When receiving message:</p>
<pre>
window.addEventListener(""message"", function(event) { // Noncompliant: no checks are done on the origin property.
      console.log(event.data);
 });
</pre>
<h2>Compliant Solution</h2>
<p>When sending message:</p>
<pre>
var iframe = document.getElementById(""testsecureiframe"");
iframe.contentWindow.postMessage(""hello"", ""https://secure.example.com""); // Compliant
</pre>
<p>When receiving message:</p>
<pre>
window.addEventListener(""message"", function(event) {

  if (event.origin !== ""http://example.org"") // Compliant
    return;

  console.log(event.data)
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management"">OWASP Top 10 2017 Category A3</a> -
  Broken Authentication and Session Management </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"">developer.mozilla.org</a> - postMessage API </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S4326,"""await"" should not be used redundantly","<p>An <code>async</code> function always wraps the return value in a <code>Promise</code>. Using <code>return await</code> is therefore redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
async function foo() {
  // ...
}

async function bar() {
  // ...
  return await foo(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
async function foo() {
  // ...
}

async function bar() {
  // ...
  return foo();
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1763,All code should be reachable,"<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the
current code block. So any statements that come after a jump are dead code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun(a) {
  var i = 10;
  return i + a;
  i++;             // Noncompliant; this is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun(int a) {
  var i = 10;
  return i + a;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores unreachable <code>break</code> statements in <code>switch</code> clauses.</p>
<pre>
switch (x) {
  case 42:
     return 43;
     break;   // Compliant
  default:
    doSomething();
}
</pre>
<p>Hoisted variables declarations without initialization are always considered reachable.</p>
<pre>
function bar() {
  return x = function() {
    x.foo = 42;
  }
  var x;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
</ul>",MAJOR,JavaScript,BUG,FALSE
javascript:S1481,Unused local variables and functions should be removed,"<p>If a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability
because developers will not wonder what the variable or function is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function numberOfMinutes(hours) {
  var seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function numberOfMinutes(hours) {
  return hours * 60;
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1128,Unnecessary imports should be removed,"<p>Thereâ€™s no reason to import modules you donâ€™t use; and every reason not to: doing so needlessly increases the load.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import A from 'a';      // Noncompliant, A isn't used
import { B1 } from 'b';

console.log(B1);
</pre>
<h2>Compliant Solution</h2>
<pre>
import { B1 } from 'b';

console.log(B1);
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1479,"""switch"" statements should not have too many ""case"" clauses","<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S878,Comma operator should not be used,"<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is
generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a += 2, a + b;  // What's the value of i ?
</pre>
<h2>Compliant Solution</h2>
<pre>
a +=  2;
i = a + b;
</pre>
<h2>Exceptions</h2>
<p>Use of comma operator is tolerated:</p>
<ul>
  <li> in initialization and increment expressions of <code>for</code> loops. </li>
</ul>
<pre>
for(i = 0, j = 5; i &lt; 6; i++, j++) { ... }
</pre>
<ul>
  <li> If the expression sequence is explicitly wrapped in parentheses. </li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1110,Redundant pairs of parentheses should be removed,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1821,"""switch"" statements should not be nested","<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(n, m) {
  switch (n) {
    case 0:
      switch (m) {  // Noncompliant; nested switch
        // ...
      }
    case 1:
      // ...
    default:
      // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(n, m) {
  switch (n) {
    case 0:
      bar(m);
    case 1:
      // ...
    default:
      // ...
  }
}

function bar(m) {
  switch(m) {
    // ...
  }
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S1940,Boolean checks should not be inverted,"<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!(a === 2)) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a !== 2) { ... }
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3317,Default export names and file names should match,"<p>By convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may
confuse maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// file path: myclass.js  -- Noncompliant
class MyClass {
  // ...
}
export default MyClass;
</pre>
<h2>Compliant Solution</h2>
<pre>
// file path: MyClass.js
class MyClass {
  // ...
}
export default MyClass;
</pre>
<h2>Exceptions</h2>
<p>Case, underscores ( <code>_</code> ) and dashes (<code>-</code>) are ignored from the name comparison.</p>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1131,Lines should not end with trailing whitespaces,"<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// The following string will error if there is a whitespace after '\'
var str = ""Hello \
World"";
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S4524,"""default"" clauses should be last","<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
first or the last one of the <code>switch</code>'s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  default: // default clause should be the first or last one
    error();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S122,Statements should be on separate lines,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
foo();
bar();
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2092,"Creating cookies without the ""secure"" flag is security-sensitive","<p>When a cookie is protected with the <code>secure</code> attribute set to <em>true</em> it will not be send by the browser over an unencrypted HTTP
request and thus cannot be observed by an unauthorized person during a man-in-the-middle attack.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the cookie is for instance a <em>session-cookie</em> not designed to be sent over non-HTTPS communication. </li>
  <li> itâ€™s not sure that the website contains <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content"">mixed content</a> or not
  (ie HTTPS everywhere or not) </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> It is recommended to use <code>HTTPs</code> everywhere so setting the <code>secure</code> flag to <em>true</em> should be the default behaviour
  when creating cookies. </li>
  <li> Set the <code>secure</code> flag to <em>true</em> for session-cookies. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p><a href=""https://www.npmjs.com/package/cookie-session"">cookie-session</a> module:</p>
<pre>
let session = cookieSession({
  secure: false,// Sensitive
});  // Sensitive
</pre>
<p><a href=""https://www.npmjs.com/package/express-session"">express-session</a> module:</p>
<pre>
const express = require('express');
const session = require('express-session');

let app = express();
app.use(session({
  cookie:
  {
    secure: false // Sensitive
  }
}));
</pre>
<p><a href=""https://www.npmjs.com/package/cookies"">cookies</a> module:</p>
<pre>
let cookies = new Cookies(req, res, { keys: keys });

cookies.set('LastVisit', new Date().toISOString(), {
  secure: false // Sensitive
}); // Sensitive
</pre>
<p><a href=""https://www.npmjs.com/package/csurf"">csurf</a> module:</p>
<pre>
const cookieParser = require('cookie-parser');
const csrf = require('csurf');
const express = require('express');

let csrfProtection = csrf({ cookie: { secure: false }}); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/cookie-session"">cookie-session</a> module:</p>
<pre>
let session = cookieSession({
  secure: true,// Compliant
});  // Compliant
</pre>
<p><a href=""https://www.npmjs.com/package/express-session"">express-session</a> module:</p>
<pre>
const express = require('express');
const session = require('express-session');

let app = express();
app.use(session({
  cookie:
  {
    secure: true // Compliant
  }
}));
</pre>
<p><a href=""https://www.npmjs.com/package/cookies"">cookies</a> module:</p>
<pre>
let cookies = new Cookies(req, res, { keys: keys });

cookies.set('LastVisit', new Date().toISOString(), {
  secure: true // Compliant
}); // Compliant
</pre>
<p><a href=""https://www.npmjs.com/package/csurf"">csurf</a> module:</p>
<pre>
const cookieParser = require('cookie-parser');
const csrf = require('csurf');
const express = require('express');

let csrfProtection = csrf({ cookie: { secure: true }}); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/311"">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/614"">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S6331,Regular expressions should not contain empty groups,"<p>There are several reasons to use a group in a regular expression:</p>
<ul>
  <li> to change the precedence (e.g. <code>/do(g|or)/</code> will match 'dog' and 'door') </li>
  <li> to remember parenthesised part of the match in the case of capturing group </li>
  <li> to improve readability </li>
</ul>
<p>In any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual
parentheses were intended and were not escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const dateRegex = /^(?:0[1-9]|[12][0-9]|3[01])[- /.](?:0[1-9]|1[012])[- /.](?:19|20)\d\d(?:)$/; // Noncompliant, useless group at the end
const methodCallRegex = /foo()/;  // Noncompliant, will match only 'foo'
</pre>
<h2>Compliant Solution</h2>
<pre>
const dateRegex = /^(?:0[1-9]|[12][0-9]|3[01])[- /.](?:0[1-9]|1[012])[- /.](?:19|20)\d\d$/;
const methodCallRegex = /foo\(\)/; // OK, matches 'foo()'
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5247,Disabling auto-escaping in template engines is security-sensitive,"<p>To reduce the risk of cross-site scripting attacks, templating systems, such as <code>Twig</code>, <code>Django</code>, <code>Smarty</code>,
<code>Groovy's template engine</code>, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters
that make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).</p>
<p>Auto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a
href=""https://twig.symfony.com/doc/3.x/filters/escape.html"">the strategy applied</a> and the context, for example a ""html auto-escaping"" strategy
(which only transforms html characters into <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Entity"">html entities</a>) will not be relevant
when variables are used in a <a href=""https://en.wikipedia.org/wiki/HTML_attribute"">html attribute</a> because '<code>:</code>' character is not
escaped and thus an attack as below is possible:</p>
<pre>
&lt;a href=""{{ myLink }}""&gt;link&lt;/a&gt; // myLink = javascript:alert(document.cookie)
&lt;a href=""javascript:alert(document.cookie)""&gt;link&lt;/a&gt; // JS injection (XSS attack)
</pre>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Templates are used to render web content and
    <ul>
      <li> dynamic variables in templates come from untrusted locations or are user-controlled inputs </li>
      <li> there is no local mechanism in place to sanitize or validate the inputs. </li>
    </ul>  </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right
one.</p>
<h2>Sensitive Code Example</h2>
<p><a href=""https://www.npmjs.com/package/mustache"">mustache.js</a> template engine:</p>
<pre>
let Mustache = require(""mustache"");

Mustache.escape = function(text) {return text;}; // Sensitive

let rendered = Mustache.render(template, { name: inputName });
</pre>
<p><a href=""https://www.npmjs.com/package/handlebars"">handlebars.js</a> template engine:</p>
<pre>
const Handlebars = require('handlebars');

let source = ""&lt;p&gt;attack {{name}}&lt;/p&gt;"";

let template = Handlebars.compile(source, { noEscape: true }); // Sensitive
</pre>
<p><a href=""https://www.npmjs.com/package/markdown-it"">markdown-it</a> markup language parser:</p>
<pre>
const markdownIt = require('markdown-it');
let md = markdownIt({
  html: true // Sensitive
});

let result = md.render('# &lt;b&gt;attack&lt;/b&gt;');
</pre>
<p><a href=""https://www.npmjs.com/package/marked"">marked</a> markup language parser:</p>
<pre>
const marked = require('marked');

marked.setOptions({
  renderer: new marked.Renderer(),
  sanitize: false // Sensitive
});

console.log(marked(""# test &lt;b&gt;attack/b&gt;""));
</pre>
<p><a href=""https://www.npmjs.com/package/kramed"">kramed</a> markup language parser:</p>
<pre>
let kramed = require('kramed');

var options = {
  renderer: new kramed.Renderer({
    sanitize: false // Sensitive
  })
};
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/mustache"">mustache.js</a> template engine:</p>
<pre>
let Mustache = require(""mustache"");

let rendered = Mustache.render(template, { name: inputName }); // Compliant autoescaping is on by default
</pre>
<p><a href=""https://www.npmjs.com/package/handlebars"">handlebars.js</a> template engine:</p>
<pre>
const Handlebars = require('handlebars');

let source = ""&lt;p&gt;attack {{name}}&lt;/p&gt;"";
let data = { ""name"": ""&lt;b&gt;Alan&lt;/b&gt;"" };

let template = Handlebars.compile(source); // Compliant by default noEscape is set to false
</pre>
<p><a href=""https://www.npmjs.com/package/markdown-it"">markdown-it</a> markup language parser:</p>
<pre>
let md = require('markdown-it')(); // Compliant by default html is set to false

let result = md.render('# &lt;b&gt;attack&lt;/b&gt;');
</pre>
<p><a href=""https://www.npmjs.com/package/marked"">marked</a> markup language parser:</p>
<pre>
const marked = require('marked');

marked.setOptions({
  renderer: new marked.Renderer()
}); // Compliant by default sanitize is set to true

console.log(marked(""# test &lt;b&gt;attack/b&gt;""));
</pre>
<p><a href=""https://www.npmjs.com/package/kramed"">kramed</a> markup language parser:</p>
<pre>
let kramed = require('kramed');

let options = {
  renderer: new kramed.Renderer({
    sanitize: true // Compliant
  })
};

console.log(kramed('Attack [xss?](javascript:alert(""xss"")).', options));
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"">OWASP Cheat
  Sheet</a> - XSS Prevention Cheat Sheet </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017 Category A7</a> - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/80.html"">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/83.html"">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/84.html"">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
</ul>",MAJOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S4158,Empty collections should not be accessed or iterated,"<p>When a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally
omitted or the developer doesnâ€™t understand the situation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let strings = [];

if (strings.includes(""foo"")) {}  // Noncompliant

for (str of strings) {}  // Noncompliant

strings.forEach(str =&gt; doSomething(str)); // Noncompliant
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S1440,"""==="" and ""!=="" should be used instead of ""=="" and ""!=""","<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For
example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (var === 'howdy') {...}
</pre>
<h2>Exceptions</h2>
<p>Even if testing the equality of a variable against null doesnâ€™t do exactly what most JavaScript developers believe, usage of <code>==</code> or
<code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasnâ€™t been initialized, its default value is not
<code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>
<pre>
if(foo == null) {...}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3500,"Attempts should not be made to update ""const"" variables","<p>Variables declared with <code>const</code> cannot be modified. Unfortunately, attempts to do so donâ€™t always raise an error; in a non-ES2015
environment, such an attempt might simply be ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const pi = ""yes, please"";
pi = 3.14;  // Noncompliant
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S4830,Server certificates should be verified during SSL/TLS connections,"<p>Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks.</p>
<p>The certificate chain validation includes these steps:</p>
<ul>
  <li> The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. </li>
  <li> Each CA is allowed to issue certificates. </li>
  <li> Each certificate in the chain is not expired. </li>
</ul>
<p>Itâ€™s not recommended to reinvent the wheel by implementing custom certificate chain validation.</p>
<p>TLS libraries provide built-in certificate validation functions that should be used.</p>
<h2>Noncompliant Code Example</h2>
<p>There is no way to disable certificate verification in tls, https and request modules but it is possible to not reject request when verification
fails.</p>
<p><a href=""https://nodejs.org/api/https.html"">https</a> built-in module:</p>
<pre>
let options = {
  hostname: 'www.example.com',
  port: 443,
  path: '/',
  method: 'GET',
  secureProtocol: 'TLSv1_2_method',
  rejectUnauthorized: false ; // Noncompliant
};

let req = https.request(options, (res) =&gt; {
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
}); // Noncompliant
</pre>
<p><a href=""https://nodejs.org/api/tls.html"">tls</a> built-in module:</p>
<pre>
let options = {
    secureProtocol: 'TLSv1_2_method',
    rejectUnauthorized: false ; // Noncompliant
};

let socket = tls.connect(443, ""www.example.com"", options, () =&gt; {
  process.stdin.pipe(socket);
  process.stdin.resume();
});  // Noncompliant
</pre>
<p><a href=""https://www.npmjs.com/package/request"">request</a> module:</p>
<pre>
let socket = request.get({
    url: 'www.example.com',
    secureProtocol: 'TLSv1_2_method',
    rejectUnauthorized: false ; // Noncompliant
});
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://nodejs.org/api/https.html"">https</a> built-in module:</p>
<pre>
let options = {
  hostname: 'www.example.com',
  port: 443,
  path: '/',
  method: 'GET',
  secureProtocol: 'TLSv1_2_method'
};

let req = https.request(options, (res) =&gt; {
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
}); // Compliant: by default rejectUnauthorized  is set to true
</pre>
<p><a href=""https://nodejs.org/api/tls.html"">tls</a> built-in module:</p>
<pre>
let options = {
    secureProtocol: 'TLSv1_2_method'
};

let socket = tls.connect(443, ""www.example.com"", options, () =&gt; {
  process.stdin.pipe(socket);
  process.stdin.resume();
}); // Compliant: by default rejectUnauthorized  is set to true
</pre>
<p><a href=""https://www.npmjs.com/package/request"">request</a> module:</p>
<pre>
let socket = request.get({
    url: 'https://www.example.com/',
    secureProtocol: 'TLSv1_2_method' // Compliant
}); // Compliant: by default rejectUnauthorized  is set to true
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements"">Mobile AppSec Verification
  Standard</a> - Network Communication Requirements </li>
  <li> <a href=""https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication"">OWASP Mobile Top 10 2016 Category M3</a> - Insecure
  Communication </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/295.html"">MITRE, CWE-295</a> - Improper Certificate Validation </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S1439,"Only ""while"", ""do"", ""for"" and ""switch"" statements should be labelled","<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,
<code>do-while</code>, <code>for</code> and <code>switch</code> statements. Using labels in any other context leads to unstructured, confusing
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel: if (i % 2 == 0) {  // Noncompliant
  if (i == 12) {
    console.log(""12"");
    break myLabel;
  }
  console.log(""Odd number, but not 12"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myLabel: for (i = 0; i &lt; 10; i++) {   // Compliant
  console.log(""Loop"");
  break myLabel;
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1314,Octal values should not be used,"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
var myNumber = 8;
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S3616,Comma and logical OR operators should not be used in switch cases,"<p>The comma operator (<code>,</code>) evaluates its operands, from left to right, and returns the second one. Thatâ€™s useful in some situations, but
just wrong in a <code>switch</code> <code>case</code>. You may think youâ€™re compactly handling multiple values in the case, but only the last one in
the comma-list will ever be handled. The rest will fall through to the default.</p>
<p>Similarly the logical OR operator (<code>||</code>) will not work in a <code>switch</code> <code>case</code>, only the first argument will be
considered at execution time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch a {
  case 1,2:  // Noncompliant; only 2 is ever handled by this case
    doTheThing(a);
  case 3 || 4: // Noncompliant; only '3' is handled
    doThatThing(a);
  case 5:
    doTheOtherThing(a);
  default:
    console.log(""Neener, neener!"");  // this happens when a==1 or a == 4
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch a {
  case 1:
  case 2:
    doTheThing(a);
  case 3:
  case 4:
    doThatThing(a);
  case 5:
    doTheOtherThing(a);
  default:
    console.log(""Neener, neener!"");
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S4823,Using command line arguments is security-sensitive,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide
security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>Sensitive Code Example</h2>
<pre>
// The process object is a global that provides information about, and control over, the current Node.js process
var param = process.argv[2]; // Sensitive: check how the argument is used
console.log('Param: ' + param);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S6324,Regular expressions should not contain control characters,"<p>Entries in the ASCII table below code 32 are known as control characters or non-printing characters. As they are not common in JavaScript strings,
using these invisible characters in regular expressions is most likely a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const pattern1 = /\x1a/;
const pattern2 = new RegExp('\x1a');
</pre>
<h2>Compliant Solution</h2>
<pre>
const pattern1 = /\x20/;
const pattern2 = new RegExp('\x20');
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S6325,Regular expression literals should be used when possible,"<p>Regular expression literals should be preferred over the <code>RegExp</code> constructor calls when the pattern is a literal. Simply using a
regular expression literal is more concise and easier to read and does not require escaping like a string literal does.</p>
<p>Using the <code>RegExp</code> constructor is suitable when the pattern is computed dynamically, e.g. when it is provided by the user.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new RegExp(/foo/);
new RegExp('bar');
new RegExp('baz', 'i');
new RegExp(""\\d+"");
new RegExp(`qux|quuz`);
</pre>
<h2>Compliant Solution</h2>
<pre>
/foo/;
/bar/;
/baz/i;
/\d+/;
/qux|quuz/;
new RegExp(`Dear ${title},`);
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S6323,Alternation in regular expressions should not contain empty alternatives,"<p>Alternation is used to match a single regular expression out of several possible regular expressions. If one of the alternatives is empty it would
match any input, which is most probably a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/Jack|Peter|/.test('John'); // Noncompliant - returns 'true'
/Jack||Peter/.test('John'); // Noncompliant - returns 'true'
</pre>
<h2>Compliant Solution</h2>
<pre>
/Jack|Peter/.test('John'); // returns 'false'
</pre>
<h2>Exceptions</h2>
<p>One could use an empty alternation to make a regular expression group optional. Rule will not report on such cases.</p>
<pre>
/mandatory(-optional|)/.test('mandatory'); // returns 'true'
/mandatory(-optional|)/.test('mandatory-optional'); // returns 'true'
</pre>
<p>However, if there is a quantifier after the group the issue will be reported as using both <code>|</code> and quantifier is redundant.</p>
<pre>
/mandatory(-optional|)?/.test('mandatory'); // Noncompliant - using both `|` inside the group and `?` for the group.
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S6328,Replacement strings should reference existing regular expression groups,"<p>If the first parameter of <code>String.replace</code> is a regular expression, a special syntax can be used in the replacement string to reference
capturing groups. Use <code>$n</code> to reference the group by number and <code>$&lt;Name&gt;</code> to reference the group by name. Because
replacements strings in <code>String.replace</code> are interpreted at runtime, nothing prevents you to reference nonexisting group, with nonexisting
index or bad name, then the resulting string will be wrong. This rule statically validates that all referenced groups exist when replacing with
<code>String.replace</code> or <code>String.replaceAll</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const str = 'James Bond';
console.log(str.replace(/(\w+)\s(\w+)/, '$1, $0 $1')); // Noncompliant, index is 1-based, '$0' does not exist, prints 'James, $0 James'
console.log(str.replace(/(?&lt;firstName&gt;\w+)\s(?&lt;lastName&gt;\w+)/, '$&lt;surname&gt;, $&lt;firstName&gt; $&lt;surname&gt;')); // Noncompliant &nbsp;'$&lt;surname&gt;' does not exist, prints ', James '
</pre>
<h2>Compliant Solution</h2>
<pre>
const str = 'James Bond';
console.log(str.replace(/(\w+)\s(\w+)/, '$2, $1 $2'));
console.log(str.replace(/(?&lt;firstName&gt;\w+)\s(?&lt;lastName&gt;\w+)/, '$&lt;lastName&gt;, $&lt;firstName&gt; $&lt;lastName&gt;'));
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S4822,Promise rejections should not be caught by 'try' block,"<p>An exception (including <code>reject</code>) thrown by a promise will not be caught by a nesting <code>try</code> block, due to the asynchronous
nature of execution. Instead, use <code>catch</code> method of <code>Promise</code> or wrap it inside <code>await</code> expression.</p>
<p>This rule reports <code>try-catch</code> statements containing nothing else but call(s) to a function returning a <code>Promise</code> (thus itâ€™s
less likely that <code>catch</code> is intended to catch something else than <code>Promise</code> rejection).</p>
<h2>Noncompliant Code Example</h2>
<pre>
function runPromise() {
  return Promise.reject(""rejection reason"");
}

function foo() {
  try { // Noncompliant, the catch clause of the 'try' will not be executed for the code inside promise
    runPromise();
  } catch (e) {
    console.log(""Failed to run promise"", e);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  runPromise().catch(e =&gt; console.log(""Failed to run promise"", e));
}

// or
async function foo() {
  try {
    await runPromise();
  } catch (e) {
    console.log(""Failed to run promise"", e);
  }
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S6326,Regular expressions should not contain multiple spaces,"<p>Multiple spaces in a regular expression can make it hard to tell how many spaces should be matched. Itâ€™s more readable to use only one space and
then indicate with a quantifier how many spaces are expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const pattern = /Hello,   world!/;
</pre>
<h2>Compliant Solution</h2>
<pre>
const pattern = /Hello, {3}world!/;
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1313,Using hardcoded IP addresses is security-sensitive,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Todayâ€™s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery, and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to
bypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which
will increase an attackâ€™s impact.</p>
<h2>Ask Yourself Whether</h2>
<p>The disclosed IP address is sensitive, e.g.:</p>
<ul>
  <li> Can give information to an attacker about the network topology. </li>
  <li> Itâ€™s a personal (assigned to an identifiable person) IP address. </li>
</ul>
<p>There is a risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Donâ€™t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar
approach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having
to rebuild the software.</p>
<h2>Sensitive Code Example</h2>
<pre>
ip = ""192.168.12.42""; // Sensitive

const net = require('net');
var client = new net.Socket();
client.connect(80, ip, function() {
  // ...
});
</pre>
<h2>Compliant Solution</h2>
<pre>
ip = process.env.IP_ADDRESS; // Compliant

const net = require('net');
var client = new net.Socket();
client.connect(80, ip, function() {
  // ...
});
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>
  <li> Broadcast address 255.255.255.255 </li>
  <li> Non routable address 0.0.0.0 </li>
  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=""http://www.oid-info.com/introduction.htm"">often match
  Object Identifiers</a> (OID). </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S6353,Regular expression quantifiers and character classes should be used concisely,"<p>With regular expressions syntax, itâ€™s possible to express the same thing in many ways. For example, to match a two-digit number, one could write
<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.
This rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>
<ul>
  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>
  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>
  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with
  <code>s</code> flag) </li>
  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for
  <code>x{N,N}</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'
/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent
</pre>
<h2>Compliant Solution</h2>
<pre>
/a+/;
/\w/;
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S6351,Regular expressions with the global flag should be used with caution,"<p>Regular expressions with the global flag turned on can be a source of tricky bugs for uninformed users, and should therefore be used with caution.
Such regular expressions are stateful, that is, they maintain an internal state through the <code>lastIndex</code> property, which is updated and used
as starting point on every call to <code>RegExp.prototype.test()</code> and <code>RegExp.prototype.exec()</code>, even when testing a different
string. The <code>lastIndex</code> property is eventually reset when these functions return <code>false</code> and <code>null</code> respectively.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> a regular expression is tested against different inputs with <code>RegExp.prototype.test()</code> or <code>RegExp.prototype.exec()</code> </li>
  <li> a regular expression is defined within a loop condition while used with <code>RegExp.prototype.exec()</code> </li>
  <li> a regular expression turns on both global <code>g</code> and sticky <code>y</code> flags </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
const datePattern = /\d{4}-\d{2}-\d{2}/g;
datePattern.test('2020-08-06');
datePattern.test('2019-10-10'); // Noncompliant: the regex will return ""false"" despite the date being well-formed

const str = 'foodie fooled football';
while ((result = /foo*/g.exec(str)) !== null) { // Noncompliant: a regex is defined at each iteration causing an infinite loop
  /* ... */
}

const stickyPattern = /abc/gy; // Noncompliant: a regex defined as both sticky and global ignores the global flag
stickyPattern.test(/* ... */);
</pre>
<h2>Compliant Solution</h2>
<pre>
const datePattern = /\d{4}-\d{2}-\d{2}/;
datePattern.test('2020-08-06');
datePattern.test('2019-10-10'); // Compliant

const reg = /foo*/g;
const str = 'foodie fooled football';
while ((result = reg.exec(str)) !== null) { // Compliant
  /* ... */
}

const stickyPattern = /abc/y; // Compliant
stickyPattern.test(/* ... */);
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S1105,An open curly brace should be located at the end of a line,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the brace-style is not respecting the convention
setup in parameter:</p>
<ul>
  <li> <a href=""https://en.wikipedia.org/wiki/Indentation_style#K&amp;R_style"">1tbs</a> (default) </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Indentation_style#Allman_style"">allman</a> </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Indentation_style#Variant:_Stroustrup"">stroustrup</a> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>Using the parameter default (1tbs):</p>
<pre>
if (condition)
{                                                      //Noncompliant
  doSomething();
}                                                      //Noncompliant
else {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {                                   //Compliant
  doSomething();
} else {                                           //Compliant
  doSomethingElse();
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Object literals appearing as arguments can start on their own line. </li>
</ul>
<pre>
functionWithObject(
   {                                                 //Compliant
        g: ""someValue""
   }
);
</pre>
<ul>
  <li> When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </li>
</ul>
<pre>
if(condition) {doSomething();}                       //Compliant
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1226,"Function parameters, caught exceptions and foreach variables' initial values should not be ignored","<p>While it is technically correct to assign to parameters from within function bodies, it reduces code readability because developers wonâ€™t be able
to tell whether the original parameter or some temporary variable is being accessed without going through the whole function. Moreover, some
developers might also expect assignments of function parameters to be visible to callers, which is not the case, and this lack of visibility could
confuse them. Instead, all parameters, caught exceptions, and foreach parameters should be treated as constants.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyClass(name, strings) {
  name = foo;                    // Noncompliant

  for (var str of strings) {
    str = """";  // Noncompliant
  }
}
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S3525,"Class methods should be used instead of ""prototype"" assignments","<p>Originally JavaScript didnâ€™t support <code>class</code>es, and class-like behavior had to be kludged using things like <code>prototype</code>
assignments for ""class"" functions. Fortunately, ECMAScript 2015 added classes, so any lingering <code>prototype</code> uses should be converted to
true <code>class</code>es. The new syntax is more expressive and clearer, especially to those with experience in other languages.</p>
<p>Specifically, with ES2015, you should simply declare a <code>class</code> and define its methods inside the class declaration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyNonClass(initializerArgs = []) {
  this._values = [...initializerArgs];
}

MyNonClass.prototype.doSomething = function () {  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  constructor(initializerArgs = []) {
    this._values = [...initializerArgs];
  }

  doSomething() {
    //...
  }
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S4619,"""in"" should not be used on arrays","<p>The <code>in</code> operator used on an array is valid but the code will likely not have the expected behavior. The <code>in</code> operator deals
with the indexes of the array, not with the values.</p>
<p>If checking for an array slot is indeed desired, using <code>hasOwnProperty</code> makes the code intention clearer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function func1() {
    let arr = [""a"", ""b"", ""c""];

    let expectedValue = ""b"";
    if (expectedValue in arr) { // Noncompliant, will be always false
        return expectedValue + "" found in the array"";
    } else {
        return expectedValue + "" not found"";
    }
}

function func2() {
    let arr = [""a"", ""b"", ""c""];

    let expectedValue = ""1""; // index #1 is corresponding to the value ""b""
    if (expectedValue in arr) { // Noncompliant, will be always true because the array is made of 3 elements and the #1 is always there whatever its value
        return expectedValue + "" found in the array"";
    } else {
        return expectedValue + "" not found"";
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function func() {
    let arr = [""a"", ""b"", ""c""];

    let expectedValue = ""b"";
    if (arr.includes(expectedValue)) {
        return expectedValue + "" was found in the array"";
    } else {
        return expectedValue + "" not found"";
    }
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3523,Function constructors should not be used,"<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructorâ€™s string
arguments similar to the way <code>eval</code> works, which could expose your program to random, unintended code which can be both slow and a security
risk.</p>
<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5â€™s built-in JSON functions or
a dedicated library.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj =  new Function(""return "" + data)();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = JSON.parse(data);
</pre>
<h2>Exceptions</h2>
<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()</code>) are ignored.</p>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S1523} instead.</p>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S3402,Strings and non-strings should not be added,"<p>Use a <code>+</code> with two numbers and youâ€™ll get addition. But use it with a string and anything else, and youâ€™ll get concatenation. This could
be confusing, especially if itâ€™s not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to
make it easier to understand to future maintainers.</p>
<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  let x = 5 + 8;  // okay
  let z = ""8""
  return x + z;  // Noncompliant; yields string ""138""
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  let x = 5 + 8;
  let z = ""8""
  return x + Number(z);
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S4165,Assignments should not be redundant,"<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, thereâ€™s no point in
assigning <code>a</code> to <code>c</code> or vice versa because theyâ€™re already equivalent.</p>
<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b;
c = a;
b = c; // Noncompliant: c and b are already the same
</pre>
<h2>Compliant Solution</h2>
<pre>
a = b;
c = a;
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S4043,Array-mutating methods should not be used misleadingly,"<p>Many of JavaScriptâ€™s <code>Array</code> methods return an altered version of the array while leaving the source array intact. <code>reverse</code>
and <code>sort</code> do not fall into this category. Instead, they alter the source array <em>in addition to</em> returning the altered version,
which is likely not what was intended.</p>
<p>This rule raises an issue when the return values of these methods are assigned, which could lead maintainers to overlook the fact that the original
value is altered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var b = a.reverse(); // Noncompliant
var d = c.sort(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var b = [...a].reverse();  // de-structure and create a new array, so reverse doesn't impact 'a'
a.reverse();

c.sort(); // this sorts array in place
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3514,Destructuring syntax should be used for assignments,"<p>ECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called
""destructuring"", and it allows you to condense boilerplate code so you can concentrate on logic.</p>
<p>This rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo (obj1, obj2, array) {
  var a = obj1.a;  // Noncompliant
  var b = obj1.b;

  var name = obj2.name;  // ignored; there's only one extraction-and-assignment

  var zero = array[0];  // Noncompliant
  var one = array[1];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo (obj1, obj2, array) {
  var {a, b} = obj1;

  var {name} = obj2;  // this syntax works because var name and property name are the same

  var [zero, one] = array;
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S2428,Object literal syntax should be used,"<p>Object literal syntax, which initializes an objectâ€™s properties inside the object declaration is cleaner and clearer than the alternative: creating
an empty object, and then giving it properties one by one.</p>
<p>An issue is raised when the following pattern is met:</p>
<ul>
  <li> An empty object is created. </li>
  <li> A consecutive single-line statement adds a property to the created object. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
let person = {};  // Noncompliant
person.firstName = ""John"";
person.middleInitial = ""Q"";
person.lastName = ""Public"";
</pre>
<h2>Compliant Solution</h2>
<pre>
let person = {
  firstName: ""John"",
  middleInitial: ""Q"",
  lastName: ""Public"",
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3516,Function returns should not be invariant,"<p>When a function is designed to return an invariant value, it may be poor design, but it shouldnâ€™t adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is likely a mistake.</p>
<p>This rule raises an issue when a function contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {  // Noncompliant
  let b = 12;
  if (a) {
    return b;
  }
  return b;
}
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S2427,"The base should be provided to ""parseInt""","<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using
the single-arg version can result in unexpected results on older browsers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
parseInt(""010"");  // Noncompliant; pre-2013 browsers may return 8
</pre>
<h2>Compliant Solution</h2>
<pre>
parseInt(""010"", 10);
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S1451,Track lack of copyright and license headers,"<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S3513,"""arguments"" should not be accessed directly","<p>The magic of JavaScript is that you can pass arguments to functions that donâ€™t declare parameters, and on the other side, you can use those
passed-in arguments inside the no-args <code>function</code>.</p>
<p>But just because you can, that doesâ€™t mean you should. The expectation and use of arguments inside functions that donâ€™t explicitly declare them is
confusing to callers. No one should ever have to read and fully understand a function to be able to use it competently.</p>
<p>If you donâ€™t want to name arguments explicitly, use the <code>...</code> syntax to specify that an a variable number of arguments is expected. Then
inside the function, youâ€™ll be dealing with a first-class array, rather than an array-like structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function concatenate() {
  let args = Array.prototype.slice.call(arguments);  // Noncompliant
  return args.join(', ');
}

function doSomething(isTrue) {
  var args = Array.prototype.slice.call(arguments, 1); // Noncompliant
  if (!isTrue) {
    for (var arg of args) {
      ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function concatenate(...args) {
  return args.join(', ');
}

function doSomething(isTrue, ...values) {
  if (!isTrue) {
    for (var value of values) {
      ...
    }
  }
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S6092,Chai assertions should have only one reason to succeed,"<p>Each assertion should test one condition and have only one reason to fail or succeed. If an assertion success depends on multiple conditions it
becomes difficult to understand if the test passed for the right reason. It also makes debugging more difficult when the test fails.</p>
<p>This rule raises an issue when the following Chai assertions are found:</p>
<ul>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_throw""><code>.throw</code></a> are used together and at least one
  argument is provided to <code>.throw</code>. Such assertions succeed when the target either does not throw any exception, or when it throws an
  exception different from the one provided. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_include""><code>.include</code></a> are used together and an
  <code>object</code> is given to <code>.include</code>. Such assertions succeed when one or multiple key/values are missing. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_property""><code>.property</code></a> are used together and
  <code>.property</code> is given at least two arguments. Such assertions succeed when the target either doesnâ€™t have the requested property, or when
  this property exists but has a different value. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_ownpropertydescriptor""><code>.ownPropertyDescriptor</code></a> are
  used together and <code>.ownPropertyDescriptor</code> is given at least two arguments. Such assertions succeed when the target either doesnâ€™t have
  the requested property descriptor, or its property descriptor is not deeply equal to the given descriptor </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_members""><code>.members</code></a> are used together. Such
  assertions succeed when one or multiple members are missing. </li>
  <li> When <a href=""https://www.chaijs.com/api/bdd/#method_change""><code>.change</code></a> and <a
  href=""https://www.chaijs.com/api/bdd/#method_by""><code>.by</code></a> are used together. Such assertions succeed when the target either decreases or
  increases by the given delta </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_increase""><code>.increase</code></a> are used together. Such
  assertions succeed when the target either decreases or stays the same. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_decrease""><code>.decrease</code></a> are used together. Such
  assertions succeed when the target either increases or stays the same. </li>
  <li> When <code>.not</code> negates <a href=""https://www.chaijs.com/api/bdd/#method_decrease""><code>.by</code></a>. Such assertions succeed when the
  target didnâ€™t change by one specific delta among all the possible deltas. </li>
  <li> When <code>.not</code> and <a href=""https://www.chaijs.com/api/bdd/#method_decrease""><code>.finite</code></a> are used together. Such
  assertions succeed when the target either is not a <code>number</code>, or is one of <code>Nan</code>, positive <code>Infinity</code>, negative
  <code>Infinity</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
const expect = require('chai').expect;

describe(""uncertain assertions"", function() {
    const throwsTypeError = () =&gt; { throw new TypeError() }

    it(""uses chai 'expect'"", function() {
        expect(throwsTypeError).to.not.throw(ReferenceError) // Noncompliant
        expect({a: 42}).to.not.include({b: 10, c: 20});  // Noncompliant
        expect({a: 21}).to.not.have.property('b', 42); // Noncompliant
        expect({a: 21}).to.not.have.ownPropertyDescriptor('b', {   // Noncompliant
            configurable: true,
            enumerable: true,
            writable: true,
            value: 42,
        });
        expect([21, 42]).to.not.have.members([1, 2]); // Noncompliant

        var myObj = { value: 1 }
        const incThree = () =&gt; { myObj.value += 3; };
        const decThree = () =&gt; { myObj.value -= 3; };
        const doNothing = () =&gt; {};

        expect(incThree).to.change(myObj, 'value').by(3); // Noncompliant
        expect(decThree).to.change(myObj, 'value').by(3); // Noncompliant

        expect(decThree).to.not.increase(myObj, 'value'); // Noncompliant
        expect(incThree).to.not.decrease(myObj, 'value'); // Noncompliant

        expect(doNothing).to.not.increase(myObj, 'value'); // Noncompliant
        expect(doNothing).to.not.decrease(myObj, 'value'); // Noncompliant

        expect(incThree).to.increase(myObj, 'value').but.not.by(1); // Noncompliant

        let toCheck;
        expect(toCheck).to.not.be.finite; // Noncompliant
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const expect = require('chai').expect;

describe(""uncertain assertions"", function() {
    const throwsTypeError = () =&gt; { throw new TypeError() }

    it(""uses chai 'expect'"", function() {
        expect(throwsTypeError).to.throw(TypeError)
        expect({a: 42}).to.not.have.any.keys('b', 'c');
        expect({a: 21}).to.not.have.property('b');
        expect({a: 21}).to.not.have.ownPropertyDescriptor('b');
        expect([21, 42]).to.not.include(1).and.not.include(2);

        var myObj = { value: 1 }
        const incThree = () =&gt; { myObj.value += 3; };
        const decThree = () =&gt; { myObj.value -= 3; };
        const doNothing = () =&gt; {};

        expect(incThree).to.increase(myObj, 'value').by(3);
        expect(decThree).to.decrease(myObj, 'value').by(3);

        expect(decThree).to.decrease(myObj, 'value').by(3);
        expect(incThree).to.increase(myObj, 'value').by(3);

        expect(doNothing).to.not.change(myObj, 'value');

        expect(incThree).to.increase(myObj, 'value').by(3);

        let toCheck;
        // Either of the following is valid
        expect(toCheck).to.be.a('string');
        expect(toCheck).to.be.NaN;
        expect(toCheck).to.equal(Infinity);
        expect(toCheck).to.equal(-Infinity);
    });
});
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2612,Setting loose POSIX file permissions is security-sensitive,"<p>In Unix, ""<code>others</code>"" class refers to all users except the owner of the file and the members of the group assigned to this file.</p>
<p>Granting permissions to this group can lead to unintended access to files.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The application is designed to be run on a multi-user environment. </li>
  <li> Corresponding files and directories may contain confidential information. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The most restrictive possible permissions should be assigned to files and directories.</p>
<h2>Sensitive Code Example</h2>
<p>Node.js <a href=""https://nodejs.org/api/fs.html""><code>fs</code></a></p>
<pre>
const fs = require('fs');

fs.chmodSync(""/tmp/fs"", 0o777); // Sensitive
</pre>
<pre>
const fs = require('fs');
const fsPromises = fs.promises;

fsPromises.chmod(""/tmp/fsPromises"", 0o777); // Sensitive
</pre>
<pre>
const fs = require('fs');
const fsPromises = fs.promises

async function fileHandler() {
  let filehandle;
  try {
    filehandle = fsPromises.open('/tmp/fsPromises', 'r');
    filehandle.chmod(0o777); // Sensitive
  } finally {
    if (filehandle !== undefined)
      filehandle.close();
  }
}
</pre>
<p>Node.js <a href=""https://nodejs.org/api/process.html#process_process_umask_mask""><code>process.umask</code></a></p>
<pre>
const process = require('process');

process.umask(0o000); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p>Node.js <a href=""https://nodejs.org/api/fs.html""><code>fs</code></a></p>
<pre>
const fs = require('fs');

fs.chmodSync(""/tmp/fs"", 0o770); // Compliant
</pre>
<pre>
const fs = require('fs');
const fsPromises = fs.promises;

fsPromises.chmod(""/tmp/fsPromises"", 0o770); // Compliant
</pre>
<pre>
const fs = require('fs');
const fsPromises = fs.promises

async function fileHandler() {
  let filehandle;
  try {
    filehandle = fsPromises.open('/tmp/fsPromises', 'r');
    filehandle.chmod(0o770); // Compliant
  } finally {
    if (filehandle !== undefined)
      filehandle.close();
  }
}
</pre>
<p>Node.js <a href=""https://nodejs.org/api/process.html#process_process_umask_mask""><code>process.umask</code></a></p>
<pre>
const process = require('process');

process.umask(0o007); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>
  <li> <a href=""https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)"">OWASP File Permission</a> </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/266.html"">MITRE, CWE-266</a> - Incorrect Privilege Assignment </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",MAJOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S3827,Variables should be defined before being used,"<p>When a non-existent variable is referenced a <code>ReferenceError</code> is raised.</p>
<p>Due to the dynamic nature of JavaScript this can happen in a number of scenarios:</p>
<ul>
  <li> When typo was made in a symbolâ€™s name. </li>
  <li> When using variable declared with <code>let</code> or <code>const</code> before declaration (unlike <code>var</code>-declarations, they are not
  hoisted to the top of the scope). </li>
  <li> Due to confusion with scopes of <code>let</code>- and <code>const</code>-declarations (they have block scope, unlike
  <code>var</code>-declarations, having function scope). </li>
  <li> When accessing a property in the wrong scope (e.g. forgetting to specify <code>this.</code>). </li>
</ul>
<p>This rule does not raise issues on global variables which are defined with <code>sonar.javascript.globals</code> and
<code>sonar.javascript.environments</code> properties.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var john = {
  firstName: ""john"",
  show: function() { console.log(firstName); } // Noncompliant: firstName is not defined
}
john.show();
</pre>
<h2>Compliant Solution</h2>
<pre>
var john = {
  firstName: ""john"",
  show: function() { console.log(this.firstName); }
}
john.show();
</pre>",BLOCKER,JavaScript,BUG,FALSE
javascript:S2737,"""catch"" clauses should do more than rethrow","<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.</p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  doSomething();
} catch (ex) {  // Noncompliant
  throw ex;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  doSomething();
} catch (ex) {
  console.err(ex);
  throw ex;
}
</pre>
<p>or</p>
<pre>
doSomething();
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1529,Bitwise operators should not be used in boolean contexts,"<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.</p>
<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp; b) { ... } // Noncompliant; &amp; used in error
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a &amp;&amp; b) { ... }
</pre>
<h2>Exceptions</h2>
<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,
<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and
<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that
bitwise operations are truly intended in the file.</p>",MAJOR,JavaScript,BUG,FALSE
javascript:S2970,Assertions should be complete,"<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete Chai assertions in the following
cases:</p>
<ul>
  <li> when <code>assert.fail</code>, <code>expect.fail</code> or <code>should.fail</code> are present but not called. </li>
  <li> when an <code>expect(...)</code> or <code>should</code> assertion is not followed by an assertion method, such as <code>equal</code>. </li>
  <li> when an <code>expect</code> or <code>should</code> assertion ends with a <a
  href=""https://www.chaijs.com/api/bdd/#method_language-chains"">chainable getters</a>, such as <code>.that</code>, or a modifier, such as
  <code>.deep</code>. </li>
  <li> when an <code>expect</code> or <code>should</code> assertion function, such as <code>.throw</code>, is not called. </li>
</ul>
<p>In such cases, what is intended to be a test doesnâ€™t actually verify anything</p>
<h2>Noncompliant Code Example</h2>
<pre>
const assert = require('chai').assert;
const expect = require('chai').expect;

describe(""incomplete assertions"", function() {
    const value = 42;

    it(""uses chai 'assert'"", function() {
        assert.fail;  // Noncompliant
    });

    it(""uses chai 'expect'"", function() {
        expect(1 == 1);  // Noncompliant
        expect(value.toString).to.throw;  // Noncompliant
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const assert = require('chai').assert;
const expect = require('chai').expect;

describe(""incomplete assertions"", function() {
    const value = 42;

    it(""uses chai 'assert'"", function() {
        assert.fail();
    });

    it(""uses chai 'expect'"", function() {
        expect(1).to.equal(1);
        expect(value.toString).throw(TypeError);
    });
});
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S5443,Using publicly writable directories is security-sensitive,"<p>Operating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like
<code>/tmp</code> in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious
user can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,
modified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.</p>
<p>In the past, it has led to the following vulnerabilities:</p>
<ul>
  <li> <a href=""https://nvd.nist.gov/vuln/detail/CVE-2012-2451"">CVE-2012-2451</a> </li>
  <li> <a href=""https://nvd.nist.gov/vuln/detail/CVE-2015-1838"">CVE-2015-1838</a> </li>
</ul>
<p>This rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like <code>/tmp</code> (see examples bellow). It
also detects access to environment variables that point to publicly writable directories, e.g., <code>TMP</code> and <code>TMPDIR</code>.</p>
<ul>
  <li> <code>/tmp</code> </li>
  <li> <code>/var/tmp</code> </li>
  <li> <code>/usr/tmp</code> </li>
  <li> <code>/dev/shm</code> </li>
  <li> <code>/dev/mqueue</code> </li>
  <li> <code>/run/lock</code> </li>
  <li> <code>/var/run/lock</code> </li>
  <li> <code>/Library/Caches</code> </li>
  <li> <code>/Users/Shared</code> </li>
  <li> <code>/private/tmp</code> </li>
  <li> <code>/private/var/tmp</code> </li>
  <li> <code>\Windows\Temp</code> </li>
  <li> <code>\Temp</code> </li>
  <li> <code>\TMP</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Files are read from or written into a publicly writable folder </li>
  <li> The application creates files with predictable names into a publicly writable folder </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use a dedicated sub-folder with tightly controlled permissions </li>
  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:
    <ul>
      <li> The generated filename is unpredictable </li>
      <li> The file is readable and writable only by the creating user ID </li>
      <li> The file descriptor is not inherited by child processes </li>
      <li> The file will be destroyed as soon as it is closed </li>
    </ul>  </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
const fs = require('fs');

let tmp_file = ""/tmp/temporary_file""; // Sensitive
fs.readFile(tmp_file, 'utf8', function (err, data) {
  // ...
});
</pre>
<pre>
const fs = require('fs');

let tmp_dir = process.env.TMPDIR; // Sensitive
fs.readFile(tmp_dir + ""/temporary_file"", 'utf8', function (err, data) {
  // ...
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const tmp = require('tmp');

const tmpobj = tmp.fileSync(); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/377"">MITRE, CWE-377</a> - Insecure Temporary File </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/379"">MITRE, CWE-379</a> - Creation of Temporary File in Directory with Incorrect Permissions
  </li>
  <li> <a href=""https://www.owasp.org/index.php/Insecure_Temporary_File"">OWASP, Insecure Temporary File</a> </li>
</ul>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S1764,Identical expressions should not be used on both sides of a binary operator,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a == b &amp;&amp; a == b) { // if the first one is true, the second one is too
  doX();
}
if (a &gt; a) { // always false
  doW();
}

var j = 5 / 5; //always 1
var k = 5 - 5; //always 0
</pre>
<h2>Exceptions</h2>
<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>
<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>
<pre>
if (f !== f) { // test for NaN value
  console.log(""f is NaN"");
}

var i = 1 &lt;&lt; 1; // Compliant
var j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> {rule:javascript:S1656} - Implements a check on <code>=</code>. </li>
</ul>",MAJOR,JavaScript,BUG,FALSE
javascript:S5689,Disclosing fingerprints from web application technologies is security-sensitive,"<p>Disclosing technology fingerprints allows an attacker to gather information about the technologies used to develop the web application and to
perform relevant security assessments more quickly (like the identification of known vulnerable components).</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The <code>x-powered-by</code> HTTP header or similar is used by the application. </li>
  <li> Technologies used by the application are confidential and should not be easily guessed. </li>
</ul>
<p>There is a risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Itâ€™s recommended to not disclose technologies used on a website, with <code>x-powered-by</code> HTTP header for example.</p>
<p>In addition, itâ€™s better to completely disable this HTTP header rather than setting it a random value.</p>
<h2>Sensitive Code Example</h2>
<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> name is disclosed by default into the <code>x-powered-by</code> HTTP header:</p>
<pre>
let express = require('express');
let app = express(); // Sensitive

app.get('/', function (req, res) {
  res.send('hello')
});
</pre>
<h2>Compliant Solution</h2>
<p><code>x-powered-by</code> HTTP header should be disabled in <a href=""https://www.npmjs.com/package/express"">Express.js</a> with
<code>app.disable</code> or with helmet <a href=""https://www.npmjs.com/package/helmet"">hidePoweredBy</a> middleware:</p>
<pre>
let express = require('express');

let app1 = express();  // Compliant
app1.disable(""x-powered-by"");

let helmet = require(""helmet"");
let app2 = express(); // Compliant
app2.use(helmet.hidePoweredBy());
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href=""https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html"">OWASP Testing Guide - OTG-INFO-008</a> - Fingerprint Web Application Framework </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S6080,"Mocha timeout should be disabled by setting it to ""0"".","<p>Starting from Mocha v3.0.0, calling <code>this.timeout(X)</code> with <code>X</code> greater than the <a
href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value"">maximum delay value</a>
(2,147,483,647 ms) <a href=""https://mochajs.org/#hook-level"">will cause the timeout to be disabled</a>. This might not be what the developer intended.
If the goal is really to disable the timeout, <code>this.timeout(0)</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
describe(""testing this.timeout"", function() {
  it(""unexpectedly disables the timeout"", function(done) {
    this.timeout(2147483648); // Noncompliant
  });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
describe(""testing this.timeout"", function() {
  it(""doesn't disable the timeout"", function(done) {
    this.timeout(1000);
  });
});
</pre>
<p>Or if you meant to disable the timeout</p>
<pre>
describe(""testing this.timeout"", function() {
  it(""disables the timeout as expected"", function(done) {
    this.timeout(0);
  });
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://mochajs.org/#hook-level"">Mocha documentation</a> </li>
</ul>",MAJOR,JavaScript,BUG,FALSE
javascript:S1516,Multiline string literals should not be used,"<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the
beginning of each line canâ€™t be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myString = 'A rather long string of English text, an error message \
                actually that just keeps going and going -- an error \
                message to make the Energizer bunny blush (right through \
                those Schwarzenegger shades)! Where was I? Oh yes, \
                you\'ve got an error and all the extraneous whitespace is \
                just gravy.  Have a nice day.';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myString = 'A rather long string of English text, an error message ' +
    'actually that just keeps going and going -- an error ' +
    'message to make the Energizer bunny blush (right through ' +
    'those Schwarzenegger shades)! Where was I? Oh yes, ' +
    'you\'ve got an error and all the extraneous whitespace is ' +
    'just gravy.  Have a nice day.';
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3499,Shorthand object properties should be grouped at the beginning or end of an object declaration,"<p>Grouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand
declarations grouped at either the beginning or end of an object.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let obj1 = {
  foo,
  a: 1,
  color,  // Noncompliant
  b: 2,
  judyGarland  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let obj1 = {
  foo,
  color,
  judyGarland,
  a: 1,
  b: 2
}
</pre>
<p>or</p>
<pre>
let obj1 = {
  a: 1,
  b: 2,
  foo,
  color,
  judyGarland
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1874,Deprecated APIs should not be used,"<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning
that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away
from the aging, soon-to-be-retired technology.</p>
<h2>Noncompliant Code Example</h2>
<pre>
export interface LanguageService {
  /**
  * @deprecated Use getEncodedSyntacticClassifications instead.
  */
  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];
}

const syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/477.html"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
</ul>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3723,Trailing commas should be used,"<p>Modern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless youâ€™re supporting an IE 8 application. Since they
make adding new properties simpler, their use is preferred. This rule raises an issue when the last item in a multiline construct (array or object
literal, import or export statement, function declaration or call) does not end with a trailing comma and does not lie on the same line as the closing
curly brace, bracket or parenthesis.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var joe = {
  fname: ""Joe"",
  lname: ""Smith""      // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var joe = {
  fname: ""Joe"",
  lname: ""Smith"",    // OK
};

var joe = {
  fname: ""Joe"",
  lname: ""Smith""};   // OK
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S2755,XML parsers should not be vulnerable to XXE attacks,"<p>XML standard allows the use of entities, declared in the DOCTYPE of the document, which can be <a
href=""https://www.w3.org/TR/xml/#sec-internal-ent"">internal</a> or <a href=""https://www.w3.org/TR/xml/#sec-external-ent"">external</a>.</p>
<p>When parsing the XML file, the content of the external entities is retrieved from an external storage such as the file system or network, which may
lead, if no restrictions are put in place, to arbitrary file disclosures or <a
href=""https://www.owasp.org/index.php/Server_Side_Request_Forgery"">server-side request forgery (SSRF)</a> vulnerabilities.</p>
<pre>
&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;!DOCTYPE person [
  &lt;!ENTITY file SYSTEM ""file:///etc/passwd""&gt;
  &lt;!ENTITY ssrf SYSTEM ""https://internal.network/sensitive_information""&gt;
]&gt;

&lt;person&gt;
  &lt;name&gt;&amp;file;&lt;/name&gt;
  &lt;city&gt;&amp;ssrf;&lt;/city&gt;
  &lt;age&gt;18&lt;/age&gt;
&lt;/person&gt;
</pre>
<p>Itâ€™s recommended to limit resolution of external entities by using one of these solutions:</p>
<ul>
  <li> If DOCTYPE is not necessary, completely disable all DOCTYPE declarations. </li>
  <li> If external entities are not necessary, completely disable their declarations. </li>
  <li> If external entities are necessary then:
    <ul>
      <li> Use XML processor features, if available, to authorize only required protocols (eg: https). </li>
      <li> And use an entity resolver (and optionally an XML Catalog) to resolve only trusted entities. </li>
    </ul>  </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p><a href=""https://github.com/libxmljs/libxmljs"">libxmljs</a> module:</p>
<pre>
const libxmljs = require(""libxmljs"");
var fs = require('fs');

var xml = fs.readFileSync('xxe.xml', 'utf8');

var xmlDoc = libxmljs.parseXmlString(xml, { noblanks: true, noent: true, nocdata: true }); // Noncompliant: noent set to true
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://github.com/libxmljs/libxmljs"">libxmljs</a> module:</p>
<pre>
const libxmljs = require(""libxmljs"");
var fs = require('fs');

var xml = fs.readFileSync('xxe.xml', 'utf8');

var xmlDoc = libxmljs.parseXmlString(xml); // Compliant: noent set to false by default
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)"">OWASP Top 10 2017 Category A4</a> - XML External Entities
  (XXE) </li>
  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html"">OWASP XXE Prevention Cheat Sheet</a>
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/611.html"">MITRE, CWE-611</a> - Information Exposure Through XML External Entity Reference </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/827.html"">MITRE, CWE-827</a> - Improper Control of Document Type Definition </li>
</ul>",BLOCKER,JavaScript,VULNERABILITY,FALSE
javascript:S4817,Executing XPath expressions is security-sensitive,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Sensitive Code Example</h2>
<pre>
// === Server side ===

var xpath = require('xpath');
var xmldom = require('xmldom');

var doc = new xmldom.DOMParser().parseFromString(xml);
var nodes = xpath.select(userinput, doc); // Sensitive
var node = xpath.select1(userinput, doc); // Sensitive
</pre>
<pre>
// === Client side ===

// Chrome, Firefox, Edge, Opera, and Safari use the evaluate() method to select nodes:
var nodes = document.evaluate(userinput, xmlDoc, null, XPathResult.ANY_TYPE, null); // Sensitive

// Internet Explorer uses its own methods to select nodes:
var nodes = xmlDoc.selectNodes(userinput); // Sensitive
var node = xmlDoc.SelectSingleNode(userinput); // Sensitive
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S2077,Formatting SQL queries is security-sensitive,"<p>Formatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the
query. However, this rule doesnâ€™t detect SQL injections (unlike rule {rule:javascript:S3649}), the goal is only to highlight complex/formatted
queries.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Some parts of the query come from untrusted values (like user inputs). </li>
  <li> The query is repeated/duplicated in other parts of the code. </li>
  <li> The application must support different types of relational databases. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> and bind variables to SQL query parameters. </li>
  <li> Consider using ORM frameworks if there is a need to have an abstract layer to access data. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
// === MySQL ===
const mysql = require('mysql');
const mycon = mysql.createConnection({ host: host, user: user, password: pass, database: db });
mycon.connect(function(err) {
  mycon.query('SELECT * FROM users WHERE id = ' + userinput, (err, res) =&gt; {}); // Sensitive
});

// === PostgreSQL ===
const pg = require('pg');
const pgcon = new pg.Client({ host: host, user: user, password: pass, database: db });
pgcon.connect();
pgcon.query('SELECT * FROM users WHERE id = ' + userinput, (err, res) =&gt; {}); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<pre>
// === MySQL ===
const mysql = require('mysql');
const mycon = mysql.createConnection({ host: host, user: user, password: pass, database: db });
mycon.connect(function(err) {
  mycon.query('SELECT name FROM users WHERE id = ?', [userinput], (err, res) =&gt; {});
});

// === PostgreSQL ===
const pg = require('pg');
const pgcon = new pg.Client({ host: host, user: user, password: pass, database: db });
pgcon.connect();
pgcon.query('SELECT name FROM users WHERE id = $1', [userinput], (err, res) =&gt; {});
</pre>
<h2>Exceptions</h2>
<p>This ruleâ€™s current implementation does not follow variables. It will only detect SQL queries which are formatted directly in the function
call.</p>
<pre>
const sql = 'SELECT * FROM users WHERE id = ' + userinput;
mycon.query(sql, (err, res) =&gt; {}); // Sensitive but no issue is raised.
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",MAJOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S2871,"A compare function should be provided when using ""Array.prototype.sort()""","<p>The default sort order is alphabetic, rather than numeric, regardless of the types in the array. Specifically, even if an array contains only
numbers, all values in it will be converted to strings and sorted lexicographically, for an order like this: 1, 15, 2, 20, 5.</p>
<p>Fortunately the <code>sort</code> method allows you to pass an optional compare function to specify the sort order. When a compare function is
supplied, the returned order depends on the return value of the compare function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myarray = [80, 3, 9, 34, 23, 5, 1];

myarray.sort();
console.log(myarray); // outputs: [1, 23, 3, 34, 5, 80, 9]
</pre>
<h2>Compliant Solution</h2>
<pre>
var myarray = [80, 3, 9, 34, 23, 5, 1];

myarray.sort((a, b) =&gt; (a - b));
console.log(myarray); // outputs: [1, 3,  5, 9, 23, 34, 80]
</pre>",CRITICAL,JavaScript,BUG,FALSE
javascript:S121,Control structures should use curly braces,"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S4139,"""for in"" should not be used with iterables","<p>If you have an iterable, such as an array, set, or list, your best option for looping through its values is the <code>for of</code> syntax. Use
<code>for in</code> and youâ€™ll iterate the properties, rather than the values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let value in arr) {  // Noncompliant
  console.log(value);  // logs 0, 1, 2, 3
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let value of arr) {
  console.log(value);
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S4138,"""for of"" should be used with Iterables","<p>If you have an iterable, such as an array, set, or list, your best option for looping through its values is the <code>for of</code> syntax. Use a
counter, and â€¦â€‹ well youâ€™ll get the right behavior, but your code just isnâ€™t as clean or clear.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let i = 0; i &lt; arr.length; i++) {  // Noncompliant
  console.log(arr[i]);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let value of arr) {
  console.log(value);
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S109,Magic numbers should not be used,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loop, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when youâ€™re writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  for (let i = 0; i &lt; 4; i++) {    // Noncompliant, 4 is a magic number
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething() {
  const numberOfCycles = 4;
  for (let i = 0; i &lt; numberOfCycles; i++) {
    // ...
  }
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5693,Allowing requests with excessive content length is security-sensitive,"<p>Rejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in
order to prevents DoS attacks.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> size limits are not defined for the different resources of the web application. </li>
  <li> the web application is not protected by <a href=""https://en.wikipedia.org/wiki/Rate_limiting"">rate limiting</a> features. </li>
  <li> the web application infrastructure has limited resources. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> For most of the features of an application, it is recommended to limit the size of requests to:
    <ul>
      <li> lower or equal to 8mb for file uploads. </li>
      <li> lower or equal to 2mb for other requests. </li>
    </ul>  </li>
</ul>
<p>It is recommended to customize the rule with the limit values that correspond to the web application.</p>
<h2>Sensitive Code Example</h2>
<p><a href=""https://www.npmjs.com/package/formidable"">formidable</a> file upload module:</p>
<pre>
const form = new Formidable();
form.maxFileSize = 10000000; // Sensitive: 10MB is more than the recommended limit of 8MB

const formDefault = new Formidable(); // Sensitive, the default value is 200MB
</pre>
<p><a href=""https://www.npmjs.com/package/multer"">multer</a> (Express.js middleware) file upload module:</p>
<pre>
let diskUpload = multer({
  storage: diskStorage,
  limits: {
    fileSize: 10000000; // Sensitive: 10MB is more than the recommended limit of 8MB
  }
});

let diskUploadUnlimited = multer({ // Sensitive: the default value is no limit
  storage: diskStorage,
});
</pre>
<p><a href=""https://www.npmjs.com/package/body-parser"">body-parser</a> module:</p>
<pre>
// 4MB is more than the recommended limit of 2MB for non-file-upload requests
let jsonParser = bodyParser.json({ limit: ""4mb"" }); // Sensitive
let urlencodedParser = bodyParser.urlencoded({ extended: false, limit: ""4mb"" }); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/formidable"">formidable</a> file upload module:</p>
<pre>
const form = new Formidable();
form.maxFileSize = 8000000; // Compliant: 8MB
</pre>
<p><a href=""https://www.npmjs.com/package/multer"">multer</a> (Express.js middleware) file upload module:</p>
<pre>
let diskUpload = multer({
  storage: diskStorage,
  limits: {
     fileSize: 8000000 // Compliant: 8MB
  }
});
</pre>
<p><a href=""https://www.npmjs.com/package/body-parser"">body-parser</a> module:</p>
<pre>
let jsonParser = bodyParser.json(); // Compliant, when the limit is not defined, the default value is set to 100kb
let urlencodedParser = bodyParser.urlencoded({ extended: false, limit: ""2mb"" }); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html"">Owasp Cheat Sheet</a> - Owasp Denial of Service
  Cheat Sheet </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/770.html"">CWE-770</a> - Allocation of Resources Without Limits or Throttling </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/400.html"">CWE-400</a> - Uncontrolled Resource Consumption </li>
</ul>",MAJOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5691,Statically serving hidden files is security-sensitive,"<p>Hidden files are created automatically by many tools to save user-preferences, well-known examples are <code>.profile</code>, <code>.bashrc</code>,
<code>.bash_history</code> or .<code>git</code>. To simplify the view these files are not displayed by default using operating system commands like
<code>ls</code>.</p>
<p>Outside of the user environment, hidden files are sensitive because they are used to store privacy-related information or even hard-coded
secrets.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Hidden files may have been inadvertently uploaded to the static serverâ€™s public directory and it accepts requests to hidden files. </li>
  <li> There is no business use cases linked to serve files in <code>.name</code> format but the server is not configured to reject requests to this
  type of files. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Disable the serving of hidden files. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p><a href=""https://www.npmjs.com/package/serve-static"">Express.js serve-static</a> middleware:</p>
<pre>
let serveStatic = require(""serve-static"");
let app = express();
let serveStaticMiddleware = serveStatic('public', { 'index': false, 'dotfiles': 'allow'});   // Sensitive
app.use(serveStaticMiddleware);
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/serve-static"">Express.js serve-static</a> middleware:</p>
<pre>
let serveStatic = require(""serve-static"");
let app = express();
let serveStaticMiddleware = serveStatic('public', { 'index': false, 'dotfiles': 'ignore'});   // Compliant: ignore or deny are recommended values
let serveStaticDefault = serveStatic('public', { 'index': false});   // Compliant: by default, ""dotfiles"" (file or directory that begins with a dot) are not served (with the exception that files within a directory that begins with a dot are not ignored), see serve-static module documentation
app.use(serveStaticMiddleware);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/mtojek/go-url-fuzzer"">github.com/mtojek/go-url-fuzzer</a> - Discover hidden files and directories on a web server.
  </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Web Top 10 2017 Category A6</a> - Security
  Misconfiguration. </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/538.html"">CWE-538</a> - File and Directory Information Exposure </li>
</ul>",MAJOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S1656,Variables should not be self-assigned,"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function setName(name) {
    name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function setName(name) {
    this.name = name;
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S1536,Function argument names should be unique,"<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument
hides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so theyâ€™re not completely
inaccessible).</p>
<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring
arguments with the same name produces an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function compute(a, a, c) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function compute(a, b, c) { // Compliant
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S1537,Trailing commas should not be used,"<p>Most browsers parse and discard a meaningless, trailing comma. Unfortunately, thatâ€™s not the case for Internet Explorer below version 9, which
throws a meaningless error. Therefore trailing commas should be eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab,    // Noncompliant - trailing comma
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab
};
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S2068,Hard-coded credentials are security-sensitive,"<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true
for applications that are distributed or that are open-source.</p>
<p>In the past, it has led to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>
</ul>
<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>
<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection
strings, and for variable names that match any of the patterns from the provided list.</p>
<p>Itâ€™s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", â€¦â€‹</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Credentials allows access to a sensitive component like a database, a file storage, an API or a service. </li>
  <li> Credentials are used in production environments. </li>
  <li> Application re-distribution is required before updating the credentials. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>
  <li> Store the credentials in a database. </li>
  <li> Use your cloud providerâ€™s service for managing secrets. </li>
  <li> If the a password has been disclosed through the source code: change it. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
var mysql = require('mysql');

var connection = mysql.createConnection(
{
  host:'localhost',
  user: ""admin"",
  database: ""project"",
  password: ""mypassword"", // sensitive
  multipleStatements: true
});

connection.connect();
</pre>
<h2>Compliant Solution</h2>
<pre>
var mysql = require('mysql');

var connection = mysql.createConnection({
  host: process.env.MYSQL_URL,
  user: process.env.MYSQL_USERNAME,
  password: process.env.MYSQL_PASSWORD,
  database: process.env.MYSQL_DATABASE
});
connection.connect();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>
</ul>",BLOCKER,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5332,Using clear-text protocols is security-sensitive,"<p>Clear-text protocols as <code>ftp</code>, <code>telnet</code> or non secure <code>http</code> are lacking encryption of transported data. They are
also missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify
or corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:</p>
<ul>
  <li> Sensitive data exposure </li>
  <li> Traffic redirected to a malicious endpoint </li>
  <li> Malware infected software update or installer </li>
  <li> Execution of client side code </li>
  <li> Corruption of critical information </li>
</ul>
<p>Note also that using the <code>http</code> protocol is being deprecated by <a
href=""https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http"">major web browser</a>.</p>
<p>In the past, it has led to the following vulnerabilities:</p>
<ul>
  <li> <a href=""https://nvd.nist.gov/vuln/detail/CVE-2019-6169"">CVE-2019-6169</a> </li>
  <li> <a href=""https://nvd.nist.gov/vuln/detail/CVE-2019-12327"">CVE-2019-12327</a> </li>
  <li> <a href=""https://nvd.nist.gov/vuln/detail/CVE-2019-11065"">CVE-2019-11065</a> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The confidentiality and integrity of data is necessary in the context of the web application. </li>
  <li> The data is exchanged on an exposed network (Internet, public network etc). </li>
  <li> Your application renders web pages with a relaxed mixed content policy. </li>
  <li> OS level protections against clear-text traffic are deactivated. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use <code>ssh</code> as an alternative to <code>telnet</code> </li>
  <li> Use <code>sftp</code>, <code>scp</code> or <code>ftps</code> instead of <code>ftp</code> </li>
  <li> Use <code>https</code> instead of <code>http</code> </li>
  <li> Use <code>SMTP</code> over <code>SSL/TLS</code> or <code>SMTP</code> with <code>STARTTLS</code> instead of clear-text SMTP </li>
  <li> Configure your application to block mixed content when rendering web pages. </li>
  <li> If available, enforce OS level deativation of all clear-text traffic </li>
</ul>
<p>It is recommended to secure all transport channels (event local network) as it can take a single non secure connection to compromise an entire
application or system.</p>
<h2>Sensitive Code Example</h2>
<pre>
url = ""http://example.com""; // Sensitive
url = ""ftp://anonymous@example.com""; // Sensitive
url = ""telnet://anonymous@example.com""; // Sensitive
</pre>
<p>For <a href=""https://nodemailer.com"">nodemailer</a>:</p>
<pre>
const nodemailer = require(""nodemailer"");
let transporter = nodemailer.createTransport({
  secure: false, // Sensitive
  requireTLS: false // Sensitive
});
</pre>
<pre>
const nodemailer = require(""nodemailer"");
let transporter = nodemailer.createTransport({}); // Sensitive
</pre>
<p>For <a href=""https://github.com/mscdex/node-ftp"">ftp</a>:</p>
<pre>
var Client = require('ftp');
var c = new Client();
c.connect({
  'secure': false // Sensitive
});
</pre>
<p>For <a href=""https://github.com/mkozjak/node-telnet-client"">telnet-client</a>:</p>
<pre>
const Telnet = require('telnet-client'); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<pre>
url = ""https://example.com""; // Compliant
url = ""sftp://anonymous@example.com""; // Compliant
url = ""ssh://anonymous@example.com""; // Compliant
</pre>
<p>For <a href=""https://nodemailer.com"">nodemailer</a> one of the following options must be set:</p>
<pre>
const nodemailer = require(""nodemailer"");
let transporter = nodemailer.createTransport({
  secure: true, // Compliant
  requireTLS: true, // Compliant
  port: 465, // Compliant
  secured: true // Compliant
});
</pre>
<p>For <a href=""https://github.com/mscdex/node-ftp"">ftp</a>:</p>
<pre>
var Client = require('ftp');
var c = new Client();
c.connect({
  'secure': true // Compliant
});
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or <code>localhost</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements"">Mobile AppSec Verification
  Standard</a> - Network Communication Requirements </li>
  <li> <a href=""https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication"">OWASP Mobile Top 10 2016 Category M3</a> - Insecure
  Communication </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/319"">MITRE, CWE-319</a> - Cleartext Transmission of Sensitive Information </li>
  <li> <a href=""https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html"">Google, Moving towards more secure web</a> </li>
  <li> <a href=""https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/"">Mozilla, Deprecating non secure http</a> </li>
</ul>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S4123,"""await"" should only be used with promises","<p>It is possible to use <code>await</code> on values which are not <code>Promise</code>s, but itâ€™s useless and misleading. The point of
<code>await</code> is to pause execution until the <code>Promise</code>'s asynchronous code has run to completion. With anything other than a
<code>Promise</code>, thereâ€™s nothing to wait for.</p>
<p>This rule raises an issue when an <code>await</code>ed value is guaranteed not to be a <code>Promise</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = 42;
await x; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = new Promise(resolve =&gt; resolve(42));
await x;

let y = p ? 42 : new Promise(resolve =&gt; resolve(42));
await y;
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S6299,Disabling Vue.js built-in escaping is security-sensitive,"<p>Vue.js framework prevents XSS vulnerabilities by automatically escaping HTML contents with the use of native API browsers like
<code>innerText</code> instead of <code>innerHtml</code>.</p>
<p>Itâ€™s still possible to explicity use <code>innerHtml</code> and similar APIs to render HTML. Accidentally rendering malicious HTML data will
introduce an XSS vulnerability in the application and enable a wide range of serious attacks like accessing/modifying sensitive information or
impersonating other users.</p>
<h2>Ask Yourself Whether</h2>
<p>The application needs to render HTML content which:</p>
<ul>
  <li> could be user controlled and not previously sanitized. </li>
  <li> is difficult to understand how it was constructed. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid injecting HTML content with <code>v-html</code> directive unless the content can be considered 100% safe, instead try to rely as much as
  possible on built-in auto-escaping Vue.js features. </li>
  <li> Take care when using the <code>v-bind:href</code> directive to set URLs which can contain malicious Javascript
  (<code>javascript:onClick(...)</code>). </li>
  <li> Event directives like <code>:onmouseover</code> are also prone to Javascript injection and should not be used with unsafe values. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>When using Vue.js templates, the <code>v-html</code> directive enables HTML rendering without any sanitization:</p>
<pre>
&lt;div v-html=""htmlContent""&gt;&lt;/div&gt; &lt;!-- Noncompliant --&gt;
</pre>
<p>When using a rendering function, the <code>innerHTML</code> attribute enables HTML rendering without any sanitization:</p>
<pre>
Vue.component('element', {
  render: function (createElement) {
    return createElement(
      'div',
      {
        domProps: {
          innerHTML: this.htmlContent, // Noncompliant
        }
      }
    );
  },
});
</pre>
<p>When using JSX, the <code>domPropsInnerHTML</code> attribute enables HTML rendering without any sanitization:</p>
<pre>
&lt;div domPropsInnerHTML={this.htmlContent}&gt;&lt;/div&gt; &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<p>When using Vue.js templates, putting the content as a child node of the element is safe:</p>
<pre>
&lt;div&gt;{{ htmlContent }}&lt;/div&gt;
</pre>
<p>When using a rendering function, using the <code>innerText</code> attribute or putting the content as a child node of the element is safe:</p>
<pre>
Vue.component('element', {
  render: function (createElement) {
    return createElement(
      'div',
      {
        domProps: {
          innerText: this.htmlContent,
        }
      },
      this.htmlContent // Child node
    );
  },
});
</pre>
<p>When using JSX, putting the content as a child node of the element is safe:</p>
<pre>
&lt;div&gt;{this.htmlContent}&lt;/div&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017 Category A7</a> - Cross-Site
  Scripting (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/80.html"">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/83.html"">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/84.html"">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
  <li> <a href=""https://vuejs.org/v2/guide/security.html#Injecting-HTML"">Vue.js - Security - Injecting HTML</a> </li>
</ul>",BLOCKER,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S930,Function calls should not pass extra arguments,"<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function
execution.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function say(a, b) {
  print(a + "" "" + b);
}

say(""hello"", ""world"", ""!""); // Noncompliant; last argument is not used
</pre>
<h2>Exceptions</h2>
<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>
<pre>
function doSomething(a, b) {
  compute(arguments);
}

doSomething(1, 2, 3) // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/628.html"">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>
</ul>",CRITICAL,JavaScript,BUG,FALSE
javascript:S138,Functions should not have too many lines of code,"<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>
<h2>Exceptions</h2>
<p>This function ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned
a name.</p>
<pre>
(function () { // Ignored by this rule

  function open() {  // Classic function declaration; not ignored
    // ...
  }

  function read() {
    // ...
  }

  function readlines() {
    // ...
  }
})();
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5527,Server hostnames should be verified during SSL/TLS connections,"<p>To establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, itâ€™s essential to make sure the server presents the right
certificate.</p>
<p>The certificateâ€™s hostname-specific data should match the server hostname.</p>
<p>Itâ€™s not recommended to re-invent the wheel by implementing custom hostname verification.</p>
<p>TLS/SSL libraries provide built-in hostname verification functions that should be used.</p>
<h2>Noncompliant Code Example</h2>
<p><a href=""https://nodejs.org/api/https.html"">https</a> built-in module:</p>
<pre>
let options = {
  hostname: 'www.example.com',
  port: 443,
  path: '/',
  method: 'GET',
  secureProtocol: 'TLSv1_2_method',
  checkServerIdentity: function() {} // Noncompliant: hostname is not verified
};

let req = https.request(options, (res) =&gt; {
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
}); // Noncompliant
</pre>
<p><a href=""https://nodejs.org/api/tls.html"">tls</a> built-in module:</p>
<pre>
let options = {
    secureProtocol: 'TLSv1_2_method',
    checkServerIdentity: function() {}  // Noncompliant: hostname is not verified
};

let socket = tls.connect(443, ""www.example.com"", options, () =&gt; {
  process.stdin.pipe(socket);
  process.stdin.resume();
});  // Noncompliant
</pre>
<p><a href=""https://www.npmjs.com/package/request"">request</a> module:</p>
<pre>
let socket = request.get({
    url: 'https://www.example.com',
    secureProtocol: 'TLSv1_2_method',
    checkServerIdentity: function() {}  // Noncompliant: hostname is not verified
});
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://nodejs.org/api/https.html"">https</a> built-in module:</p>
<pre>
let options = {
  hostname: 'www.example.com',
  port: 443,
  path: '/',
  method: 'GET',
  secureProtocol: 'TLSv1_2_method'
};

let req = https.request(options, (res) =&gt; {
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
}); // Compliant: default checkServerIdentity function is secure
</pre>
<p><a href=""https://nodejs.org/api/tls.html"">tls</a> built-in module:</p>
<pre>
let options = {
    secureProtocol: 'TLSv1_2_method',
    checkServerIdentity: (servername, peer) =&gt; {
        if (servername !== ""www.example.com"") {
            return new Error ('Error');  // Compliant: there is at least one check
        }
    }
};

let socket = tls.connect(443, ""www.example.com"", options, () =&gt; {
  process.stdin.pipe(socket);
  process.stdin.resume();
}); // Compliant
</pre>
<p><a href=""https://www.npmjs.com/package/request"">request</a> module:</p>
<pre>
let socket = request.get({
    url: 'https://www.example.com/',
    secureProtocol: 'TLSv1_2_method' // Compliant
}); // Compliant:  default checkServerIdentity function is secure
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements"">Mobile AppSec Verification
  Standard</a> - Network Communication Requirements </li>
  <li> <a href=""https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication"">OWASP Mobile Top 10 2016 Category M3</a> - Insecure
  Communication </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/297.html"">MITRE, CWE-297</a> - Improper Validation of Certificate with Host Mismatch </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S1848,Objects should not be created to be dropped immediately without being used,"<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could
lead to an unexpected behavior in production.</p>
<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called
directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new MyConstructor(); // Non-Compliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var something = new MyConstructor();  // Compliant
</pre>
<h2>Exceptions</h2>
<p>Immediately dropped new objects inside <code>try</code>-statements are ignored.</p>
<pre>
try {
  new MyConstructor();
} catch (e) {
  /* ... */
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S2376,Property getters and setters should come in pairs,"<p>When an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus
useless.</p>
<p>This rule also enforces the reverse situation (getter but no setter).</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj = {
    set foo(value) {
        this.fooval = value;
    }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = {
    set foo(value) {
        this.fooval = value;
    },
    get foo() {
        return this.fooval;
    }
};
</pre>
<p>or</p>
<pre>
var obj = {
    setFoo(value) {    // a standard method, not a setter
        this.fooval = value;
    }
};
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2259,"Properties of variables with ""null"" or ""undefined"" values should not be accessed","<p>When a variable is assigned an <code>undefined</code> or <code>null</code> value, it has no properties. Trying to access properties of such a
variable anyway results in a <code>TypeError</code>, causing abrupt termination of the script if the error is not caught in a <code>catch</code>
block. But instead of <code>catch</code>-ing this condition, it is best to avoid it altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x === undefined) {
  console.log(x.bar); // Noncompliant; TypeError will be thrown
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/476.html"">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
</ul>",MAJOR,JavaScript,BUG,FALSE
javascript:S2137,Special identifiers should not be bound or assigned,"<p>JavaScript has special identifiers that, while not reserved, still should not be used as identifiers. They include:</p>
<ul>
  <li> <code>eval</code> - evaluates a string as JavaScript code </li>
  <li> <code>arguments</code> - used to access function arguments through indexed properties. </li>
  <li> <code>undefined</code> - returned for values and properties that have not yet been assigned </li>
  <li> <code>NaN</code> - Not a Number; returned when math functions fail. </li>
  <li> <code>Infinity</code> - when a number exceeds the upper limit of the floating point numbers </li>
</ul>
<p>These words should not be bound or assigned, because doing so would overwrite the original definitions of these identifiers. Whatâ€™s more, assigning
or binding some of these names will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval = 17; // Noncompliant
arguments++; // Noncompliant
++eval; // Noncompliant
var obj = { set p(arguments) { } }; // Noncompliant
var eval; // Noncompliant
try { } catch (arguments) { } // Noncompliant
function x(eval) { } // Noncompliant
function arguments() { } // Noncompliant
var y = function eval() { }; // Noncompliant
var f = new Function(""arguments"", ""return 17;""); // Noncompliant

function fun() {
  if (arguments.length == 0) { // Compliant
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
result = 17;
args++;
++result;
var obj = { set p(arg) { } };
var result;
try { } catch (args) { }
function x(arg) { }
function args() { }
var y = function fun() { };
var f = new Function(""args"", ""return 17;"");

function fun() {
  if (arguments.length == 0) {
    // do something
  }
}
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S124,Track comments matching a regular expression,"<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression&nbsp;<code>.*REVIEW.*</code>&nbsp;to match all comment containing ""REVIEW"".</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5759,Forwarding client IP address is security-sensitive,"<p>Users often connect to web servers through HTTP proxies.</p>
<p>Proxy can be configured to forward the client IP address via the <code>X-Forwarded-For</code> or <code>Forwarded</code> HTTP headers.</p>
<p>IP address is a personal information which can identify a single user and thus impact his privacy.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The web application uses reverse proxies or similar but doesnâ€™t need to know the IP address of the user. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>User IP address should not be forwarded unless the application needs it, as part of an authentication, authorization scheme or log management for
examples.</p>
<h2>Sensitive Code Example</h2>
<p><a href=""https://github.com/http-party/node-http-proxy"">node-http-proxy</a></p>
<pre>
var httpProxy = require('http-proxy');

httpProxy.createProxyServer({target:'http://localhost:9000', xfwd:true}) // Noncompliant
  .listen(8000);
</pre>
<p><a href=""https://github.com/chimurai/http-proxy-middleware"">http-proxy-middleware</a></p>
<pre>
var express = require('express');

const { createProxyMiddleware } = require('http-proxy-middleware');

const app = express();

app.use('/proxy', createProxyMiddleware({ target: 'http://localhost:9000', changeOrigin: true, xfwd: true })); // Noncompliant
app.listen(3000);
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://github.com/http-party/node-http-proxy"">node-http-proxy</a></p>
<pre>
var httpProxy = require('http-proxy');

// By default xfwd option is false
httpProxy.createProxyServer({target:'http://localhost:9000'}) // Compliant
  .listen(8000);
</pre>
<p><a href=""https://github.com/chimurai/http-proxy-middleware"">http-proxy-middleware</a></p>
<pre>
var express = require('express');

const { createProxyMiddleware } = require('http-proxy-middleware');

const app = express();

// By default xfwd option is false
app.use('/proxy', createProxyMiddleware({ target: 'http://localhost:9000', changeOrigin: true})); // Compliant
app.listen(3000);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html"">OWASP Top 10 2017 Category
  A3</a> - Sensitive Data Exposure </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For"">developer.mozilla.org</a> - X-Forwarded-For </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S3330,"Creating cookies without the ""HttpOnly"" flag is security-sensitive","<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will
be able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and itâ€™s up to the developer
to decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target
the theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it wonâ€™t be possible to exploit the XSS
vulnerability to steal session-cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>
  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)
  </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and itâ€™s mandatory for session /
  sensitive-security cookies. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p><a href=""https://www.npmjs.com/package/cookie-session"">cookie-session</a> module:</p>
<pre>
let session = cookieSession({
  httpOnly: false,// Sensitive
});  // Sensitive
</pre>
<p><a href=""https://www.npmjs.com/package/express-session"">express-session</a> module:</p>
<pre>
const express = require('express'),
const session = require('express-session'),

let app = express()
app.use(session({
  cookie:
  {
    httpOnly: false // Sensitive
  }
})),
</pre>
<p><a href=""https://www.npmjs.com/package/cookies"">cookies</a> module:</p>
<pre>
let cookies = new Cookies(req, res, { keys: keys });

cookies.set('LastVisit', new Date().toISOString(), {
  httpOnly: false // Sensitive
}); // Sensitive
</pre>
<p><a href=""https://www.npmjs.com/package/csurf"">csurf</a> module:</p>
<pre>
const cookieParser = require('cookie-parser');
const csrf = require('csurf');
const express = require('express');

let csrfProtection = csrf({ cookie: { httpOnly: false }}); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/cookie-session"">cookie-session</a> module:</p>
<pre>
let session = cookieSession({
  httpOnly: true,// Compliant
});  // Compliant
</pre>
<p><a href=""https://www.npmjs.com/package/express-session"">express-session</a> module:</p>
<pre>
const express = require('express');
const session = require('express-session');

let app = express();
app.use(session({
  cookie:
  {
    httpOnly: true // Compliant
  }
}));
</pre>
<p><a href=""https://www.npmjs.com/package/cookies"">cookies</a> module:</p>
<pre>
let cookies = new Cookies(req, res, { keys: keys });

cookies.set('LastVisit', new Date().toISOString(), {
  httpOnly: true // Compliant
}); // Compliant
</pre>
<p><a href=""https://www.npmjs.com/package/csurf"">csurf</a> module:</p>
<pre>
const cookieParser = require('cookie-parser');
const csrf = require('csurf');
const express = require('express');

let csrfProtection = csrf({ cookie: { httpOnly: true }}); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/HttpOnly"">OWASP HttpOnly</a> </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017 Category A7</a> - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/79.html"">CWE-79</a> - Improper Neutralization of Input During Web Page Generation ('Cross-site
  Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/1004.html"">CWE-1004</a> - Sensitive Cookie Without 'HttpOnly' Flag </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE"">HTTPONLY_COOKIE</a> </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S134,"Control flow statements ""if"", ""for"", ""while"", ""switch"" and ""try"" should not be nested too deeply","<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
whatâ€™s known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant - depth = 1
    /* ... */
    if (condition2) {                // Compliant - depth = 2
      /* ... */
      for(let i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
        /* ... */
        if (condition4) {            // Non-Compliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            /* ... */
          }
          return;
        }
      }
    }
  }
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S3696,Literals should not be thrown,"<p>It is a bad practice to <code>throw</code> something thatâ€™s not derived at some level from <code>Error</code>. If you canâ€™t find an existing
<code>Error</code> type that suitably conveys what you need to convey, then you should extend <code>Error</code> to create one.</p>
<p>Specifically, part of the point of throwing <code>Error</code>s is to communicate about the conditions of the error, but literals have far less
ability to communicate meaningfully than <code>Error</code>s because they donâ€™t include stacktraces.</p>
<h2>Noncompliant Code Example</h2>
<pre>
throw 404;                              // Noncompliant
throw ""Invalid negative index."";        // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
throw new Error(""Status: "" + 404);
throw new Error(""Invalid negative index."");{code}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1154,Results of operations on strings should not be ignored,"<p>Doing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var str = ""...""
str.toUpperCase(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var str = ""...""
str = str.toUpperCase();
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S2201} instead.</p>",MAJOR,JavaScript,BUG,FALSE
javascript:S5757,Allowing confidential information to be logged is security-sensitive,"<p>Log management is an important topic, especially for the security of a web application, to ensure user activity, including potential attackers, is
recorded and available for an analyst to understand whatâ€™s happened on the web application in case of malicious activities.</p>
<p>Retention of specific logs for a defined period of time is often necessary to comply with regulations such as GDPR, <a
href=""https://www.pcisecuritystandards.org/documents/Effective-Daily-Log-Monitoring-Guidance.pdf"">PCI DSS</a> and others. However, to protect userâ€™s
privacy, certain informations are forbidden or strongly discouraged from being logged, such as user passwords or credit card numbers, which obviously
should not be stored or at least not in clear text.</p>
<h2>Ask Yourself Whether</h2>
<p>In a production environment:</p>
<ul>
  <li> The web application uses confidential information and logs a significant amount of data. </li>
  <li> Logs are externalized to SIEM or Big Data repositories. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Loggers should be configured with a list of confidential, personal information that will be hidden/masked or removed from logs.</p>
<h2>Sensitive Code Example</h2>
<p>With <a href=""https://www.npmjs.com/package/signale"">Signale log management framework</a> the code is sensitive when an empty list of secrets is
defined:</p>
<pre>
const { Signale } = require('signale');

const CREDIT_CARD_NUMBERS = fetchFromWebForm()
// here we suppose the credit card numbers are retrieved somewhere and CREDIT_CARD_NUMBERS looks like [1234-5678-0000-9999"", ""1234-5678-0000-8888""]; for instance

const options = {
  secrets: []         // empty list of secrets
};

const logger = new Signale(options); // Sensitive

CREDIT_CARD_NUMBERS.forEach(function(CREDIT_CARD_NUMBER) {
  logger.log('The customer ordered products with the credit card number = %s', CREDIT_CARD_NUMBER);
});
</pre>
<h2>Compliant Solution</h2>
<p>With <a href=""https://www.npmjs.com/package/signale"">Signale log management framework</a> it is possible to define a list of secrets that will be
hidden in logs:</p>
<pre>
const { Signale } = require('signale');

const CREDIT_CARD_NUMBERS = fetchFromWebForm()
// here we suppose the credit card numbers are retrieved somewhere and CREDIT_CARD_NUMBERS looks like [1234-5678-0000-9999"", ""1234-5678-0000-8888""]; for instance

const options = {
  secrets: [""([0-9]{4}-?)+""]
};

const logger = new Signale(options); // Compliant

CREDIT_CARD_NUMBERS.forEach(function(CREDIT_CARD_NUMBER) {
  logger.log('The customer ordered products with the credit card number = %s', CREDIT_CARD_NUMBER);
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/532.html"">CWE-532</a> - Insertion of Sensitive Information into Log File </li>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html"">OWASP Top 10 2017 Category
  A3</a> - Sensitive Data Exposure </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S4426,Cryptographic keys should be robust,"<p>Most of cryptographic systems require a sufficient key size to be robust against brute-force attacks.</p>
<p><a href=""https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf"">NIST recommendations</a> will be checked for these
use-cases:</p>
<p><strong>Digital Signature Generation</strong> and <strong>Verification:</strong></p>
<ul>
  <li> p â‰¥ 2048 AND q â‰¥ 224 for DSA (<code>p</code> is key length and <code>q</code> the modulus length) </li>
  <li> n â‰¥ 2048 for RSA (<code>n</code> is the key length) </li>
</ul>
<p><strong>Key Agreement</strong>:</p>
<ul>
  <li> p â‰¥ 2048 AND q â‰¥ 224 for DH and MQV </li>
  <li> n â‰¥ 224 for ECDH and ECMQV (Examples: <code>secp192r1</code> is a non-compliant curve (<code>n</code> &lt; 224) but <code>secp224k1</code> is
  compliant (<code>n</code> &gt;= 224)) </li>
</ul>
<p><strong>Symmetric keys</strong>:</p>
<ul>
  <li> key length â‰¥ 128 bits </li>
</ul>
<p>This rule will not raise issues for ciphers that are considered weak (no matter the key size) like <code>DES</code>, <code>Blowfish</code>.</p>
<h2>Noncompliant Code Example</h2>
<p><a href=""https://nodejs.org/api/crypto.html"">crypto</a> built-in module:</p>
<pre>
var { privateKey, publicKey } = crypto.generateKeyPairSync('rsa', {
  modulusLength: 1024,  // Noncompliant
  publicKeyEncoding:  { type: 'spki', format: 'pem' },
  privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
}); // Noncompliant: 1024 bits is too short for a RSA key pair

crypto.generateKeyPair('ec', {
  namedCurve: 'secp112r2',
  publicKeyEncoding:  { type: 'spki', format: 'pem' },
  privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
}, callback); // Noncompliant: secp112r2 curve doesn't provide enough security
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://nodejs.org/api/crypto.html"">crypto</a> built-in module:</p>
<pre>
crypto.generateKeyPair('rsa', {
  modulusLength: 2048,  // Compliant
  publicKeyEncoding:  { type: 'spki', format: 'pem' },
  privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
}, callback); // Compliant

crypto.generateKeyPair('ec', {
  namedCurve: 'secp224k1',
  publicKeyEncoding:  { type: 'spki', format: 'pem' },
  privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
}, callback); // compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements"">Mobile AppSec
  Verification Standard</a> - Cryptography Requirements </li>
  <li> <a href=""https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography"">OWASP Mobile Top 10 2016 Category M5</a> -
  Insufficient Cryptography </li>
  <li> <a href=""https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf"">NIST 800-131A</a> - Recommendation for Transitioning the
  Use of Cryptographic Algorithms and Key Lengths </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S4423,Weak SSL/TLS protocols should not be used,"<p>This rule raises an issue when an insecure TLS protocol version (i.e. a protocol different from ""TLSv1.2"", ""TLSv1.3"", ""DTLSv1.2"", or ""DTLSv1.3"") is
used or allowed.</p>
<p>It is recommended to enforce TLS 1.2 as the minimum protocol version and to disallow older versions like TLS 1.0. Failure to do so could open the
door to downgrade attacks: a malicious actor who is able to intercept the connection could modify the requested protocol version and downgrade it to a
less secure version.</p>
<h2>Noncompliant Code Example</h2>
<p><code>secureProtocol</code>, <code>minVersion</code>/<code>maxVersion</code> and <code>secureOptions</code> should not be set to use weak TLS
protocols (TLSv1.1 and lower):</p>
<pre>
let options = {
  secureProtocol: 'TLSv1_method' // Noncompliant: TLS1.0 is insecure
};

let options = {
  minVersion: 'TLSv1.1',  // Noncompliant: TLS1.1 is insecure
  maxVersion: 'TLSv1.2'
};

let options = {
  secureOptions: constants.SSL_OP_NO_SSLv2 | constants.SSL_OP_NO_SSLv3 | constants.SSL_OP_NO_TLSv1
}; // Noncompliant TLS 1.1 (constants.SSL_OP_NO_TLSv1_1) is not disabled
</pre>
<p><a href=""https://nodejs.org/api/https.html"">https</a> built-in module:</p>
<pre>
let req = https.request(options, (res) =&gt; {
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
});  // Noncompliant
</pre>
<p><a href=""https://nodejs.org/api/tls.html"">tls</a> built-in module:</p>
<pre>
let socket = tls.connect(443, ""www.example.com"", options, () =&gt; { });  // Noncompliant
</pre>
<p><a href=""https://www.npmjs.com/package/request"">request</a> module:</p>
<pre>
let socket = request.get(options);
</pre>
<h2>Compliant Solution</h2>
<p>Set either <code>secureProtocol</code> or <code>secureOptions</code> or <code>minVersion</code> to use secure protocols only (TLSv1.2 and
higher):</p>
<pre>
let options = {
  secureProtocol: 'TLSv1_2_method'
};
// or
let options = {
  secureOptions: constants.SSL_OP_NO_SSLv2 | constants.SSL_OP_NO_SSLv3 | constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1
};
// or
let options = {
    minVersion: 'TLSv1.2'
};
</pre>
<p><a href=""https://nodejs.org/api/https.html"">https</a> built-in module:</p>
<pre>
let req = https.request(options, (res) =&gt; {
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
});  // Compliant
</pre>
<p><a href=""https://nodejs.org/api/tls.html"">tls</a> built-in module:</p>
<pre>
let socket = tls.connect(443, ""www.example.com"", options, () =&gt; { });
</pre>
<p><a href=""https://www.npmjs.com/package/request"">request</a> module:</p>
<pre>
let socket = request.get(options);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements"">Mobile AppSec Verification
  Standard</a> - Network Communication Requirements </li>
  <li> <a href=""https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication"">OWASP Mobile Top 10 2016 Category M3</a> - Insecure
  Communication </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols"">SSL and TLS Deployment Best
  Practices - Use secure protocols</a> </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S4787,Encrypting data is security-sensitive,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p>This rule flags function calls that initiate encryption/decryption.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and itâ€™s IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IVâ€™s purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesnâ€™t provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul>  </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
// === Client side ===
crypto.subtle.encrypt(algo, key, plainData); // Sensitive
crypto.subtle.decrypt(algo, key, encData); // Sensitive
</pre>
<pre>
// === Server side ===
const crypto = require(""crypto"");
const cipher = crypto.createCipher(algo, key); // Sensitive
const cipheriv = crypto.createCipheriv(algo, key, iv); // Sensitive
const decipher = crypto.createDecipher(algo, key); // Sensitive
const decipheriv = crypto.createDecipheriv(algo, key, iv); // Sensitive
const pubEnc = crypto.publicEncrypt(key, buf); // Sensitive
const privDec = crypto.privateDecrypt({ key: key, passphrase: secret }, pubEnc); // Sensitive
const privEnc = crypto.privateEncrypt({ key: key, passphrase: secret }, buf); // Sensitive
const pubDec = crypto.publicDecrypt(key, privEnc); // Sensitive
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S4426}, {rule:javascript:S5542}, {rule:javascript:S5547} instead.</p>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5876,A new session should be created during user authentication,"<p>Session fixation attacks occur when an attacker can force a legitimate user to use a session ID that he knows. To avoid fixation attacks, itâ€™s a
good practice to generate a new session each time a user authenticates and delete/invalidate the existing session (the one possibly known by the
attacker).</p>
<h2>Noncompliant Code Example</h2>
<p>For <a href=""http://www.passportjs.org/"">Passport.js</a>:</p>
<pre>
app.post('/login',
  passport.authenticate('local', { failureRedirect: '/login' }),
  function(req, res) {
    // Sensitive - no session.regenerate after login
    res.redirect('/');
  });
</pre>
<h2>Compliant Solution</h2>
<p>For <a href=""http://www.passportjs.org/"">Passport.js</a>:</p>
<pre>
app.post('/login',
  passport.authenticate('local', { failureRedirect: '/login' }),
  function(req, res) {
    let prevSession = req.session;
    req.session.regenerate((err) =&gt; {  // Compliant
      Object.assign(req.session, prevSession);
      res.redirect('/');
    });
  });
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> -
  Broken Authentication </li>
  <li> <a href=""https://www.owasp.org/index.php/Session_fixation"">OWASP Sesssion Fixation</a> </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/384.html"">MITRE, CWE-384</a> - Session Fixation </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S6079,"Tests should not execute any code after ""done()"" is called","<p>The <code>done</code> callback is used to inform Mocha when an asynchronous test ends. Exceptions thrown after <code>done</code> (with or without
parameters) is called are not handled in a consistent manner. Sometimes they will be correctly handled, but they might as well be assigned to a
different test, no test at all, or even be completely ignored. Even when it works as expected this will be a source of confusion for other developers.
Thus no code should be executed after <code>done</code> is called.</p>
<p>This rule raises an issue when some code is executed after a call to <code>done</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const expect = require(""chai"").expect;
const fs = require(""fs"");

describe(""Code is executed after Done"", function() {
    it(""Has asserts after done()"", function(done) {
        try {
            expect(1).toEqual(2);
        } catch (err) {
            done();
            // This assertion will be ignored and the test will pass.
            expect(err).to.be.an.instanceof(RangeError);  // Noncompliant
        }
    });

    it(""Throws an error some time after done()"", function(done) {
        fs.readFile(""/etc/bashrc"", 'utf8', function(err, data) {
            done();
            setTimeout(() =&gt; {  // Noncompliant
                // This assertion error will not be assigned to any test.
                // Developers will have to guess which test failed.
                expect(data).to.match(/some expected string/);
            }, 3000);
        });
    });

    it(""Has code after done(err)"", function(done) {
        try {
            throw Error(""An error"");
        } catch (err) {
            done(err);
        }
        fs.readFile(""/etc/bashrc"", 'utf8', function(err, data) {  // Noncompliant
            // This assertion error will be assigned to ""Other test"".
            expect(data).to.match(/some expected string/);
        });
    });

    it(""Other test"", function(done) {
        done()
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const expect = require(""chai"").expect;
const fs = require(""fs"");

describe(""Code is executed after Done"", function() {
    it(""Has asserts after done()"", function(done) {
        try {
            expect(1).toEqual(2);
        } catch (err) {
            expect(err).to.be.an.instanceof(RangeError);
            done();
        }
    });

    it(""Throws an error some time after done()"", function(done) {
        fs.readFile(""/etc/bashrc"", 'utf8', function(err, data) {
            setTimeout(() =&gt; {
                expect(data).to.match(/some expected string/);
                done();
            }, 3000);
        });
    });

    it(""Has code after done(err)"", function(done) {
        try {
            throw Error(""An error"");
        } catch (err) {
            return done(err);
        }
        fs.readFile(""/etc/bashrc"", 'utf8', function(err, data) {
            // This assertion error will be assigned to ""Other test"".
            expect(data).to.match(/some expected string/);
            done();
        });
    });

    it(""Other test"", function(done) {
        done()
    });
});
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S5542,Encryption algorithms should be used with secure mode and padding scheme,"<p>Encryption operation mode and the padding scheme should be chosen appropriately to guarantee data confidentiality, integrity and authenticity:</p>
<ul>
  <li> For block cipher encryption algorithms (like AES):
    <ul>
      <li> The GCM (Galois Counter Mode) mode which <a href=""https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis"">works
      internally</a> with zero/no padding scheme, is recommended, as it is designed to provide both data authenticity (integrity) and confidentiality.
      Other similar modes are CCM, CWC, EAX, IAPM and OCB. </li>
      <li> The CBC (Cipher Block Chaining) mode by itself provides only data confidentiality, itâ€™s recommended to use it along with Message
      Authentication Code or similar to achieve data authenticity (integrity) too and thus to <a
      href=""https://en.wikipedia.org/wiki/Padding_oracle_attack"">prevent padding oracle attacks</a>. </li>
      <li> The ECB (Electronic Codebook) mode doesnâ€™t provide serious message confidentiality: under a given key any given plaintext block always gets
      encrypted to the same ciphertext block. This mode should not be used. </li>
    </ul>  </li>
  <li> For RSA encryption algorithm, the recommended padding scheme is OAEP. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p><a href=""https://nodejs.org/api/crypto.html"">crypto</a> built-in module:</p>
<pre>
crypto.createCipheriv(""AES-128-CBC"", key, iv); // Noncompliant: CBC with PKCS5/7 (set by default) is vulnerable to oracle padding attacks
crypto.createCipheriv(""AES-128-ECB"", key, """"); // Noncompliant: ECB doesn't provide serious message confidentiality
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://nodejs.org/api/crypto.html"">crypto</a> built-in module:</p>
<pre>
crypto.createCipheriv(""AES-256-GCM"", key, iv);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S1067,Expressions should not be too complex,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expressionâ€™s complexity should not become too high to keep the code readable.</p>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S5547,Cipher algorithms should be robust,"<p><a href=""https://en.wikipedia.org/wiki/Strong_cryptography"">Strong cipher algorithms</a> are cryptographic systems resistant to cryptanalysis, they
are not vulnerable to well-known attacks like brute force attacks for example.</p>
<p>A general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.</p>
<p>More specifically for block cipher, itâ€™s not recommended to use algorithm with a block size inferior than 128 bits.</p>
<h2>Noncompliant Code Example</h2>
<p><a href=""https://nodejs.org/api/crypto.html"">crypto</a> built-in module:</p>
<pre>
crypto.createCipheriv(""DES"", key, iv); // Noncompliant: DES / 3DES is unsecure
crypto.createCipheriv(""DES-EDE"", key, """"); // Noncompliant: DES / 3DES is unsecure
crypto.createCipheriv(""DES-EDE3"", key, """"); // Noncompliant: DES / 3DES is unsecure
crypto.createCipheriv(""RC2"", key, iv); // Noncompliant: RC2 is vulnerable to a related-key attack
crypto.createCipheriv(""RC4"", key, """");// Noncompliant: RC4 is vulnerable to several attacks
crypto.createCipheriv(""BF"", key, iv);// Noncompliant: Blowfish use a 64-bit block size makes it vulnerable to birthday attacks
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://nodejs.org/api/crypto.html"">crypto</a> built-in module:</p>
<pre>
crypto.createCipheriv(""AES-256-GCM"", key, iv);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S1854,Unused assignments should be removed,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if itâ€™s not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>undefined</code>, [], {}, <code>true</code>, <code>false</code> and
<code>""""</code>. Variables that start with an underscore (e.g. '<code>_unused</code>') are ignored.</p>
<p>This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object):</p>
<pre>
let {a, b, ...rest} = obj; // 'a' and 'b' are ok
doSomething(rest);

let [x1, x2, x3] = arr;    // but 'x1' is noncompliant, as omitting syntax can be used: ""let [, x2, x3] = arr;""
doSomething(x2, x3);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/563.html"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5659,JWT should be signed and verified with strong cipher algorithms,"<p>If a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user
identities.</p>
<ul>
  <li> Donâ€™t use <code>none</code> algorithm to sign or verify the validity of a token. </li>
  <li> Donâ€™t use a token without verifying its signature before. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p><a href=""https://www.npmjs.com/package/jsonwebtoken"">jsonwebtoken</a> library:</p>
<pre>
const jwt = require('jsonwebtoken');

let token = jwt.sign({ foo: 'bar' }, key, { algorithm: 'none' }); // Noncompliant: 'none' cipher doesn't sign the JWT (no signature will be included)

jwt.verify(token, key, { expiresIn: 360000 * 5, algorithms: ['RS256', 'none'] }, callbackcheck); // Noncompliant: 'none' cipher should not be used when verifying JWT signature
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/jsonwebtoken"">jsonwebtoken</a> library:</p>
<pre>
const jwt = require('jsonwebtoken');

let token = jwt.sign({ foo: 'bar' }, key, { algorithm: 'HS256' }); // Compliant

jwt.verify(token, key, { expiresIn: 360000 * 5, algorithms: ['HS256'] }, callbackcheck); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/347.html"">MITRE, CWE-347</a> - Improper Verification of Cryptographic Signature </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S3353,"Unchanged variables should be marked ""const""","<p>Marking a variable that is unchanged after initialization <code>const</code> is an indication to future maintainers that ""no this isnâ€™t updated,
and itâ€™s not supposed to be"". <code>const</code> should be used in these situations in the interests of code clarity.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function seek(input) {
  let target = 32;  // Noncompliant
  for (let i of input) {  // Noncompliant
    if (i == target) {
      return true;
    }
  }
  return false;
}

function getUrl(query) { &nbsp;&nbsp;&nbsp;
  let&nbsp;url; // Noncompliant
  url = ""http://example.com"";
  return url;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function seek(input) {
  const target = 32;
  for (const i of input) {
    if (i == target) {
      return true;
    }
  }
  return false;
}

function getUrl(query) { &nbsp;
  const&nbsp;url = ""http://example.com"";
  return url;
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S5042,Expanding archive files without controlling resource consumption is security-sensitive,"<p>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can
lead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of
uncompressed data. To achieve this extreme <a href=""https://en.wikipedia.org/wiki/Data_compression_ratio"">compression ratio</a>, attackers will
compress irrelevant data (eg: a long string of repeated bytes).</p>
<h2>Ask Yourself Whether</h2>
<p>Archives to expand are untrusted and:</p>
<ul>
  <li> There is no validation of the number of entries in the archive. </li>
  <li> There is no validation of the total size of the uncompressed data. </li>
  <li> There is no validation of the ratio between the compressed and uncompressed archive entry. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is
  1 to 3. </li>
  <li> Define and control the threshold for maximum total size of the uncompressed data. </li>
  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in
  particular itâ€™s not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>For <a href=""https://github.com/npm/node-tar"">tar</a> module:</p>
<pre>
const tar = require('tar');

tar.x({ // Sensitive
  file: 'foo.tar.gz'
});
</pre>
<p>For <a href=""https://github.com/cthackers/adm-zip"">adm-zip</a> module:</p>
<pre>
const AdmZip = require('adm-zip');

let zip = new AdmZip(""./foo.zip"");
zip.extractAllTo("".""); // Sensitive
</pre>
<p>For <a href=""https://stuk.github.io/jszip/"">jszip</a> module:</p>
<pre>
const fs = require(""fs"");
const JSZip = require(""jszip"");

fs.readFile(""foo.zip"", function(err, data) {
  if (err) throw err;
  JSZip.loadAsync(data).then(function (zip) { // Sensitive
    zip.forEach(function (relativePath, zipEntry) {
      if (!zip.file(zipEntry.name)) {
        fs.mkdirSync(zipEntry.name);
      } else {
        zip.file(zipEntry.name).async('nodebuffer').then(function (content) {
          fs.writeFileSync(zipEntry.name, content);
        });
      }
    });
  });
});
</pre>
<p>For <a href=""https://github.com/thejoshwolfe/yauzl"">yauzl</a> module</p>
<pre>
const yauzl = require('yauzl');

yauzl.open('foo.zip', function (err, zipfile) {
  if (err) throw err;

  zipfile.on(""entry"", function(entry) {
    zipfile.openReadStream(entry, function(err, readStream) {
      if (err) throw err;
      // TODO: extract
    });
  });
});
</pre>
<p>For <a href=""https://github.com/maxogden/extract-zip"">extract-zip</a> module:</p>
<pre>
const extract = require('extract-zip')

async function main() {
  let target = __dirname + '/test';
  await extract('test.zip', { dir: target }); // Sensitive
}
main();
</pre>
<h2>Compliant Solution</h2>
<p>For <a href=""https://github.com/npm/node-tar"">tar</a> module:</p>
<pre>
const tar = require('tar');
const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB

let fileCount = 0;
let totalSize = 0;

tar.x({
  file: 'foo.tar.gz',
  filter: (path, entry) =&gt; {
    fileCount++;
    if (fileCount &gt; MAX_FILES) {
      throw 'Reached max. number of files';
    }

    totalSize += entry.size;
    if (totalSize &gt; MAX_SIZE) {
      throw 'Reached max. size';
    }

    return true;
  }
});
</pre>
<p>For <a href=""https://github.com/cthackers/adm-zip"">adm-zip</a> module:</p>
<pre>
const AdmZip = require('adm-zip');
const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB
const THRESHOLD_RATIO = 10;

let fileCount = 0;
let totalSize = 0;
let zip = new AdmZip(""./foo.zip"");
let zipEntries = zip.getEntries();
zipEntries.forEach(function(zipEntry) {
    fileCount++;
    if (fileCount &gt; MAX_FILES) {
        throw 'Reached max. number of files';
    }

    let entrySize = zipEntry.getData().length;
    totalSize += entrySize;
    if (totalSize &gt; MAX_SIZE) {
        throw 'Reached max. size';
    }

    let compressionRatio = entrySize / zipEntry.header.compressedSize;
    if (compressionRatio &gt; THRESHOLD_RATIO) {
        throw 'Reached max. compression ratio';
    }

    if (!zipEntry.isDirectory) {
        zip.extractEntryTo(zipEntry.entryName, ""."");
    }
});
</pre>
<p>For <a href=""https://stuk.github.io/jszip/"">jszip</a> module:</p>
<pre>
const fs = require(""fs"");
const pathmodule = require(""path"");
const JSZip = require(""jszip"");

const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB

let fileCount = 0;
let totalSize = 0;
let targetDirectory = __dirname + '/archive_tmp';

fs.readFile(""foo.zip"", function(err, data) {
  if (err) throw err;
  JSZip.loadAsync(data).then(function (zip) {
    zip.forEach(function (relativePath, zipEntry) {
      fileCount++;
      if (fileCount &gt; MAX_FILES) {
        throw 'Reached max. number of files';
      }

      // Prevent ZipSlip path traversal (S6096)
      const resolvedPath = pathmodule.join(targetDirectory, zipEntry.name);
      if (!resolvedPath.startsWith(targetDirectory)) {
        throw 'Path traversal detected';
      }

      if (!zip.file(zipEntry.name)) {
        fs.mkdirSync(resolvedPath);
      } else {
        zip.file(zipEntry.name).async('nodebuffer').then(function (content) {
          totalSize += content.length;
          if (totalSize &gt; MAX_SIZE) {
            throw 'Reached max. size';
          }

          fs.writeFileSync(resolvedPath, content);
        });
      }
    });
  });
});
</pre>
<p>Be aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to
decide if the implementation is secure.</p>
<p>For <a href=""https://github.com/thejoshwolfe/yauzl"">yauzl</a> module</p>
<pre>
const yauzl = require('yauzl');

const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB
const THRESHOLD_RATIO = 10;

yauzl.open('foo.zip', function (err, zipfile) {
  if (err) throw err;

  let fileCount = 0;
  let totalSize = 0;

  zipfile.on(""entry"", function(entry) {
    fileCount++;
    if (fileCount &gt; MAX_FILES) {
      throw 'Reached max. number of files';
    }

    // The uncompressedSize comes from the zip headers, so it might not be trustworthy.
    // Alternatively, calculate the size from the readStream.
    let entrySize = entry.uncompressedSize;
    totalSize += entrySize;
    if (totalSize &gt; MAX_SIZE) {
      throw 'Reached max. size';
    }

    if (entry.compressedSize &gt; 0) {
      let compressionRatio = entrySize / entry.compressedSize;
      if (compressionRatio &gt; THRESHOLD_RATIO) {
        throw 'Reached max. compression ratio';
      }
    }

    zipfile.openReadStream(entry, function(err, readStream) {
      if (err) throw err;
      // TODO: extract
    });
  });
});
</pre>
<p>Be aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to
decide if the implementation is secure.</p>
<p>For <a href=""https://github.com/maxogden/extract-zip"">extract-zip</a> module:</p>
<pre>
const extract = require('extract-zip')

const MAX_FILES = 10000;
const MAX_SIZE = 1000000000; // 1 GB
const THRESHOLD_RATIO = 10;

async function main() {
  let fileCount = 0;
  let totalSize = 0;

  let target = __dirname + '/foo';
  await extract('foo.zip', {
    dir: target,
    onEntry: function(entry, zipfile) {
      fileCount++;
      if (fileCount &gt; MAX_FILES) {
        throw 'Reached max. number of files';
      }

      // The uncompressedSize comes from the zip headers, so it might not be trustworthy.
      // Alternatively, calculate the size from the readStream.
      let entrySize = entry.uncompressedSize;
      totalSize += entrySize;
      if (totalSize &gt; MAX_SIZE) {
        throw 'Reached max. size';
      }

      if (entry.compressedSize &gt; 0) {
        let compressionRatio = entrySize / entry.compressedSize;
        if (compressionRatio &gt; THRESHOLD_RATIO) {
          throw 'Reached max. compression ratio';
        }
      }
    }
  });
}
main();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> -
  Security Misconfiguration </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/409.html"">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)
  </li>
  <li> <a href=""https://www.bamsoftware.com/hacks/zipbomb/"">bamsoftware.com</a> - A better Zip Bomb </li>
</ul>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5728,Disabling content security policy fetch directives is security-sensitive,"<p>Content security policy (CSP) (fetch directives) is a <a href=""https://www.w3.org/TR/CSP3/"">W3C standard </a> which is used by a server to specify,
via a http header, the origins from where the browser is allowed to load resources. It can help to mitigate the risk of cross site scripting (XSS)
attacks and reduce privileges used by an application. If the website doesnâ€™t define CSP header the browser will apply <a
href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">same-origin policy</a> by default.</p>
<pre>
Content-Security-Policy: default-src 'self'; script-src â€˜self â€˜ http://www.example.com
</pre>
<p>In the above example, all resources are allowed from the website where this header is set and script resources fetched from example.com are also
authorized:</p>
<pre>
&lt;img src=""selfhostedimage.png&gt;&lt;/script&gt; &lt;!-- will be loaded because default-src 'self'; directive is applied  --&gt;
&lt;img src=""http://www.example.com/image.png&gt;&lt;/script&gt;  &lt;!-- will NOT be loaded because default-src 'self'; directive is applied  --&gt;
&lt;script src=""http://www.example.com/library.js&gt;&lt;/script&gt; &lt;!-- will be loaded because script-src â€˜self â€˜ http://www.example.comdirective is applied  --&gt;
&lt;script src=""selfhostedscript.js&gt;&lt;/script&gt; &lt;!-- will be loaded because script-src â€˜self â€˜ http://www.example.com directive is applied  --&gt;
&lt;script src=""http://www.otherexample.com/library.js&gt;&lt;/script&gt; &lt;!-- will NOT be loaded because script-src â€˜self â€˜ http://www.example.comdirective is applied  --&gt;
</pre>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The resources of the application are fetched from various untrusted locations. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Implement content security policy fetch directives, in particular <em>default-src</em> directive and continue to properly sanitize and validate all
inputs of the application, indeed CSP fetch directives is only a tool to reduce the impact of cross site scripting attacks.</p>
<h2>Sensitive Code Example</h2>
<p>In a Express.js application, the code is sensitive if the <a href=""https://www.npmjs.com/package/helmet"">helmet</a> contentSecurityPolicy
middleware is disabled:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();
app.use(
    helmet({
      contentSecurityPolicy: false, // sensitive
    })
);
</pre>
<h2>Compliant Solution</h2>
<p>In a Express.js application, a standard way to implement CSP is the <a href=""https://www.npmjs.com/package/helmet"">helmet contentSecurityPolicy
middleware</a>:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();
app.use(helmet.contentSecurityPolicy()); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.w3.org/TR/CSP3/"">w3.org</a> - Content Security Policy Level 3 </li>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html"">OWASP Top 10 2017 Category
  A6</a> - Security Misconfiguration </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"">developer.mozilla.org</a> - Content Security Policy (CSP) </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5725,Disabling resource integrity features is security-sensitive,"<p>Fetching external resources, for example from a CDN, without verifying their integrity could impact the security of an application if the CDN gets
compromised and resources are replaced by malicious ones. Resources integrity feature will block resources inclusion into an application if the
pre-computed digest of the expected resource doesnâ€™t match with the digest of the retrieved resource.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The resources are fetched from external CDNs. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> implement resources integrity checks for all static resources (where ""static"" means that the resourceâ€™s content doesnâ€™t change dynamically
  based on the browser) </li>
  <li> use versioned resources instead of using ""latest"" version of the resources </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
let script = document.createElement(""script""); // Sensitive
script.src = ""https://cdnexample.com/script-latest.js"";
script.crossOrigin = ""anonymous"";
document.head.appendChild(script);
</pre>
<h2>Compliant Solution</h2>
<pre>
let script = document.createElement(""script"");
script.src = ""https://cdnexample.com/script-v1.2.3.js"";
script.integrity = ""sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC""; // Compliant
script.crossOrigin = ""anonymous"";
document.head.appendChild(script);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/353.html"">CWE-353</a> - Missing Support for Integrity Check </li>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html"">OWASP Top 10 2017 Category
  A6</a> - Security Misconfiguration </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity"">developer.mozilla.org</a> - Subresource Integrity </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5604,Using intrusive permissions is security-sensitive,"<p><a href=""https://www.w3.org/TR/permissions/#powerful-feature"">Powerful features</a> are browser features (geolocation, camera, microphone â€¦â€‹) that
can be accessed with JavaScript API and may require a permission granted by the user. These features can have a high impact on privacy and user
security thus they should only be used if they are really necessary to implement the critical parts of an application.</p>
<p>This rule highlights intrusive permissions when requested with <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query"">the
future standard (but currently experimental) web browser query API</a> and specific APIs related to the permission. It is highly recommended to
customize this rule with the permissions considered as intrusive in the context of the web application.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Some powerful features used by the application are not really necessary. </li>
  <li> Users are not clearly informed why and when powerful features are used by the application. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In order to respect user privacy it is recommended to avoid using intrusive powerful features. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>When using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API"">geolocation API</a>, Firefox for example retrieves personal
information like nearby wireless access points and IP address and sends it to the default geolocation service provider, <a
href=""https://www.google.com/privacy/lsf.html"">Google Location Services</a>:</p>
<pre>
navigator.permissions.query({name:""geolocation""}).then(function(result) {
});  // Sensitive: geolocation is a powerful feature with high privacy concerns

navigator.geolocation.getCurrentPosition(function(position) {
  console.log(""coordinates x=""+position.coords.latitude+"" and y=""+position.coords.longitude);
}); // Sensitive: geolocation is a powerful feature with high privacy concerns
</pre>
<h2>Compliant Solution</h2>
<p>If geolocation is required, always explain to the user why the application needs it and prefer requesting an approximate location when
possible:</p>
<pre>
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;
        Retailer website example
    &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    Type a city, street or zip code where you want to retrieve the closest retail locations of our products:
    &lt;form method=post&gt;
        &lt;input type=text value=""New York""&gt; &lt;!-- Compliant --&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Web Top 10 2017 Category A3</a> - Sensitive Data
  Exposure </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/250.html"">CWE-250</a> - Execution with Unnecessary Privileges </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/359.html"">CWE-359</a> - Exposure of Private Information </li>
  <li> <a href=""https://www.w3.org/TR/permissions/"">W3C</a> - Permissions </li>
  <li> <a href=""https://support.mozilla.org/en-US/kb/does-firefox-share-my-location-websites"">Mozilla</a> - Does Firefox share my location with
  websites? </li>
</ul>",MAJOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S1121,Assignments should not be made from within sub-expressions,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (val = value() &amp;&amp; check()) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
val = value();
if (val &amp;&amp; check()) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>The rule does not raise issues for the following patterns:</p>
<ul>
  <li> assignments at declaration-level: <code>let a = b = 0;</code> </li>
  <li> chained assignments: <code>a = b = c = 0;</code> </li>
  <li> relational assignments: <code>(a = 0) != b</code> </li>
  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>
  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>
  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>
  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S4634,Shorthand promises should be used,"<p>When a <code>Promise</code> needs to only ""resolve"" or ""reject"", itâ€™s more efficient and readable to use the methods specially created for such use
cases: <code>Promise.resolve(value)</code> and <code>Promise.reject(error)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let fulfilledPromise = new Promise(resolve =&gt; resolve(42));
let rejectedPromise = new Promise(function(resolve, reject) {
  reject('fail');
});
</pre>
<h2>Compliant Solution</h2>
<pre>
let fulfilledPromise = Promise.resolve(42);
let rejectedPromise = Promise.reject('fail');
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2699,Tests should include assertions,"<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when the assertion library <code>chai</code> is imported but no assertion is used in a test.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const expect = require('chai').expect;

describe(""No assertion"", function() {
    it(""doesn't test anything"", function() { // Noncompliant
        const str = """";
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const expect = require('chai').expect;

describe(""Has assertions"", function() {
    it(""tests a string"", function() {
        const str = """";
        expect(str).to.be.a('string');
    });
});
</pre>",BLOCKER,JavaScript,CODE_SMELL,FALSE
javascript:S5842,Repeated patterns in regular expressions should not match the empty string,"<p>A regex should never include a repetitive pattern whose body would match the empty string. This is usually a sign that a part of the regex is
redundant or does not do what the author intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/(?:)*/      // same as the empty regex, the '*' accomplishes nothing
/(?:|x)*/    // same as the empty regex, the alternative has no effect
/(?:x|)*/    // same as 'x*', the empty alternative has no effect
/(?:x*|y*)*/ // same as 'x*', the first alternative would always match, y* is never tried
/(?:x?)*/    // same as 'x*'
/(?:x?)+/    // same as 'x*'
</pre>
<h2>Compliant Solution</h2>
<pre>
/x*/
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S6019,Reluctant quantifiers in regular expressions should be followed by an expression that can't match the empty string,"<p>When a reluctant (or lazy) quantifier is followed by a pattern that can match the empty string or directly by the end of the regex, it will always
match zero times for <code>*?</code> or one time for <code>+?</code>. If a reluctant quantifier is followed directly by the end anchor
(<code>$</code>), it behaves indistinguishably from a greedy quantifier while being less efficient.</p>
<p>This is likely a sign that the regex does not work as intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.split(/.*?x?/); // Noncompliant, this will behave just like ""x?""
/^.*?$/.test(str); // Noncompliant, replace with "".*""
</pre>
<h2>Compliant Solution</h2>
<pre>
str.split(/.*?x/);
/^.*$/.test(str);
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5843,Regular expressions should not be too complicated,"<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you
should consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>
<p>The complexity of a regular expression is determined as follows:</p>
<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting
level by one for its arguments:</p>
<ul>
  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>
  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>
  <li> Lookahead and lookbehind assertions </li>
</ul>
<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>
<ul>
  <li> character classes </li>
  <li> back references </li>
</ul>
<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const datePattern = /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[13-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/;
if (dateString.match(datePattern)) {
    handleDate(dateString);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const datePattern = /^\d{1,2}([-/.])\d{1,2}\1\d{1,4}$/;
if (dateString.match(datePattern)) {
    const dateParts[] = dateString.split(""[-/.]"");
    int day = parseInt(dateParts[0]);
    int month = parseInt(dateParts[1]);
    int year = parseInt(dateParts[2]);
    // Put logic to validate and process the date based on its integer parts here
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1116,Extra semicolons should be removed,"<p>Extra semicolons (<code>;</code>) are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
  <li> There was a misunderstanding about where semicolons are required or useful. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 1;; // Noncompliant

function foo() {
};  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 1;

function foo() {
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S5958,Tests should check which exception is thrown,"<p>It is not good enough to test if an exception is raised, without checking which exception it is. Such tests will not be able to differentiate the
expected exception from an unexpected one. They should instead validate the exception message and/or type.</p>
<p>This rule raises an issue in the following cases:</p>
<ul>
  <li> When an asynchronous Mocha test calls the <code>done()</code> callback, without parameters, in a <code>catch</code> block and there is no
  reference to the caught exception in this block. Either the error should be passed to <code>done()</code> or the exception should be checked
  further. </li>
  <li> When Chai assertions are used to test if a function throws any exception, or an exception of type <code>Error</code> without checking the
  message. </li>
  <li> When Chai assertions are used to test if a function does not throw an exception of type <code>Error</code> without checking the message. </li>
</ul>
<p>Rule doesn't raise an issue when assertion is negated using <code>not</code>, it such case the exception doesn't need to be specific.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const expect = require(""chai"").expect;
const fs = require(""fs"");

describe(""exceptions are not tested properly"", function() {
    const funcThrows = function () { throw new TypeError('What is this type?'); };
    const funcNoThrow = function () { /*noop*/ };

    it(""forgot to pass the error to 'done()'"", function(done) {
        fs.readFile(""/etc/zshrc"", 'utf8', function(err, data) {
            try {
                expect(data).to.match(/some expected string/);
            } catch (e) {  // Noncompliant
                // Either the exception should be passed to done(e), or the exception should be tested further.
                done();
            }
        });
    });

    it(""does not 'expect' a specific exception"", function() {
        expect(funcThrows).to.throw();  // Noncompliant
        // Error is not precise enough
        expect(funcThrows).to.throw(Error);  // Noncompliant
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const expect = require(""chai"").expect;
const { AssertionError } = require('chai');
const fs = require(""fs"");

describe(""exceptions are tested properly"", function() {
    const funcThrows = function () { throw new TypeError('What is this type?'); };
    const funcNoThrow = function () { /*noop*/ };

    it(""forgot to pass the error to 'done()'"", function(done) {
        fs.readFile(""/etc/zshrc"", 'utf8', function(err, data) {
            try {
                expect(data).to.match(/some expected string/);
            } catch (e) {
                expect(e).to.be.an.instanceof(AssertionError);
                done();
            }
        });
    });

    it(""does not 'expect' a specific exception"", function() {
        expect(funcThrows).to.throw(TypeError);
        expect(funcNoThrow).to.not.throw(Error, /My error message/);
    });
});
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3415,Assertion arguments should be passed in the correct order,"<p>Many assertion functions have specific parameters for the expected and actual values. Swap them, and your test will still have the same outcome
(succeed/fail when it should) but the error messages will be confusing.</p>
<p>This rule raises an issue when the ""expected"" argument of an assertion function is a hard-coded value and the ""actual"" argument is not.</p>
<p>This rule currently supports Chai assertions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const assert = require('chai').assert;
const expect = require('chai').expect;
const should = require('chai').should();

it(""inverts arguments"", function() {
    assert.equal(42, aNumber); // Noncompliant
    expect(42).to.equal(aNumber); // Noncompliant
    should.fail(42, aNumber);  // Noncompliant
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const assert = require('chai').assert;
const expect = require('chai').expect;
const should = require('chai').should();

it(""inverts arguments"", function() {
    assert.equal(aNumber, 42);
    expect(aNumber).to.equal(42);
    should.fail(aNumber, 42);
});
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1117,Variables should not be shadowed,"<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think theyâ€™re using one variable but are really using another.</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1119,Labels should not be used,"<p>Labels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,
which reduces the codeâ€™s readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel: {
  let x = doSomething();
  if (x &gt; 0) {
    break myLabel;
  }
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = doSomething();
if (x &lt;= 0) {
  doSomethingElse();
}
</pre>
<p>&nbsp;</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1472,Function call arguments should not start on new lines,"<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could
lead to errors and most likely <em>will</em> lead to questions for maintainers.</p>
<p>What was the initial intent of the developer?</p>
<ol>
  <li> Define a function and then execute some unrelated code inside a closure ? </li>
  <li> Pass the second function as a parameter to the first one ? </li>
</ol>
<p>The first option will be the one chosen by the JavaScript interpreter.</p>
<p>By extension, and to improve readability, any kind of function call argument should not start on new line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var fn = function () {
  //...
}

(function () { // Noncompliant
  //...
})();
</pre>
<h2>Compliant Solution</h2>
<p>Either</p>
<pre>
// define a function
var fn = function () {
  //...
}; // &lt;-- semicolon added

// then execute some code inside a closure
(function () {
  //...
})();
</pre>
<p>Or</p>
<pre>
var fn = function () {
  //...
}(function () { // &lt;-- start function call arguments on same line
  //...
})();
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S4502,Disabling CSRF protections is security-sensitive,"<p>A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive
actions that he didnâ€™t intend, such as updating his profile or sending a message, more generally anything that can change the state of the
application.</p>
<p>The attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a
hidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The web application uses cookies to authenticate users. </li>
  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>
  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Protection against CSRF attacks is strongly recommended:
    <ul>
      <li> to be activated by default for all <a href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods"">unsafe HTTP
      methods</a>. </li>
      <li> implemented, for example, with an unguessable CSRF token </li>
    </ul>  </li>
  <li> Of course all sensitive operations should not be performed with <a
  href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods"">safe HTTP</a> methods like <code>GET</code> which are designed to be
  used only for information retrieval. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p><a href=""https://www.npmjs.com/package/csurf"">Express.js CSURF middleware</a> protection is not found on an unsafe HTTP method like POST
method:</p>
<pre>
let csrf = require('csurf');
let express = require('express');

let csrfProtection = csrf({ cookie: true });

let app = express();

// Sensitive: this operation doesn't look like protected by CSURF middleware (csrfProtection is not used)
app.post('/money_transfer', parseForm, function (req, res) {
  res.send('Money transferred');
});
</pre>
<p>Protection provided by <a href=""https://www.npmjs.com/package/csurf"">Express.js CSURF middleware</a> is globally disabled on unsafe methods:</p>
<pre>
let csrf = require('csurf');
let express = require('express');

app.use(csrf({ cookie: true, ignoreMethods: [""POST"", ""GET""] })); // Sensitive as POST is unsafe method
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/csurf"">Express.js CSURF middleware</a> protection is used on unsafe methods:</p>
<pre>
let csrf = require('csurf');
let express = require('express');

let csrfProtection = csrf({ cookie:  true });

let app = express();

app.post('/money_transfer', parseForm, csrfProtection, function (req, res) { // Compliant
  res.send('Money transferred')
});
</pre>
<p>Protection provided by <a href=""https://www.npmjs.com/package/csurf"">Express.js CSURF middleware</a> is enabled on unsafe methods:</p>
<pre>
let csrf = require('csurf');
let express = require('express');

app.use(csrf({ cookie: true, ignoreMethods: [""GET""] })); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href=""https://owasp.org/www-community/attacks/csrf"">OWASP: Cross-Site Request Forgery</a> </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S2201,Return values from functions without side effects should not be ignored,"<p>When the call to a function doesnâ€™t have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesnâ€™t behave as expected.</p>
<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
'hello'.lastIndexOf('e'); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let char = 'hello'.lastIndexOf('e');
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S4624,Template literals should not be nested,"<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make
strings concatenation more readable.</p>
<p>However, itâ€™s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and
maintainability.</p>
<p>In such situations, itâ€™s preferable to move the nested template into a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let color = ""red"";
let count = 3;
let message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read
</pre>
<h2>Compliant Solution</h2>
<pre>
let color = ""red"";
let count = 3;
let apples = color ? `${count} ${color}` : count;
let message = `I have ${apples} apples`;
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S6035,Single-character alternations in regular expressions should be replaced with character classes,"<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be
preferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule {rule:javascript:S5998}).</p>
<h2>Noncompliant Code Example</h2>
<pre>
/a|b|c/; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
/[abc]/;
// or
/[a-c]/;
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5868,Unicode Grapheme Clusters should be avoided inside regex character classes,"<p>When placing Unicode <a href=""https://unicode.org/glossary/#grapheme_cluster"">Grapheme Clusters</a> (characters which require to be encoded in
multiple <a href=""https://unicode.org/glossary/#code_point"">Code Points</a>) inside a character class of a regular expression, this will likely lead
to unintended behavior.</p>
<p>For instance, the grapheme cluster <code>cÌˆ</code> requires two code points: one for <code>'c'</code>, followed by one for the <em>umlaut</em>
modifier <code>'\u{0308}'</code>. If placed within a character class, such as <code>[cÌˆ]</code>, the regex will consider the character class being the
enumeration <code>[c\u{0308}]</code> instead. It will, therefore, match every <code>'c'</code> and every <em>umlaut</em> that isnâ€™t expressed as a
single codepoint, which is extremely unlikely to be the intended behavior.</p>
<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""ccÌˆdÌˆd"".replace(/[cÌˆdÌˆ]/g, ""X""); // result is ""XXXXXX"" and not expected ""cXXd""
</pre>
<h2>Compliant Solution</h2>
<pre>
""ccÌˆdÌˆd"".replace(/cÌˆ|dÌˆ/g, ""X""); // result is ""cXXd""
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S5869,Character classes in regular expressions should not contain the same character twice,"<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or
ranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this
has no effect.</p>
<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is
intended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter
mistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.
Another common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the
character class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/[0-99]/ // Noncompliant, this won't actually match strings with two digits
/[0-9.-_]/ // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)
</pre>
<h2>Compliant Solution</h2>
<pre>
/[0-9]{1,2}/
/[0-9.\-_]/
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5742,Disabling Certificate Transparency monitoring is security-sensitive,"<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency"">Certificate Transparency</a> (CT) is an open-framework to
protect against identity theft when certificates are issued. <a href=""https://en.wikipedia.org/wiki/Certificate_authority"">Certificate Authorities</a>
(CA) electronically sign certificate after verifying the identify of the certificate owner. Attackers use, among other things, social engineering
attacks to trick a CA to correctly verifying a spoofed identity/forged certificate.</p>
<p>CAs implement Certificate Transparency framework to publicly log the records of newly issued certificates, allowing the public and in particular
the identity owner to monitor these logs to verify that his identify was not usurped.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The website identity is valuable and well-known, therefore prone to theft. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Implement <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT"">Expect-CT</a> HTTP header which instructs the web browser
to check <a href=""https://www.certificate-transparency.org/known-logs"">public CT logs</a> in order to verify if the website appears inside and if it
is not, the browser will block the request and display a warning to the user.</p>
<h2>Sensitive Code Example</h2>
<p>In Express.js application the code is sensitive if the <a href=""https://www.npmjs.com/package/expect-ct"">expect-ct</a> middleware is disabled:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
    helmet({
      expectCt: false // Sensitive
    })
);
</pre>
<h2>Compliant Solution</h2>
<p>In Express.js application the <a href=""https://www.npmjs.com/package/expect-ct"">expect-ct</a> middleware is the standard way to implement
expect-ct. Usually, the deployment of this policy starts with the report only mode (<code>enforce: false</code>) and with a low <code>maxAge</code>
(the number of seconds the policy will apply) value and next if everything works well it is recommended to block future connections that violate
Expect-CT policy (<code>enforce: true</code>) and greater value for maxAge directive:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(helmet.expectCt({
  enforce: true,
  maxAge: 86400
})); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> -
  Sensitive Data Exposure </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency"">developer.mozilla.org</a> - Certificate Transparency
  </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Certificate_authority"">wikipedia.org</a> - Certificate Authority </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5863,Assertions should not be given twice the same argument,"<p>Many assertions compare two objects or properties of these objects. Passing twice the same argument is likely to be a bug due to developerâ€™s
carelessness.</p>
<p>This rule raises an issue when a Chai assertion is given twice the same argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const assert = require('chai').assert;

describe(""test the same object"", function() {
    it(""uses chai 'assert'"", function() {
        const expected = '1'
        const actual = (1).toString()
        assert.equal(actual, actual);  // Noncompliant
    });
});
</pre>
<h2>Compliant Solution</h2>
<pre>
const assert = require('chai').assert;

describe(""test the same object"", function() {
    it(""uses chai 'assert'"", function() {
        const expected = '1'
        const actual = (1).toString()
        assert.equal(actual, expected);
    });
});
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S1264,"A ""while"" loop should be used instead of a ""for"" loop","<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S1143,"Jump statements should not occur in ""finally"" blocks","<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar
statements from the suspended <code>try</code> and <code>catch</code> blocks.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force
control flow to leave a <code>finally</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    } finally {
        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/584.html"">MITRE, CWE-584</a> - Return Inside Finally Block </li>
</ul>",CRITICAL,JavaScript,BUG,FALSE
javascript:S5860,Names of regular expressions named groups should be used,"<p>Why use named groups only to never use any of them later on in the code?</p>
<p>This rule raises issues every time named groups are:</p>
<ul>
  <li> defined but never called anywhere in the code through their name; </li>
  <li> defined but called elsewhere in the code by their number instead; </li>
  <li> referenced while not defined. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
const date = ""01/02"";

const datePattern = /(?&lt;month&gt;[0-9]{2})\/(?&lt;year&gt;[0-9]{2})/;
const dateMatched = date.match(datePattern);

if (dateMatched !== null) {
  checkValidity(dateMatched[1], dateMatched[2]); // Noncompliant - numbers instead of names of groups are used
  checkValidity(dateMatched.groups.day); // Noncompliant - there is no group called ""day""
}

// ...

const score = ""14:1"";

const scorePattern = /(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)/; // Noncompliant - named groups are never used
const scoreMatched = score.match(scorePattern);

if (scoreMatched !== null) {
  checkScore(score);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const date = ""01/02"";

const datePattern = /(?&lt;month&gt;[0-9]{2})\/(?&lt;year&gt;[0-9]{2})/;
const dateMatched = date.match(datePattern);

if (dateMatched !== null) {
  checkValidity(dateMatched.groups.month, dateMatched.groups.year);
}

// ...

const score = ""14:1"";

const scorePattern = /(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)/;
const scoreMatched = score.match(scorePattern);

if (scoreMatched !== null) {
  checkScore(scoreMatched.groups.player1);
  checkScore(scoreMatched.groups.player2);
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2598,File uploads should be restricted,"<p>These minimum restrictions should be applied when handling file uploads:</p>
<ul>
  <li> the file upload folder to restrict untrusted files to a specific folder. </li>
  <li> the file extension of the uploaded file to prevent remote code execution. </li>
</ul>
<p>Also the size of the uploaded file should be limited to prevent denial of service attacks. This requirement is covered by the rule
{rule:javascript:S5693}.</p>
<h2>Noncompliant Code Example</h2>
<p><a href=""https://www.npmjs.com/package/formidable"">formidable</a> module:</p>
<pre>
const Formidable = require('formidable');

const form = new Formidable(); // Noncompliant, this form is not safe
form.uploadDir = """"; // because upload dir is not defined (by default os temp dir: /var/tmp or /tmp)
form.keepExtensions = true; // and file extensions are kept
</pre>
<p><a href=""https://www.npmjs.com/package/multer"">multer</a> (Express.js middleware) module:</p>
<pre>
const multer = require('multer');

let diskStorage = multer.diskStorage({ // Noncompliant: no destination specified
  filename: (req, file, cb) =&gt; {
    const buf = crypto.randomBytes(20);
    cb(null, buf.toString('hex'))
  }
});

// This upload is not safe as no destination specified, /var/tmp or /tmp will be used
let diskupload = multer({
  storage: diskStorage,
});
</pre>
<h2>Compliant Solution</h2>
<p><a href=""https://www.npmjs.com/package/formidable"">formidable</a> module:</p>
<pre>
const Formidable = require('formidable');

const form = new Formidable(); // Compliant
form.uploadDir = ""./uploads/"";
form.keepExtensions = false;
</pre>
<p><a href=""https://www.npmjs.com/package/multer"">multer</a> (Express.js middleware) module:</p>
<pre>
const multer = require('multer');

let diskStorage = multer.diskStorage({  // Compliant
  filename: (req, file, cb) =&gt; {
    const buf = crypto.randomBytes(20);
    cb(null, buf.toString('hex'))
  },
  destination: (req, file, cb) =&gt; {
    cb(null, './uploads/')
  }
});

let diskupload = multer({
  storage: diskStorage,
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/434"">CWE-434</a> - Unrestricted Upload of File with Dangerous Type </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/400.html"">CWE-400</a> - Uncontrolled Resource Consumption </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10_2010-A4-Insecure_Direct_Object_References"">OWASP Top 10 2017 Category A4</a> - Insecure Direct
  Object References </li>
  <li> <a href=""https://www.owasp.org/index.php/Unrestricted_File_Upload"">OWASP Unrestricted File Upload</a> - Unrestricted File Upload </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",CRITICAL,JavaScript,VULNERABILITY,FALSE
javascript:S2234,Parameters should be passed in the correct order,"<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,
when the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will
likely lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(divisor, dividend);
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Swapped arguments that are compared beforehand in an enclosing <code>if</code>-statement are ignored:</p>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;
  if (divisor &gt; dividend) {
    var result = divide(dividend, divisor);
    //...
  }
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5867,Regular expressions using Unicode character classes or property escapes should enable the unicode flag,"<p>JavaScript regular expressions provide Unicode character classses and Unicode property escapes for matching characters based on their Unicode
values and Unicode properties respectively. When using Unicode property escapes like <code>\p{Alpha}</code> without the <code>u</code> flag, the
regular expression will not match alphabetic characters but rather the <code>+'\p{Alpha}+'</code> string literal, which is likely a mistake.</p>
<p>This rules raises an issue when Unicode character classses and Unicode property escapes are used without the <code>u</code> flag.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/\u{1234}/
/\p{Alpha}/
</pre>
<h2>Compliant Solution</h2>
<pre>
/\u{1234}/u
/\p{Alpha}/u
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S5743,Allowing browsers to perform DNS prefetching  is security-sensitive,"<p>By default, web browsers perform <a href=""https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch/"">DNS prefetching</a> to reduce
latency due to DNS resolutions required when an user clicks links from a website page.</p>
<p>For instance on example.com the hyperlink below contains a cross-origin domain name that must be resolved to an IP address by the web browser:</p>
<pre>
&lt;a href=""https://otherexample.com""&gt;go on our partner website&lt;/a&gt;
</pre>
<p>It can add significant latency during requests, especially if the page contains many links to cross-origin domains. DNS prefetch allows web
browsers to perform DNS resolving in the background before the user clicks a link. This feature can cause privacy issues because DNS resolving from
the userâ€™s computer is performed without his consent if he doesnâ€™t intent to go to the linked website.</p>
<p>On a complex private webpage, a combination ""of unique links/DNS resolutions"" can indicate, to a eavesdropper for instance, that the user is
visiting the private page.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Links to cross-origin domains could result in leakage of confidential information about the userâ€™s navigation/behavior of the website. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Implement <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control"">X-DNS-Prefetch-Control</a> header with an
<em>off</em> value but this could significantly degrade website performances.</p>
<h2>Sensitive Code Example</h2>
<p>In Express.js application the code is sensitive if the <a href=""https://www.npmjs.com/package/dns-prefetch-control"">dns-prefetch-control</a>
middleware is disabled or used without the recommended value:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
  helmet.dnsPrefetchControl({
    allow: true // Sensitive: allowing DNS prefetching is security-sensitive
  })
);
</pre>
<h2>Compliant Solution</h2>
<p>In Express.js application the <a href=""https://www.npmjs.com/package/dns-prefetch-control"">dns-prefetch-control</a> or <a
href=""https://www.npmjs.com/package/helmet"">helmet</a> middleware is the standard way to implement <code>X-DNS-Prefetch-Control</code> header:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
  helmet.dnsPrefetchControl({
    allow: false // Compliant
  })
);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html"">OWASP Top 10 2017 Category
  A3</a> - Sensitive Data Exposure </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control"">developer.mozilla.org</a> - X-DNS-Prefetch-Control
  </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch"">developer.mozilla.org</a> - Using dns-prefetch </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5739,Disabling Strict-Transport-Security policy is security-sensitive,"<p>When implementing the HTTPS protocol, the website mostly continue to support the HTTP protocol to redirect users to HTTPS when they request a HTTP
version of the website. These redirects are not encrypted and are therefore vulnerable to man in the middle attacks. The <a
href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security"">Strict-Transport-Security policy header</a> (HSTS) set by
an application instructs the web browser to convert any HTTP request to HTTPS.</p>
<p>Web browsers that see the Strict-Transport-Security policy header for the first time record information specified in the header:</p>
<ul>
  <li> the <code>max-age</code> directive which specify how long the policy should be kept on the web browser. </li>
  <li> the <code>includeSubDomains</code> optional directive which specify if the policy should apply on all sub-domains or not. </li>
  <li> the <code>preload</code> optional directive which is not part of the HSTS specification but supported on all modern web browsers. </li>
</ul>
<p>With the <code>preload</code> directive the web browser never connects in HTTP to the website and to use this directive, it is required <a
href=""https://hstspreload.org/"">to submit</a> the concerned application to a preload service maintained by Google.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The website is accessible with the unencrypted HTTP protocol. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Implement Strict-Transport-Security policy header, it is recommended to apply this policy to all subdomains (<code>includeSubDomains</code>) and
for at least 6 months (<code>max-age=15552000</code>) or even better for 1 year (<code>max-age=31536000</code>).</p>
<h2>Sensitive Code Example</h2>
<p>In Express.js application the code is sensitive if the <a href=""https://www.npmjs.com/package/helmet"">helmet</a> or <a
href=""https://www.npmjs.com/package/hsts"">hsts</a> middleware are disabled or used without recommended values:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(helmet.hsts({
  maxAge: 3153600, // Sensitive, recommended &gt;= 15552000
  includeSubDomains: false // Sensitive, recommended 'true'
}));
</pre>
<h2>Compliant Solution</h2>
<p>In Express.js application a standard way to implement HSTS is with the <a href=""https://www.npmjs.com/package/helmet"">helmet</a> or <a
href=""https://www.npmjs.com/package/hsts"">hsts</a> middleware:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(helmet.hsts({
  maxAge: 31536000,
  includeSubDomains: true
})); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> -
  Sensitive Data Exposure </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security"">developer.mozilla.org</a> - Strict Transport
  Security </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5736,Disabling strict HTTP no-referrer policy is security-sensitive,"<p><a href=""https://en.wikipedia.org/wiki/HTTP_referer"">HTTP header referer</a> contains a URL set by web browsers and used by applications to track
from where the user came from, itâ€™s for instance a relevant value for web analytic services, but it can cause <a
href=""https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns"">serious privacy and security problems</a>
if the URL contains confidential information. Note that Firefox for instance, to prevent data leaks, <a
href=""https://blog.mozilla.org/security/2018/01/31/preventing-data-leaks-by-stripping-path-information-in-http-referrers/"">removes path
information</a> in the Referer header while browsing privately.</p>
<p>Suppose an e-commerce website asks the user his credit card number to purchase a product:</p>
<pre>
&lt;html&gt;
&lt;body&gt;
&lt;form action=""/valid_order"" method=""GET""&gt;
Type your credit card number to purchase products:
&lt;input type=text id=""cc"" value=""1111-2222-3333-4444""&gt;
&lt;input type=submit&gt;
&lt;/form&gt;
&lt;/body&gt;
</pre>
<p>When submitting the above HTML form, a HTTP GET request will be performed, the URL requested will be
https://example.com/valid_order?cc=1111-2222-3333-4444 with credit card number inside and itâ€™s obviously not secure for these reasons:</p>
<ul>
  <li> URLs are stored in the history of browsers. </li>
  <li> URLs could be accidentally shared when doing copy/paste actions. </li>
  <li> URLs can be stolen if a malicious person looks at the computer screen of an user. </li>
</ul>
<p>In addition to these threats, when further requests will be performed from the ""valid_order"" page with a simple legitimate embedded script like
that:</p>
<pre>
&lt;script src=""https://webanalyticservices_example.com/track""&gt;
</pre>
<p>The referer header which contains confidential information will be send to a third party web analytic service and cause privacy issue:</p>
<pre>
GET /track HTTP/2.0
Host: webanalyticservices_example.com
Referer: https://example.com/valid_order?cc=1111-2222-3333-4444
</pre>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Confidential information exists in URLs. </li>
  <li> Semantic of HTTP methods is not respected (eg: use of a GET method instead of POST when the state of the application is changed). </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Confidential information should not be set inside URLs (GET requests) of the application and a safe (ie: different from <code>unsafe-url</code> or
<code>no-referrer-when-downgrade</code>) <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"">referrer-Policy</a>
header, to control how much information is included in the referer header, should be used.</p>
<h2>Sensitive Code Example</h2>
<p>In Express.js application the code is sensitive if the <a href=""https://www.npmjs.com/package/helmet"">helmet</a> <code>referrerPolicy</code>
middleware is disabled or used with <code>no-referrer-when-downgrade</code> or <code>unsafe-url</code>:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

app.use(
  helmet.referrerPolicy({
    policy: 'no-referrer-when-downgrade' // Sensitive: no-referrer-when-downgrade is used
  })
);
</pre>
<h2>Compliant Solution</h2>
<p>In Express.js application a secure solution is to user the <a href=""https://www.npmjs.com/package/helmet"">helmet</a> referrer policy middleware set
to <code>no-referrer</code>:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
  helmet.referrerPolicy({
    policy: 'no-referrer' // Compliant
  })
);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> -
  Sensitive Data Exposure </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"">developer.mozilla.org</a> - Referrer-Policy </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns"">developer.mozilla.org</a> -
  Referer header: privacy and security concerns </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5730,Allowing mixed-content is security-sensitive,"<p>A mixed-content is when a resource is loaded with the HTTP protocol, from a website accessed with the HTTPs protocol, thus mixed-content are not
encrypted and exposed to <a href=""https://en.wikipedia.org/wiki/Man-in-the-middle_attack"">MITM attacks</a> and could break the entire level of
protection that was desired by implementing encryption with the HTTPs protocol.</p>
<p>The main threat with mixed-content is not only the confidentiality of resources but the whole website integrity:</p>
<ul>
  <li> A passive mixed-content (eg: <em>&lt;img src=""http://example.com/picture.png""&gt;</em>) allows an attacker to access and replace only these
  resources, like images, with malicious ones that could lead to successful phishing attacks. </li>
  <li> With active mixed-content (eg: <em>&lt;script src=""http://example.com/library.js""&gt;</em>) an attacker can compromise the entire website by
  injecting malicious javascript code for example (accessing and modifying the DOM, steal cookies, etc). </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The HTTPS protocol is in place and external resources are fetched from the website pages. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Implement content security policy <em>block-all-mixed-content</em> directive which is supported by all modern browsers and will block loading of
mixed-contents.</p>
<h2>Sensitive Code Example</h2>
<p>In Express.js application the code is sensitive if the <a href=""https://www.npmjs.com/package/helmet-csp"">helmet-csp</a> or <a
href=""https://www.npmjs.com/package/helmet"">helmet</a> middleware is used without the <code>blockAllMixedContent</code> directive:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
  helmet.contentSecurityPolicy({
    directives: {
      ""default-src"": [""'self'"", 'example.com', 'code.jquery.com']
    } // Sensitive: blockAllMixedContent directive is missing
  })
);
</pre>
<h2>Compliant Solution</h2>
<p>In Express.js application a standard way to block mixed-content is to put in place the <a
href=""https://www.npmjs.com/package/helmet-csp"">helmet-csp</a> or <a href=""https://www.npmjs.com/package/helmet"">helmet</a> middleware with the
<code>blockAllMixedContent</code> directive:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
  helmet.contentSecurityPolicy({
    directives: {
      ""default-src"": [""'self'"", 'example.com', 'code.jquery.com'],
      blockAllMixedContent: [] // Compliant
    }
  })
);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> -
  Sensitive Data Exposure </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content"">developer.mozilla.org</a> - Mixed-content </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"">developer.mozilla.org</a> - Content Security Policy (CSP) </li>
  <li> <a href=""https://www.w3.org/TR/CSP3/"">w3.org</a> - Content Security Policy Level 3 </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5852,Using slow regular expressions is security-sensitive,"<p>Most of the regular expression engines use backtracking to try all possible execution paths of the regular expression when evaluating an input, in
some cases it can cause performance issues, called <strong>catastrophic backtracking</strong> situations. In the worst case, the complexity of the
regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger catastrophic
backtracking and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too with, in this case, a
large carefully-crafted input (thousands chars).</p>
<p>This rule determines the runtime complexity of a regular expression and informs you if it is not linear.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The input is user-controlled. </li>
  <li> The input size is not restricted to a small number of characters. </li>
  <li> There is no timeout in place to limit the regex evaluation time. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>To avoid catastrophic backtracking situations, make sure that none of the following conditions apply to your regular expression.</p>
<p>In all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can
fail, causing the backtracking to actually happen.</p>
<ul>
  <li> If you have a repetition <code>r*</code> or <code>r*?</code>, such that the regex <code>r</code> could produce different possible matches (of
  possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if <code>r</code> contains
  optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that thereâ€™s only one way to match it).
  </li>
  <li> If you have multiple repetitions that can match the same contents and are consecutive or are only separated by an optional separator or a
  separator that can be matched by both of the repetitions, the worst case matching time can be polynomial (O(n^c) where c is the number of
  problematic repetitions). For example <code>a*b*</code> is not a problem because <code>a*</code> and <code>b*</code> match different things and
  <code>a*_a*</code> is not a problem because the repetitions are separated by a <code>'_'</code> and canâ€™t match that <code>'_'</code>. However,
  <code>a*a*</code> and <code>.*_.*</code> have quadratic runtime. </li>
  <li> If the regex is not anchored to the beginning of the string, quadratic runtime is especially hard to avoid because whenever a match fails, the
  regex engine will try again starting at the next index. This means that any unbounded repetition, if itâ€™s followed by a pattern that can fail, can
  cause quadratic runtime on some inputs. For example <code>str.split(/\s*,/)</code> will run in quadratic time on strings that consist entirely of
  spaces (or at least contain large sequences of spaces, not followed by a comma). </li>
</ul>
<p>In order to rewrite your regular expression without these patterns, consider the following strategies:</p>
<ul>
  <li> If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like <code>{1,5}</code> instead of <code>+</code>
  for instance. </li>
  <li> Refactor nested quantifiers to limit the number of way the inner group can be matched by the outer quantifier, for instance this nested
  quantifier situation <code>(ba+)+</code> doesnâ€™t cause performance issues, indeed, the inner group can be matched only if there exists exactly one
  <code>b</code> char per repetition of the group. </li>
  <li> Optimize regular expressions by emulating <em>possessive quantifiers</em> and <em>atomic grouping</em>. </li>
  <li> Use negated character classes instead of <code>.</code> to exclude separators where applicable. For example the quadratic regex
  <code>.*_.*</code> can be made linear by changing it to <code>[^_]*_.*</code> </li>
</ul>
<p>Sometimes itâ€™s not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when the regex is not
anchored to the beginning of the string, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:</p>
<ul>
  <li> Solve the problem without regular expressions </li>
  <li> Use an alternative non-backtracking regex implementations such as Googleâ€™s <a href=""https://github.com/google/re2"">RE2</a> or <a
  href=""https://github.com/uhop/node-re2/"">node-re2</a>. </li>
  <li> Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or
  using multiple regular expressions. One example of this would be to replace <code>str.split(/\s*,\s*/)</code> with <code>str.split("","")</code> and
  then trimming the spaces from the strings as a second step. </li>
  <li> It is often possible to make the regex infallible by making all the parts that could fail optional, which will prevent backtracking. Of course
  this means that youâ€™ll accept more strings than intended, but this can be handled by using capturing groups to check whether the optional parts were
  matched or not and then ignoring the match if they werenâ€™t. For example the regex <code>x*y</code> could be replaced with <code>x*(y)?</code> and
  then the call to <code>str.match(regex)</code> could be replaced with <code>matched = str.match(regex)</code> and <code>matched[1] !==
  undefined</code>. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>The regex evaluation will never end:</p>
<pre>
/(a+)+$/.test(
""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""+
""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""+
""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""+
""aaaaaaaaaaaaaaa!""
); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p>Possessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid performance issues. Unfortunately, they are not
supported in JavaScript, but one can still mimick them using lookahead assertions and backreferences:</p>
<pre>
/((?=(a+))\2)+$/.test(
""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""+
""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""+
""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""+
""aaaaaaaaaaaaaaa!""
); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/400.html"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/1333.html"">MITRE, CWE-1333</a> - Inefficient Regular Expression Complexity </li>
  <li> <a href=""https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"">owasp.org</a> - OWASP Regular expression Denial
  of Service - ReDoS </li>
  <li> <a href=""https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016"">stackstatus.net</a> - Outage Postmortem - July 20, 2016
  </li>
  <li> <a href=""https://www.regular-expressions.info/catastrophic.html"">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic
  Backtracking </li>
  <li> <a
  href=""https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers"">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>
</ul>",CRITICAL,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5850,Alternatives in regular expressions should be grouped when used with anchors,"<p>In regular expressions, anchors <code>^</code> and <code>$</code> have higher precedence than the <code>|</code> operator. So in a regular
expression like <code>^alt1|alt2|alt3$</code>, <code>alt1</code> would be anchored to the beginning, <code>alt3</code> to the end and
<code>alt2</code> wouldnâ€™t be anchored at all. Usually the intended behavior is that all alternatives are anchored at both ends. To achieve this, a
non-capturing group should be used around the alternatives.</p>
<p>In cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts
that they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they
mistakenly assume the precedence was not intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
^a|b|c$
</pre>
<h2>Compliant Solution</h2>
<pre>
^(?:a|b|c)$
</pre>
<p>or</p>
<pre>
^a$|^b$|^c$
</pre>
<p>or, if you do want the anchors to only apply to <code>a</code> and <code>c</code> respectively:</p>
<pre>
(?:^a)|b|(?:c$)
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S6268,Disabling Angular built-in sanitization is security-sensitive,"<p>Angular prevents XSS vulnerabilities by treating all values as untrusted by default. Untrusted values are systematically sanitized by the framework
before they are inserted into the DOM.</p>
<p>Still, developers have the ability to manually mark a value as trusted if they are sure that the value is already sanitized. Accidentally trusting
malicious data will introduce an XSS vulnerability in the application and enable a wide range of serious attacks like accessing/modifying sensitive
information or impersonating other users.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The value for which sanitization has been disabled is user controlled. </li>
  <li> Itâ€™s difficult to understand how this value is constructed. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid including dynamic executable code and thus disabling Angularâ€™s built-in sanitization unless itâ€™s absolutely necessary. Try instead to
  rely as much as possible on static templates and Angular built-in sanitization to define web page content. </li>
  <li> Make sure to understand how the value to consider as trusted is constructed and never concatenate it with user controlled data. </li>
  <li> Make sure to choose the correct <a href=""https://angular.io/api/platform-browser/DomSanitizer"">DomSanitizer</a> ""bypass"" method based on the
  context. For instance, only use <code>bypassSecurityTrustUrl</code> to trust urls in an <code>href</code> attribute context. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
import { Component, OnInit } from '@angular/core';
import { DomSanitizer, SafeHtml } from ""@angular/platform-browser"";
import { ActivatedRoute } from '@angular/router';

@Component({
  template: '&lt;div id=""hello"" [innerHTML]=""hello""&gt;&lt;/div&gt;'
})
export class HelloComponent implements OnInit {
  hello: SafeHtml;

  constructor(private sanitizer: DomSanitizer, private route: ActivatedRoute) { }

  ngOnInit(): void {
    let name = this.route.snapshot.queryParams.name;
    let html = ""&lt;h1&gt;Hello "" + name + ""&lt;/h1&gt;"";
    this.hello = this.sanitizer.bypassSecurityTrustHtml(html); // Sensitive
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import { Component, OnInit } from '@angular/core';
import { DomSanitizer } from ""@angular/platform-browser"";
import { ActivatedRoute } from '@angular/router';

@Component({
  template: '&lt;div id=""hello""&gt;&lt;h1&gt;Hello {{name}}&lt;/h1&gt;&lt;/div&gt;',
})
export class HelloComponent implements OnInit {
  name: string;

  constructor(private sanitizer: DomSanitizer, private route: ActivatedRoute) { }

  ngOnInit(): void {
    this.name = this.route.snapshot.queryParams.name;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017 Category A7</a> - Cross-Site
  Scripting (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/80.html"">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/83.html"">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/84.html"">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
  <li> <a href=""https://angular.io/guide/security"">Angular - Best Practices - Security</a> </li>
</ul>",BLOCKER,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S1134,"Track uses of ""FIXME"" tags","<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(numerator, denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S5734,Allowing browsers to sniff MIME types is security-sensitive,"<p><a href=""https://blog.mozilla.org/security/2016/08/26/mitigating-mime-confusion-attacks-in-firefox/"">MIME confusion</a> attacks occur when an
attacker successfully tricks a web-browser to interpret a resource as a different type than the one expected. To correctly interpret a resource
(script, image, stylesheet â€¦â€‹) web browsers look for the <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type"">Content-Type
header</a> defined in the HTTP response received from the server, but often this header is not set or is set with an incorrect value. To avoid
content-type mismatch and to provide the best user experience, web browsers try to deduce the right content-type, generally by inspecting the content
of the resources (the first bytes). This ""guess mechanism"" is called <a href=""https://en.wikipedia.org/wiki/Content_sniffing"">MIME type
sniffing</a>.</p>
<p>Attackers can take advantage of this feature when a website (""example.com"" here) allows to upload arbitrary files. In that case, an attacker can
upload a malicious image <em>fakeimage.png</em> (containing malicious JavaScript code or <a
href=""https://docs.microsoft.com/fr-fr/archive/blogs/ieinternals/script-polyglots"">a polyglot content</a> file) such as:</p>
<pre>
&lt;script&gt;alert(document.cookie)&lt;/script&gt;
</pre>
<p>When the victim will visit the website showing the uploaded image, the malicious script embedded into the image will be executed by web browsers
performing MIME type sniffing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type"">Content-Type</a> header is not systematically set for all
  resources. </li>
  <li> Content of resources can be controlled by users. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Implement <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options"">X-Content-Type-Options</a> header with
<em>nosniff</em> value (the only existing value for this header) which is supported by all modern browsers and will prevent browsers from performing
MIME type sniffing, so that in case of Content-Type header mismatch, the resource is not interpreted. For example within a &lt;script&gt; object
context, JavaScript MIME types are expected (like <em>application/javascript</em>) in the Content-Type header.</p>
<h2>Sensitive Code Example</h2>
<p>In Express.js application the code is sensitive if, when using <a href=""https://www.npmjs.com/package/helmet"">helmet</a>, the <code>noSniff</code>
middleware is disabled:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
  helmet({
    noSniff: false, // Sensitive
  })
);
</pre>
<h2>Compliant Solution</h2>
<p>When using <code>helmet</code> in an Express.js application, the <code>noSniff</code> middleware should be enabled (it is also done by
default):</p>
<pre>
const express = require('express');
const helmet= require('helmet');

let app = express();

app.use(helmet.noSniff());
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> -
  Security Misconfiguration </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options"">developer.mozilla.org</a> - X-Content-Type-Options
  </li>
  <li> <a href=""https://blog.mozilla.org/security/2016/08/26/mitigating-mime-confusion-attacks-in-firefox/"">blog.mozilla.org</a> - Mitigating MIME
  Confusion Attacks in Firefox </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S5856,Regular expressions should be syntactically valid,"<p>Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if
they are given a regular expression that does not conform to that syntax.</p>
<p>To avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to
capturing groups should use the correctly spelled name or number of the group.</p>
<p>To match a literal string, rather than a regular expression, either all special characters should be escaped or methods that donâ€™t use regular
expressions should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new RegExp(""(["");
str.match(""(["");
</pre>
<h2>Compliant Solution</h2>
<pre>
new RegExp(""\\(\\["");
str.match(""\\(\\["");
str.replace(""(["", ""{"");
</pre>",CRITICAL,JavaScript,BUG,FALSE
javascript:S1135,"Track uses of ""TODO"" tags","<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",INFO,JavaScript,CODE_SMELL,FALSE
javascript:S5732,Disabling content security policy frame-ancestors directive is security-sensitive,"<p><a href=""https://en.wikipedia.org/wiki/Clickjacking"">Clickjacking</a> attacks occur when an attacker try to trick an user to click on certain
buttons/links of a legit website. This attack can take place with malicious HTML frames well hidden in an attacker website.</p>
<p>For instance, suppose a safe and authentic page of a social network (https://socialnetworkexample.com/makemyprofilpublic) which allows an user to
change the visibility of his profile by clicking on a button. This is a critical feature with high privacy concerns. Users are generally well informed
on the social network of the consequences of this action. An attacker can trick users, without their consent, to do this action with the below
embedded code added on a malicious website:</p>
<pre>
&lt;html&gt;
&lt;b&gt;Click on the button below to win 5000$&lt;/b&gt;
&lt;br&gt;
&lt;iframe src=""https://socialnetworkexample.com/makemyprofilpublic"" width=""200"" height=""200""&gt;&lt;/iframe&gt;
&lt;/html&gt;
</pre>
<p>Playing with the size of the iframe itâ€™s sometimes possible to display only the critical parts of a page, in this case the button of the
<em>makemyprofilpublic</em> page.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> <a href=""https://en.wikipedia.org/wiki/Clickjacking#Clickjacking_categories"">Critical actions</a> of the application are prone to clickjacking
  attacks because a simple click on a link or a button can trigger them. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Implement content security policy <em>frame-ancestors</em> directive which is supported by all modern browsers and will specify the origins of
frame allowed to be loaded by the browser (this directive deprecates <a
href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"">X-Frame-Options</a>).</p>
<h2>Sensitive Code Example</h2>
<p>In Express.js application the code is sensitive if the <a href=""https://www.npmjs.com/package/helmet-csp"">helmet-csp</a> or <a
href=""https://www.npmjs.com/package/helmet"">helmet</a> middleware is used without the <code>frameAncestors</code> directive (or if
<code>frameAncestors</code> is set to <code>'none'</code>):</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
  helmet.contentSecurityPolicy({
    directives: {
      // other directives
      frameAncestors: [""'none'""] // Sensitive: frameAncestors  is set to none
    }
  })
);
</pre>
<h2>Compliant Solution</h2>
<p>In Express.js application a standard way to implement CSP frame-ancestors directive is the <a
href=""https://www.npmjs.com/package/helmet-csp"">helmet-csp</a> or <a href=""https://www.npmjs.com/package/helmet"">helmet</a> middleware:</p>
<pre>
const express = require('express');
const helmet = require('helmet');

let app = express();

app.use(
  helmet.contentSecurityPolicy({
    directives: {
      // other directives
      frameAncestors: [""'example.com'""] // Compliant
    }
  })
);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> -
  Security Misconfiguration </li>
  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html"">OWASP Cheat Sheets</a> - Clickjacking Defense
  Cheat Sheet </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors"">developer.mozilla.org</a> -
  Frame-ancestors </li>
  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"">developer.mozilla.org</a> - Content Security Policy (CSP) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/451.html"">MITRE, CWE-451</a> - User Interface (UI) Misrepresentation of Critical Information
  </li>
  <li> <a href=""https://www.w3.org/TR/CSP3/"">w3.org</a> - Content Security Policy Level 3 </li>
</ul>",MINOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S2589,Boolean expressions should not be gratuitous,"<p>If a boolean expression doesnâ€™t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmerâ€™s intent, then itâ€™s a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a) {
  if (a) { // Noncompliant
    doSomething();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a) {
  if (b) {
    doSomething();
  }
}

// or
if (a) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3798,Variables and functions should not be declared in the global scope,"<p>Any variable or function declared in the global scope implicitly becomes attached to the global object (the <code>window</code> object in a browser
environment). To make it explicit this variable or function should be a property of <code>window</code>. When it is meant to be used just locally, it
should be declared with the <code>const</code> or <code>let</code> keywords (since ECMAScript 2015) or within an Immediately-Invoked Function
Expression (IIFE).</p>
<p>This rule should not be activated when modules are used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myVar = 42;       // Noncompliant
function myFunc() { } // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
window.myVar = 42;
window.myFunc = function() { };
</pre>
<p>or</p>
<pre>
let myVar = 42;
let myFunc = function() { }
</pre>
<p>or</p>
<pre>
// IIFE
(function() {
  var myVar = 42;
  function myFunc() { }
})();
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S4721,Using shell interpreter when executing OS commands is security-sensitive,"<p>Arbitrary OS command injection vulnerabilities are more likely when a shell is spawned rather than a new process, indeed shell meta-chars can be
used (when parameters are user-controlled for instance) to inject OS commands.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> OS command name or parameters are user-controlled. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Use functions that donâ€™t spawn a shell.</p>
<h2>Sensitive Code Example</h2>
<pre>
const cp = require('child_process');

// A shell will be spawn in these following cases:
cp.exec(cmd); // Sensitive
cp.execSync(cmd); // Sensitive

cp.spawn(cmd, { shell: true }); // Sensitive
cp.spawnSync(cmd, { shell: true }); // Sensitive
cp.execFile(cmd, { shell: true }); // Sensitive
cp.execFileSync(cmd, { shell: true }); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<pre>
const cp = require('child_process');

cp.spawnSync(""/usr/bin/file.exe"", { shell: false }); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",MAJOR,JavaScript,SECURITY_HOTSPOT,FALSE
javascript:S4143,Collection elements should not be replaced unconditionally,"<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 fruits[1] = ""banana"";
 fruits[1] = ""apple"";  // Noncompliant - value on index 1 is overwritten

 myMap.set(""key"", 1);
 myMap.set(""key"", 2); // Noncompliant - value for key ""key"" is replaced

 mySet.add(1);
 mySet.add(1); // Noncompliant - element is already in the set
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3863,Imports from the same modules should be merged,"<p>Multiple imports from the same module should be merged together to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import { B1 } from 'b';
import { B2 } from 'b'; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
import { B1, B2 } from 'b';
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S4144,Functions should not have identical implementations,"<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but
may be confusing to maintainers. In the latter case, the code should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {  // Noncompliant
  doTheThing();
  doOtherThing();
  return code;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {
  return calculateCode();
}
</pre>
<h2>Exceptions</h2>
<p>Functions with fewer than 3 lines are ignored.</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2870,"""delete"" should not be used on arrays","<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be
used here too, but if it is, a hole will be left in the array because the indexes/keys wonâ€™t be shifted to reflect the deletion.</p>
<p>The proper method for removing an element at a certain index would be:</p>
<ul>
  <li> <code>Array.prototype.splice</code> - add/remove elements from the array </li>
  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>
  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

delete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']
console.log(myArray[2]); // expected value was 'd' but output is undefined
</pre>
<h2>Compliant Solution</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

// removes 1 element from index 2
removed = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']
console.log(myArray[2]); // outputs 'd'
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3001,"""delete"" should be used only with object properties","<p>The semantics of the <code>delete</code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass
anything else to it, and you may or may not get the desired result.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x  = 1;
delete x;       // Noncompliant

function foo(){
..
}

delete foo;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = {
  x:1,
  foo: function(){
  ...
  }
};
delete obj.x;
delete obj.foo;
</pre>",MINOR,JavaScript,BUG,FALSE
javascript:S2685,"""arguments.caller"" and ""arguments.callee"" should not be used","<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest
versions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>
<blockquote>
  <p>Arguments objects for strict mode functions define non-configurable accessor properties named ""caller"" and ""callee"" which throw a TypeError
  exception on access.</p>
</blockquote>
<p>The same restriction applies to the functionâ€™s <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function whoCalled() {
   if (arguments.caller == null)   //Noncompliant
      console.log('I was called from the global scope.');
   else
      console.log(arguments.caller + ' called me!');  // Noncompliant

  console.log(whoCalled.caller);  // Noncompliant
  console.log(whoCalled.arguments);  // Noncompliant
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2999,"""new"" operators should be used with functions","<p>The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and youâ€™ll get a
<code>TypeError</code> because there wonâ€™t be a constructor function for the <code>new</code> keyword to invoke.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyClass() {
  this.foo = 'bar';
}

var someClass = 1;

var obj1 = new someClass;    // Noncompliant;
var obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
 * @constructor
 */
function MyClass() {
  this.foo = 'bar';
}

var someClass = function(){
  this.prop = 1;
}

var obj1 = new someClass;  // Compliant
var obj2 = new MyClass();  // Compliant regardless of considerJSDoc value
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3735,"""void"" should not be used","<p>The <code>void</code> operator evaluates its argument and unconditionally returns <code>undefined</code>. It can be useful in pre-ECMAScript 5
environments, where <code>undefined</code> could be reassigned, but generally, its use makes code harder to understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
</pre>
<h2>Exceptions</h2>
<p>No issue is raised when <code>void 0</code> is used in place of <code>undefined</code>.</p>
<pre>
if (parameter === void 0) {...}
</pre>
<p>No issue is also raised when <code>void</code> is used before immediately invoked function expressions.</p>
<pre>
void (function() {
   ...
}());
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S2138,"""undefined"" should not be assigned","<p><code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing
variable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,
<code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myObject = {};

// ...
myObject.fname = undefined;  // Noncompliant
// ...

if (myObject.lname == undefined) {
  // property not yet created
}
if (myObject.fname == undefined) {
  // no real way of knowing the true state of myObject.fname
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var myObject = {};

// ...
myObject.fname = null;
// ...

if (myObject.lname == undefined) {
  // property not yet created
}
if (myObject.fname == undefined) {
  // no real way of knowing the true state of myObject.fname
}
</pre>",MINOR,JavaScript,CODE_SMELL,FALSE
javascript:S3834,"""Symbol"" should not be used as a constructor","<p><code>Symbol</code> is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.</p>
<p>An instance can only be created by using <code>Symbol</code> as a function. Using <code>Symbol</code> with the <code>new</code> operator will raise
a <code>TypeError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const sym = new Symbol(""foo"");   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
const sym = Symbol(""foo"");
</pre>",CRITICAL,JavaScript,BUG,FALSE
javascript:S3973,A conditionally executed single line should be denoted by indentation,"<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S3757,"Arithmetic operations should not result in ""NaN""","<p>The result of an expression with an arithmetic operator <code>/, *, %, ++, --, -, +=, -=, *=, /=, %=, +</code> or unary operator <code>+, -</code>
when at least one operand is <code>Object</code> or <code>Undefined</code> will be always a <code>NaN</code> (Not a Number).</p>
<h2>Noncompliant Code Example</h2>
<pre>
x = [1, 2];
var y = x / 4;  //Noncompliant
</pre>
<h2>Exceptions</h2>
<ul>
  <li> <code>Date</code> operands: they are implicitly converted to numbers. </li>
  <li> The binary <code>+</code> operator with <code>Object</code> operand (concatenation). </li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2424,Built-in objects should not be overridden,"<p>Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could
therefore have broad, potentially catastrophic effects on previously-working code.</p>
<p>This rule detects overrides of the following native objects:</p>
<ul>
  <li> Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,
  URIError </li>
  <li> Numbers and dates - Number, Math, Date </li>
  <li> Text processing - String, RegExp </li>
  <li> Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,
  Float64Array </li>
  <li> Keyed collections - Map, Set, WeakMap, WeakSet </li>
  <li> Structured data - ArrayBuffer, DataView, JSON </li>
  <li> Control abstraction objects - Promise </li>
  <li> Reflection - Reflect, Proxy </li>
  <li> Internationalization - Intl </li>
  <li> Non-standard objects - Generator, Iterator, ParallelArray, StopIteration </li>
</ul>",MAJOR,JavaScript,BUG,FALSE
javascript:S4030,Collection and array contents should be used,"<p>When a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the
collection moot, or an access is missing.</p>
<p>This rule raises an issue when no methods are called on a collection other than those that add or remove values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getLength(a, b, c) {
  const strings = [];  // Noncompliant
  strings.push(a);
  strings.push(b);
  strings.push(c);

  return a.length + b.length + c.length;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getLength(a, b, c) {
  return a.length + b.length + c.length;
}
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2310,Loop counters should not be assigned to from within the loop body,"<p>Loop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in
the loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var names = [ ""Jack"", ""Jim"", """", ""John"" ];
for (var i = 0; i &lt; names.length; i++) {
  if (!names[i]) {
    i = names.length;                                 // Non-Compliant
  } else {
    console.log(names[i]);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var names = [ ""Jack"", ""Jim"", """", ""John"" ];
for (var name of names) {
  if (!name) {
    break;                                 // Compliant
  } else {
    console.log(name);
  }
}
</pre>",CRITICAL,JavaScript,CODE_SMELL,FALSE
javascript:S3003,Comparison operators should not be used with strings,"<p>The use of comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) with strings is not likely to yield
the expected results. Make sure the intention was to compare strings and not numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var appleNumber = ""123"";
var orangeNumber = ""45"";
if (appleNumber &lt; orangeNumber) {  // Noncompliant, this condition is true
  alert(""There are more oranges"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var appleNumber = ""123"";
var orangeNumber = ""45"";
if (Number(appleNumber) &lt; Number(orangeNumber)) {
  alert(""There are more oranges"");
}
</pre>
<h2>Exceptions</h2>
<p>The rule ignores string comparisons occurring in the callback of a sort invocation, e.g.:</p>
<pre>
const fruits = ['orange', 'apple', 'banana'];
fruits.sort((a, b) =&gt; a &lt; b);
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3800,Functions should always return the same type,"<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can
return different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {  // Noncompliant
  if (a === 1) {
    return true;
  }
  return 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  if (a === 1) {
    return true;
  }
  return false;
}
</pre>
<h2>Exceptions</h2>
<p>Functions returning <code>this</code> are ignored.</p>
<pre>
function foo() {
  // ...
  return this;
}
</pre>
<p>Functions returning expressions having type <code>any</code> are ignored.</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1862,"Related ""if/else if"" statements should not have the same condition","<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, itâ€™s simply dead code and
at worst, itâ€™s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>&nbsp;</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3981,Collection sizes and array length comparisons should make sense,"<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or
equal to zero doesnâ€™t make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (someSet.size &gt;= 0) {...} // Noncompliant

if (someMap.size &lt; 0) {...} // Noncompliant

const result = someArray.length &gt;= 0;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someSet.size &gt; 0) {...}

if (someMap.size == 0) {...}

const result = someArray.length &gt; 0;
</pre>",MAJOR,JavaScript,BUG,FALSE
javascript:S3579,Array indexes should be numeric,"<p>Associative arrays allow you to store values in an array with either numeric or named indexes. But creating and populating an object is just as
easy as an array, and more reliable if you need named members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let arr = [];
arr[0] = 'a';
arr['name'] = 'bob';  // Noncompliant
arr[1] = 'foo';
</pre>
<h2>Compliant Solution</h2>
<pre>
let obj = {
  name: 'bob',
  arr: ['a', 'foo']
};
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S1788,Function parameters with default values should be last,"<p>The ability to define default values for function parameters can make a function easier to use. Default parameter values allow callers to specify
as many or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code.</p>
<p>But all function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it
impossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass <code>undefined</code> in order to ""get to""
the non-default parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function multiply(a = 1, b) {  // Noncompliant
  return a*b;
}

var x = multiply(42);  // returns NaN as b is undefined
</pre>
<h2>Compliant Solution</h2>
<pre>
function multiply(b, a = 1) {
  return a*b;
}

var x = multiply(42);  // returns 42 as expected
</pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S2817,Web SQL databases should not be used,"<p>The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some
browsers. (It is not supported in Firefox or IE.)</p>
<p>Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var db = window.openDatabase(""myDb"", ""1.0"", ""Personal secrets stored here"", 2*1024*1024);  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities"">OWASP Top 10 2017 Category A9</a> - Using
  Components with Known Vulnerabilities </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",BLOCKER,JavaScript,VULNERABILITY,FALSE
javascript:S2692,"""indexOf"" checks should not be for positive numbers","<p>Most checks against an <code>indexOf</code> call against an array compare it with -1 because 0 is a valid index. Any checks which look for values
&gt;0 ignore the first element, which is likely a bug. If youâ€™re merely checking the presence of the element, consider using <code>includes</code>
instead. Before using&nbsp;<code>includes</code> method make sure that your browser version is supporting it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var color = ""blue"";
var name = ""ishmael"";

var arr = [color, name];

if (arr.indexOf(""blue"") &gt; 0) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var color = ""blue"";
var name = ""ishmael"";

var arr = [color, name];

if (arr.indexOf(""blue"") &gt;= 0) {
  // ...
}
if (arr.includes(""blue"")) {
  // ...
}
</pre>
<h2>See</h2>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"">Array.prototype.includes()</a>
documentation at MDN</p>",MAJOR,JavaScript,CODE_SMELL,FALSE
javascript:S3776,Cognitive Complexity of functions should not be too high,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://redirect.sonarsource.com/doc/cognitive-complexity.html"">Cognitive Complexity</a> </li>
</ul>",CRITICAL,JavaScript,CODE_SMELL,FALSE