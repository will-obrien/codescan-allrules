rules_key,rules_name,rules_mdDesc,rules_severity,rules_langName,rules_type,nCino Specific
cs-js:valid-typeof,enforce comparing `typeof` expressions against valid strings,"<p>For a vast majority of use cases, the result of the <code>typeof</code> operator is one of the following string literals: <code>""undefined""</code>, <code>""object""</code>, <code>""boolean""</code>, <code>""number""</code>, <code>""string""</code>, <code>""function""</code> and <code>""symbol""</code>. It is usually a typing mistake to compare the result of a <code>typeof</code> operator to other string literals.</p>
<h2 id=""ruledetails"">Rule Details</h2>
<p>This rule enforces comparing <code>typeof</code> expressions to valid string literals.</p>
<h2 id=""options"">Options</h2>
<p>This rule has an object option:</p>
<ul>
<li><code>""requireStringLiterals"": true</code> requires <code>typeof</code> expressions to only be compared to string literals or other <code>typeof</code> expressions, and disallows comparisons to any other value.</li>
</ul>
<p>Examples of <strong>incorrect</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint valid-typeof: ""error""*/

typeof foo === ""strnig""
typeof foo == ""undefimed""
typeof bar != ""nunber""
typeof bar !== ""function""
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint valid-typeof: ""error""*/

typeof foo === ""string""
typeof bar == ""undefined""
typeof foo === baz
typeof bar === typeof qux
</code></pre>
<p>Examples of <strong>incorrect</strong> code with the <code>{ ""requireStringLiterals"": true }</code> option:</p>
<pre><code class=""js language-js"">typeof foo === undefined
typeof bar == Object
typeof baz === ""strnig""
typeof qux === ""some invalid type""
typeof baz === anotherVariable
typeof foo == 5
</code></pre>
<p>Examples of <strong>correct</strong> code with the <code>{ ""requireStringLiterals"": true }</code> option:</p>
<pre><code class=""js language-js"">typeof foo === ""undefined""
typeof bar == ""object""
typeof baz === ""string""
typeof bar === typeof qux
</code></pre>
<h2 id=""whennottouseit"">When Not To Use It</h2>
<p>You may want to turn this rule off if you will be using the <code>typeof</code> operator on host objects.</p>",MAJOR,JavaScript,BUG,FALSE
cs-js:no-eq-null,disallow `null` comparisons without type-checking operators,"<p>Comparing to <code>null</code> without a type-checking operator (<code>==</code> or <code>!=</code>), can have unintended results as the comparison will evaluate to true when comparing to not just a <code>null</code>, but also an <code>undefined</code> value.</p>
<pre><code class=""js language-js"">if (foo == null) {
  bar();
}
</code></pre>
<h2 id=""ruledetails"">Rule Details</h2>
<p>The <code>no-eq-null</code> rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to <code>null</code> only match <code>null</code>, and not also <code>undefined</code>. As such it will flag comparisons to null when using <code>==</code> and <code>!=</code>.</p>
<p>Examples of <strong>incorrect</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-eq-null: ""error""*/

if (foo == null) {
  bar();
}

while (qux != null) {
  baz();
}
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-eq-null: ""error""*/

if (foo === null) {
  bar();
}

while (qux !== null) {
  baz();
}
</code></pre>",MAJOR,JavaScript,BUG,FALSE
cs-js:no-iterator,disallow the use of the `__iterator__` property,"<p>The <code>__iterator__</code> property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript's <code>for in</code> and <code>for each</code> constructs. However, this property is now obsolete, so it should not be used. Here's an example of how this used to work:</p>
<pre><code class=""js language-js"">Foo.prototype.__iterator__ = function() {
    return new FooIterator(this);
}
</code></pre>
<p>You should use ECMAScript 6 iterators and generators instead.</p>
<h2 id=""ruledetails"">Rule Details</h2>
<p>This rule is aimed at preventing errors that may arise from using the <code>__iterator__</code> property, which is not implemented in several browsers. As such, it will warn whenever it encounters the <code>__iterator__</code> property.</p>
<p>Examples of <strong>incorrect</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-iterator: ""error""*/

Foo.prototype.__iterator__ = function() {
    return new FooIterator(this);
};

foo.__iterator__ = function () {};

foo[""__iterator__""] = function () {};
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-iterator: ""error""*/

var __iterator__ = foo; // Not using the `__iterator__` property.
</code></pre>
<h2 id=""furtherreading"">Further Reading</h2>
<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"">MDN - Iterators and Generators</a></li>
<li><a href=""https://kangax.github.io/es5-compat-table/es6/#Iterators"">ECMAScript 6 compatibility table - Iterators</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#Object_methods"">Deprecated and Obsolete Features</a></li>
</ul>",MAJOR,JavaScript,CODE_SMELL,FALSE
cs-js:no-label-var,disallow labels that share a name with a variable,"<h2 id=""ruledetails"">Rule Details</h2>
<p>This rule aims to create clearer code by disallowing the bad practice of creating a label that shares a name with a variable that is in scope.</p>
<p>Examples of <strong>incorrect</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-label-var: ""error""*/

var x = foo;
function bar() {
x:
  for (;;) {
    break x;
  }
}
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-label-var: ""error""*/

// The variable that has the same name as the label is not in scope.

function foo() {
  var q = t;
}

function bar() {
q:
  for(;;) {
    break q;
  }
}
</code></pre>
<h2 id=""whennottouseit"">When Not To Use It</h2>
<p>If you don't want to be notified about usage of labels, then it's safe to disable this rule.</p>",MINOR,JavaScript,BUG,FALSE
cs-js:no-proto,disallow the use of the `__proto__` property,"<p><code>__proto__</code> property has been deprecated as of ECMAScript 3.1 and shouldn't be used in the code. Use <code>getPrototypeOf</code> method instead.</p>
<h2 id=""ruledetails"">Rule Details</h2>
<p>When an object is created <code>__proto__</code> is set to the original prototype property of the objectâ€™s constructor function. <code>getPrototypeOf</code> is the preferred method of getting ""the prototype"".</p>
<p>Examples of <strong>incorrect</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-proto: ""error""*/

var a = obj.__proto__;

var a = obj[""__proto__""];
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-proto: ""error""*/

var a = Object.getPrototypeOf(obj);
</code></pre>
<h2 id=""whennottouseit"">When Not To Use It</h2>
<p>If you need to support legacy browsers, you might want to turn this rule off, since support for <code>getPrototypeOf</code> is not yet universal.</p>
<h2 id=""furtherreading"">Further Reading</h2>
<ul>
<li><a href=""http://ejohn.org/blog/objectgetprototypeof/"">Object.getPrototypeOf</a></li>
</ul>",CRITICAL,JavaScript,CODE_SMELL,FALSE
cs-js:no-constant-condition,disallow constant expressions in conditions,"<p>A constant expression (for example, a literal) as a test condition might be a typo or development trigger for a specific behavior. For example, the following code looks as if it is not ready for production.</p>
<pre><code class=""js language-js"">if (false) {
    doSomethingUnfinished();
}
</code></pre>
<h2 id=""ruledetails"">Rule Details</h2>
<p>This rule disallows constant expressions in the test condition of:</p>
<ul>
<li><code>if</code>, <code>for</code>, <code>while</code>, or <code>do...while</code> statement</li>
<li><code>?:</code> ternary expression</li>
</ul>
<p>Examples of <strong>incorrect</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-constant-condition: ""error""*/

if (false) {
    doSomethingUnfinished();
}

if (void x) {
    doSomethingUnfinished();
}

for (;-2;) {
    doSomethingForever();
}

while (typeof x) {
    doSomethingForever();
}

do {
    doSomethingForever();
} while (x = -1);

var result = 0 ? a : b;
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-constant-condition: ""error""*/

if (x === 0) {
    doSomething();
}

for (;;) {
    doSomethingForever();
}

while (typeof x === ""undefined"") {
    doSomething();
}

do {
    doSomething();
} while (x);

var result = x !== 0 ? a : b;
</code></pre>
<h2 id=""options"">Options</h2>
<h3 id=""checkloops"">checkLoops</h3>
<p>Set to <code>true</code> by default. Setting this option to <code>false</code> allows constant expressions in loops.</p>
<p>Examples of <strong>correct</strong> code for when <code>checkLoops</code> is <code>false</code>:</p>
<pre><code class=""js language-js"">/*eslint no-constant-condition: [""error"", { ""checkLoops"": false }]*/

while (true) {
    doSomething();
    if (condition()) {
        break;
    }
};

for (;true;) {
    doSomething();
    if (condition()) {
        break;
    }
};

do {
    doSomething();
    if (condition()) {
        break;
    }
} while (true)
</code></pre>",MAJOR,JavaScript,BUG,FALSE
cs-js:no-new,disallow `new` operators outside of assignments or comparisons,"<p>The goal of using <code>new</code> with a constructor is typically to create an object of a particular type and store that object in a variable, such as:</p>
<pre><code class=""js language-js"">var person = new Person();
</code></pre>
<p>It's less common to use <code>new</code> and not store the result, such as:</p>
<pre><code class=""js language-js"">new Person();
</code></pre>
<p>In this case, the created object is thrown away because its reference isn't stored anywhere, and in many cases, this means that the constructor should be replaced with a function that doesn't require <code>new</code> to be used.</p>
<h2 id=""ruledetails"">Rule Details</h2>
<p>This rule is aimed at maintaining consistency and convention by disallowing constructor calls using the <code>new</code> keyword that do not assign the resulting object to a variable.</p>
<p>Examples of <strong>incorrect</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-new: ""error""*/

new Thing();
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-new: ""error""*/

var thing = new Thing();

Thing();
</code></pre>",MAJOR,JavaScript,CODE_SMELL,FALSE
cs-js:dot-notation,enforce dot notation,"<p>In JavaScript, one can access properties using the dot notation (<code>foo.bar</code>) or square-bracket notation (<code>foo[""bar""]</code>). However, the dot notation is often preferred because it is easier to read, less verbose, and works better with aggressive JavaScript minimizers.</p>
<pre><code class=""js language-js"">foo[""bar""];
</code></pre>
<h2 id=""ruledetails"">Rule Details</h2>
<p>This rule is aimed at maintaining code consistency and improving code readability by encouraging use of the dot notation style whenever possible. As such, it will warn when it encounters an unnecessary use of square-bracket notation.</p>
<p>Examples of <strong>incorrect</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint dot-notation: ""error""*/

var x = foo[""bar""];
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint dot-notation: ""error""*/

var x = foo.bar;

var x = foo[bar];    // Property name is a variable, square-bracket notation required
</code></pre>
<h2 id=""options"">Options</h2>
<p>This rule accepts a single options argument:</p>
<ul>
<li>Set the <code>allowKeywords</code> option to <code>false</code> (default is <code>true</code>) to follow ECMAScript version 3 compatible style, avoiding dot notation for reserved word properties.</li>
<li>Set the <code>allowPattern</code> option to a regular expression string to allow bracket notation for property names that match a pattern (by default, no pattern is tested).</li>
</ul>
<h3 id=""allowkeywords"">allowKeywords</h3>
<p>Examples of <strong>correct</strong> code for the <code>{ ""allowKeywords"": false }</code> option:</p>
<pre><code class=""js language-js"">/*eslint dot-notation: [""error"", { ""allowKeywords"": false }]*/

var foo = { ""class"": ""CS 101"" }
var x = foo[""class""]; // Property name is a reserved word, square-bracket notation required
</code></pre>
<h3 id=""allowpattern"">allowPattern</h3>
<p>For example, when preparing data to be sent to an external API, it is often required to use property names that include underscores.  If the <code>camelcase</code> rule is in effect, these <a href=""https://en.wikipedia.org/wiki/Snake_case"">snake case</a> properties would not be allowed.  By providing an <code>allowPattern</code> to the <code>dot-notation</code> rule, these snake case properties can be accessed with bracket notation.</p>
<p>Examples of <strong>correct</strong> code for the sample <code>{ ""allowPattern"": ""^[a-z]+(_[a-z]+)+$"" }</code> option:</p>
<pre><code class=""js language-js"">/*eslint camelcase: ""error""*/
/*eslint dot-notation: [""error"", { ""allowPattern"": ""^[a-z]+(_[a-z]+)+$"" }]*/

var data = {};
data.foo_bar = 42;

var data = {};
data[""fooBar""] = 42;

var data = {};
data[""foo_bar""] = 42; // no warning
</code></pre>",MINOR,JavaScript,CODE_SMELL,FALSE
cs-js:no-throw-literal,disallow throwing literals as exceptions,"<p>It is considered good practice to only <code>throw</code> the <code>Error</code> object itself or an object using the <code>Error</code> object as base objects for user-defined exceptions.
The fundamental benefit of <code>Error</code> objects is that they automatically keep track of where they were built and originated.</p>
<p>This rule restricts what can be thrown as an exception.  When it was first created, it only prevented literals from being thrown (hence the name), but it has now been expanded to only allow expressions which have a possibility of being an <code>Error</code> object.</p>
<h2 id=""ruledetails"">Rule Details</h2>
<p>This rule is aimed at maintaining consistency when throwing exception by disallowing to throw literals and other expressions which cannot possibly be an <code>Error</code> object.</p>
<p>Examples of <strong>incorrect</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-throw-literal: ""error""*/
/*eslint-env es6*/

throw ""error"";

throw 0;

throw undefined;

throw null;

var err = new Error();
throw ""an "" + err;
// err is recast to a string literal

var err = new Error();
throw `${err}`
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule:</p>
<pre><code class=""js language-js"">/*eslint no-throw-literal: ""error""*/

throw new Error();

throw new Error(""error"");

var e = new Error(""error"");
throw e;

try {
    throw new Error(""error"");
} catch (e) {
    throw e;
}
</code></pre>
<h2 id=""knownlimitations"">Known Limitations</h2>
<p>Due to the limits of static analysis, this rule cannot guarantee that you will only throw <code>Error</code> objects.</p>
<p>Examples of <strong>correct</strong> code for this rule, but which do not throw an <code>Error</code> object:</p>
<pre><code class=""js language-js"">/*eslint no-throw-literal: ""error""*/

var err = ""error"";
throw err;

function foo(bar) {
    console.log(bar);
}
throw foo(""error"");

throw new String(""error"");

var foo = {
    bar: ""error""
};
throw foo.bar;
</code></pre>",MINOR,JavaScript,CODE_SMELL,FALSE
cs-js:handle-callback-err,require error handling in callbacks,"<p>In Node.js, a common pattern for dealing with asynchronous behavior is called the callback pattern.
This pattern expects an <code>Error</code> object or <code>null</code> as the first argument of the callback.
Forgetting to handle these errors can lead to some really strange behavior in your application.</p>
<pre><code class=""js language-js"">function loadData (err, data) {
    doSomething(); // forgot to handle error
}
</code></pre>
<h2 id=""ruledetails"">Rule Details</h2>
<p>This rule expects that when you're using the callback pattern in Node.js you'll handle the error.</p>
<h2 id=""options"">Options</h2>
<p>The rule takes a single string option: the name of the error parameter. The default is <code>""err""</code>.</p>
<p>Examples of <strong>incorrect</strong> code for this rule with the default <code>""err""</code> parameter name:</p>
<pre><code class=""js language-js"">/*eslint handle-callback-err: ""error""*/

function loadData (err, data) {
    doSomething();
}
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule with the default <code>""err""</code> parameter name:</p>
<pre><code class=""js language-js"">/*eslint handle-callback-err: ""error""*/

function loadData (err, data) {
    if (err) {
        console.log(err.stack);
    }
    doSomething();
}

function generateError (err) {
    if (err) {}
}
</code></pre>
<p>Examples of <strong>correct</strong> code for this rule with a sample <code>""error""</code> parameter name:</p>
<pre><code class=""js language-js"">/*eslint handle-callback-err: [""error"", ""error""]*/

function loadData (error, data) {
    if (error) {
       console.log(error.stack);
    }
    doSomething();
}
</code></pre>
<h3 id=""regularexpression"">regular expression</h3>
<p>Sometimes (especially in big projects) the name of the error variable is not consistent across the project,
so you need a more flexible configuration to ensure that the rule reports all unhandled errors.</p>
<p>If the configured name of the error variable begins with a <code>^</code> it is considered to be a regexp pattern.</p>
<ul>
<li>If the option is <code>""^(err|error|anySpecificError)$""</code>, the rule reports unhandled errors where the parameter name can be <code>err</code>, <code>error</code> or <code>anySpecificError</code>.</li>
<li>If the option is <code>""^.+Error$""</code>, the rule reports unhandled errors where the parameter name ends with <code>Error</code> (for example, <code>connectionError</code> or <code>validationError</code> will match).</li>
<li>If the option is <code>""^.*(e|E)rr""</code>, the rule reports unhandled errors where the parameter name matches any string that contains <code>err</code> or <code>Err</code> (for example, <code>err</code>, <code>error</code>, <code>anyError</code>, <code>some_err</code> will match).</li>
</ul>
<h2 id=""whennottouseit"">When Not To Use It</h2>
<p>There are cases where it may be safe for your application to ignore errors, however only ignore errors if you are
confident that some other form of monitoring will help you catch the problem.</p>
<h2 id=""furtherreading"">Further Reading</h2>
<ul>
<li><a href=""https://github.com/maxogden/art-of-node#callbacks"">The Art Of Node: Callbacks</a></li>
<li><a href=""https://docs.nodejitsu.com/articles/errors/what-are-the-error-conventions/"">Nodejitsu: What are the error conventions?</a></li>
</ul>",MINOR,JavaScript,BUG,FALSE
