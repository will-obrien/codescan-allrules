key,name,mdDesc,severity,langName,type
sf:HotspotTypeReflection,Type Reflection Is Security Sensitive,"Dynamically executing code is security-sensitive.  If the code comes from an untrusted source, the untrusted source may be able to choose which code to run.<br/>\nThis vulnerability can lead to:\n<br/><ul>\n<li>Unintended modification of the system state.</li>\n<li>Errors and/or termination of the application.</li>\n<li>Leaking of sensitive information in an error message.</li><br/>\n<br/>\n<h2>See</h2> \n<ul>\n  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') </li>\n  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code\n  ('Unsafe Reflection') </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n</ul>\n      <BR><h2>Example:</h2><pre>\npublic MyController {\n  private interface Implementation{\n    void run();\n  }\n  private class AdminImplementation implements Implementation{\n    public void run(){\n      ... do something privileged\n    }\n  }\n  private class StandardImplementation implements Implementation{\n    public void run(){\n	  ... normal implementation\n    }\n  }\n\n  public void init(){\n    Implementation i = Type.forName(implementationName);\n      i.run(); //Bad: This unchecked implementation could lead to unexpectedly running the AdminImplementation code.\n  }\n\n}\n      </pre>",MAJOR,APEX,SECURITY_HOTSPOT
sf:HotspotEncrypt,Encrypting Data Is Security-Sensitive,"Encrypting data is security-sensitive. Although most encryption problems are solved or managed by Salesforce, care must be taken when relying on encryption.<br/>\n<br/>\nSee <a href=""https://developer.salesforce.com/page/Secure_Coding_Storing_Secrets"">Storing Sensitive Data</a> for more information.<br/>\n<br/>\nFor example:<br/>\n<ul>\n	<li>Ensure that keys are generated randomly</li>\n	<li>That keys are stored securely in a Protected Custom Setting or Protected Custom Metadata type</li>\n	<li>Never store keys in Apex classes</li>\n	<li>You may want to consider a key-rotation scheme</li>\n	<li>Consider whether the keys can be leaked: have the keys been downloaded to an unsecure site, for example</li>\n</ul>\n<br/>\n<h2>See</h2>\n<ul>\n  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>\n  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>",CRITICAL,APEX,SECURITY_HOTSPOT
sf:HotspotCookies,Using Cookies Is Security-Sensitive,"Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.<br/>\n	<br/>\n  <h2>See</h2>\n  <ul>\n	  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>\n	  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>\n	  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking </li>\n	  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n	  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n	  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,\n	  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>\n	  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>\n	</ul>\n  <BR><h2>Example:</h2><pre>\n\n  Cookie userCookie = new Cookie('CookieName', fieldValueToBeStoredAsCookie, null, 315569260, false);\n  ApexPages.currentPage().setCookies(new Cookie[] {\n      userCookie     //Bad: The cookie could be targeted by attackers to get access to sensitive information.\n  });\n\n  </pre>",CRITICAL,APEX,SECURITY_HOTSPOT
sf:HotspotUserInfoGetSessionIdUsage,Using UserInfo.GetSessionId() Is Security-Sensitive,"The use of UserInfo.GetSessionId() is security-sensitive. Ensure that you need to do this.\n<br/>\n<h2>See</h2>\n<ul>\n  <li> <a href=""http://cwe.mitre.org/data/definitions/807"">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication and Session Management</li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n\n      <BR><h2>Example:</h2><pre>\n//Make sure you need to call the UserInfo.getSessionId() method.      \n\n//....\nHttpRequest req = new HttpRequest();\nreq.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());   //There may be a workaround for this.\n//....\n      </pre>",CRITICAL,APEX,SECURITY_HOTSPOT
sf:HotspotDeserializeJson,Deserializing JSON Is Security-Sensitive,"Deserializing an object from an untrusted source is security-sensitive. An attacker could modify the content of the data.<br/>\n<br/>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/502.html"">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>\n  <li> <a href=""https://www.owasp.org/index.php/Deserialization_of_untrusted_data"">OWASP Deserialization of untrusted data</a> </li>\n  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION"">OBJECT_DESERIALIZATION </a> </li>\n</ul>\n  <BR><h2>Example:</h2><pre>\n\nclass Car{ \n  \n  private String make;\n  private String year;\n  \n  public void createCar(String z, String x){ \n    Car c = (Car)JSON.deserializeStrict(\n      '{""make"":""'+ z + '"",""year"":""' + x + '""}', Car.class);   //Bad: Unknown inputs are used to create the object.\n  }\n}\n\n  </pre>",MAJOR,APEX,SECURITY_HOTSPOT